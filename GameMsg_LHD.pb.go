// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.1
// source: GameMsg_LHD.proto

package netproto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//下注設定
type LHD_Setting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetCount     []int32 `protobuf:"varint,1,rep,name=BetCount" json:"BetCount,omitempty"`         //一次下注的數量
	BetMoney     *int32  `protobuf:"varint,2,req,name=BetMoney" json:"BetMoney,omitempty"`         //一次下注的錢
	ZhuangLimit  *int64  `protobuf:"varint,3,req,name=ZhuangLimit" json:"ZhuangLimit,omitempty"`   //上莊錢限制
	CanBetLimit  *int64  `protobuf:"varint,4,opt,name=CanBetLimit" json:"CanBetLimit,omitempty"`   //可以押注需要的金幣下限
	BetTypeLimit []int64 `protobuf:"varint,5,rep,name=BetTypeLimit" json:"BetTypeLimit,omitempty"` //方位下注最大限制(0表示不限制)
	IsCanBet     *int32  `protobuf:"varint,6,opt,name=IsCanBet" json:"IsCanBet,omitempty"`         //是否可以下注（1:未超過限制可以下注，0:不允許下注）
}

func (x *LHD_Setting) Reset() {
	*x = LHD_Setting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_LHD_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LHD_Setting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LHD_Setting) ProtoMessage() {}

func (x *LHD_Setting) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_LHD_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LHD_Setting.ProtoReflect.Descriptor instead.
func (*LHD_Setting) Descriptor() ([]byte, []int) {
	return file_GameMsg_LHD_proto_rawDescGZIP(), []int{0}
}

func (x *LHD_Setting) GetBetCount() []int32 {
	if x != nil {
		return x.BetCount
	}
	return nil
}

func (x *LHD_Setting) GetBetMoney() int32 {
	if x != nil && x.BetMoney != nil {
		return *x.BetMoney
	}
	return 0
}

func (x *LHD_Setting) GetZhuangLimit() int64 {
	if x != nil && x.ZhuangLimit != nil {
		return *x.ZhuangLimit
	}
	return 0
}

func (x *LHD_Setting) GetCanBetLimit() int64 {
	if x != nil && x.CanBetLimit != nil {
		return *x.CanBetLimit
	}
	return 0
}

func (x *LHD_Setting) GetBetTypeLimit() []int64 {
	if x != nil {
		return x.BetTypeLimit
	}
	return nil
}

func (x *LHD_Setting) GetIsCanBet() int32 {
	if x != nil && x.IsCanBet != nil {
		return *x.IsCanBet
	}
	return 0
}

//狀態消息
type LHD_Sate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *int32 `protobuf:"varint,1,req,name=State" json:"State,omitempty"` //狀態
	Time  *int32 `protobuf:"varint,2,req,name=Time" json:"Time,omitempty"`   //此狀態的剩餘時間
}

func (x *LHD_Sate) Reset() {
	*x = LHD_Sate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_LHD_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LHD_Sate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LHD_Sate) ProtoMessage() {}

func (x *LHD_Sate) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_LHD_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LHD_Sate.ProtoReflect.Descriptor instead.
func (*LHD_Sate) Descriptor() ([]byte, []int) {
	return file_GameMsg_LHD_proto_rawDescGZIP(), []int{1}
}

func (x *LHD_Sate) GetState() int32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

func (x *LHD_Sate) GetTime() int32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

//用戶斷線重連下注消息
type LHD_UserBetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserMoney *int64              `protobuf:"varint,1,req,name=UserMoney" json:"UserMoney,omitempty"`
	BetInfo   []*LHD_BroadCastBet `protobuf:"bytes,2,rep,name=BetInfo" json:"BetInfo,omitempty"`
}

func (x *LHD_UserBetInfo) Reset() {
	*x = LHD_UserBetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_LHD_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LHD_UserBetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LHD_UserBetInfo) ProtoMessage() {}

func (x *LHD_UserBetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_LHD_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LHD_UserBetInfo.ProtoReflect.Descriptor instead.
func (*LHD_UserBetInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_LHD_proto_rawDescGZIP(), []int{2}
}

func (x *LHD_UserBetInfo) GetUserMoney() int64 {
	if x != nil && x.UserMoney != nil {
		return *x.UserMoney
	}
	return 0
}

func (x *LHD_UserBetInfo) GetBetInfo() []*LHD_BroadCastBet {
	if x != nil {
		return x.BetInfo
	}
	return nil
}

//廣播用戶下注的資料
type LHD_BroadCastBetArr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID          *int32              `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`
	BroadCastBetArr []*LHD_BroadCastBet `protobuf:"bytes,2,rep,name=BroadCastBetArr" json:"BroadCastBetArr,omitempty"`
	BetArrSelf      []*LHD_Bet          `protobuf:"bytes,3,rep,name=BetArrSelf" json:"BetArrSelf,omitempty"`
}

func (x *LHD_BroadCastBetArr) Reset() {
	*x = LHD_BroadCastBetArr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_LHD_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LHD_BroadCastBetArr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LHD_BroadCastBetArr) ProtoMessage() {}

func (x *LHD_BroadCastBetArr) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_LHD_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LHD_BroadCastBetArr.ProtoReflect.Descriptor instead.
func (*LHD_BroadCastBetArr) Descriptor() ([]byte, []int) {
	return file_GameMsg_LHD_proto_rawDescGZIP(), []int{3}
}

func (x *LHD_BroadCastBetArr) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *LHD_BroadCastBetArr) GetBroadCastBetArr() []*LHD_BroadCastBet {
	if x != nil {
		return x.BroadCastBetArr
	}
	return nil
}

func (x *LHD_BroadCastBetArr) GetBetArrSelf() []*LHD_Bet {
	if x != nil {
		return x.BetArrSelf
	}
	return nil
}

//廣播用戶下注內容數據結構
type LHD_BroadCastBet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  *int32 `protobuf:"varint,1,req,name=Type" json:"Type,omitempty"`
	Money *int64 `protobuf:"varint,2,req,name=Money" json:"Money,omitempty"`
}

func (x *LHD_BroadCastBet) Reset() {
	*x = LHD_BroadCastBet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_LHD_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LHD_BroadCastBet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LHD_BroadCastBet) ProtoMessage() {}

func (x *LHD_BroadCastBet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_LHD_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LHD_BroadCastBet.ProtoReflect.Descriptor instead.
func (*LHD_BroadCastBet) Descriptor() ([]byte, []int) {
	return file_GameMsg_LHD_proto_rawDescGZIP(), []int{4}
}

func (x *LHD_BroadCastBet) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *LHD_BroadCastBet) GetMoney() int64 {
	if x != nil && x.Money != nil {
		return *x.Money
	}
	return 0
}

//用戶下注資料
type LHD_BetArr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetArr []*LHD_Bet `protobuf:"bytes,1,rep,name=BetArr" json:"BetArr,omitempty"`
}

func (x *LHD_BetArr) Reset() {
	*x = LHD_BetArr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_LHD_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LHD_BetArr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LHD_BetArr) ProtoMessage() {}

func (x *LHD_BetArr) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_LHD_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LHD_BetArr.ProtoReflect.Descriptor instead.
func (*LHD_BetArr) Descriptor() ([]byte, []int) {
	return file_GameMsg_LHD_proto_rawDescGZIP(), []int{5}
}

func (x *LHD_BetArr) GetBetArr() []*LHD_Bet {
	if x != nil {
		return x.BetArr
	}
	return nil
}

//用戶下注數據結構
type LHD_Bet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetType *int32 `protobuf:"varint,1,req,name=BetType" json:"BetType,omitempty"`
	Count   *int32 `protobuf:"varint,2,req,name=Count" json:"Count,omitempty"`
}

func (x *LHD_Bet) Reset() {
	*x = LHD_Bet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_LHD_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LHD_Bet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LHD_Bet) ProtoMessage() {}

func (x *LHD_Bet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_LHD_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LHD_Bet.ProtoReflect.Descriptor instead.
func (*LHD_Bet) Descriptor() ([]byte, []int) {
	return file_GameMsg_LHD_proto_rawDescGZIP(), []int{6}
}

func (x *LHD_Bet) GetBetType() int32 {
	if x != nil && x.BetType != nil {
		return *x.BetType
	}
	return 0
}

func (x *LHD_Bet) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

//龍虎鬥下注的結果
type LHD_BetRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret         *int32     `protobuf:"varint,1,req,name=Ret" json:"Ret,omitempty"`                //0下注成功，-1用戶金額不足，-2下注的類型未找到，-3莊家不能下注，-4此類下注已達到上限，-6下注方位限紅
	Money       *int64     `protobuf:"varint,2,req,name=Money" json:"Money,omitempty"`            //用戶的錢，下注以後的金額。
	Type        *int32     `protobuf:"varint,3,opt,name=Type" json:"Type,omitempty"`              //下注超過限制的下注類型
	BetArr      []*LHD_Bet `protobuf:"bytes,4,rep,name=BetArr" json:"BetArr,omitempty"`           //用戶下注數據
	UserID      *int32     `protobuf:"varint,5,req,name=UserID" json:"UserID,omitempty"`          //用戶id
	TotalBetArr []*LHD_Bet `protobuf:"bytes,6,rep,name=TotalBetArr" json:"TotalBetArr,omitempty"` //該區的總下注
}

func (x *LHD_BetRet) Reset() {
	*x = LHD_BetRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_LHD_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LHD_BetRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LHD_BetRet) ProtoMessage() {}

func (x *LHD_BetRet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_LHD_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LHD_BetRet.ProtoReflect.Descriptor instead.
func (*LHD_BetRet) Descriptor() ([]byte, []int) {
	return file_GameMsg_LHD_proto_rawDescGZIP(), []int{7}
}

func (x *LHD_BetRet) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *LHD_BetRet) GetMoney() int64 {
	if x != nil && x.Money != nil {
		return *x.Money
	}
	return 0
}

func (x *LHD_BetRet) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *LHD_BetRet) GetBetArr() []*LHD_Bet {
	if x != nil {
		return x.BetArr
	}
	return nil
}

func (x *LHD_BetRet) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *LHD_BetRet) GetTotalBetArr() []*LHD_Bet {
	if x != nil {
		return x.TotalBetArr
	}
	return nil
}

//遊戲撲克結果
type LHD_GameResultPoker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Poker   []*LHD_Poker `protobuf:"bytes,1,rep,name=Poker" json:"Poker,omitempty"`      //第一張為龍牌，第二張為虎牌
	TableNo *int32       `protobuf:"varint,2,opt,name=TableNo" json:"TableNo,omitempty"` //桌子ID
}

func (x *LHD_GameResultPoker) Reset() {
	*x = LHD_GameResultPoker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_LHD_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LHD_GameResultPoker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LHD_GameResultPoker) ProtoMessage() {}

func (x *LHD_GameResultPoker) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_LHD_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LHD_GameResultPoker.ProtoReflect.Descriptor instead.
func (*LHD_GameResultPoker) Descriptor() ([]byte, []int) {
	return file_GameMsg_LHD_proto_rawDescGZIP(), []int{8}
}

func (x *LHD_GameResultPoker) GetPoker() []*LHD_Poker {
	if x != nil {
		return x.Poker
	}
	return nil
}

func (x *LHD_GameResultPoker) GetTableNo() int32 {
	if x != nil && x.TableNo != nil {
		return *x.TableNo
	}
	return 0
}

type LHD_GameResultOneUserWin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID   *int32 `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`     //玩家ID
	WinMoney *int64 `protobuf:"varint,2,req,name=WinMoney" json:"WinMoney,omitempty"` //輸贏錢
}

func (x *LHD_GameResultOneUserWin) Reset() {
	*x = LHD_GameResultOneUserWin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_LHD_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LHD_GameResultOneUserWin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LHD_GameResultOneUserWin) ProtoMessage() {}

func (x *LHD_GameResultOneUserWin) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_LHD_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LHD_GameResultOneUserWin.ProtoReflect.Descriptor instead.
func (*LHD_GameResultOneUserWin) Descriptor() ([]byte, []int) {
	return file_GameMsg_LHD_proto_rawDescGZIP(), []int{9}
}

func (x *LHD_GameResultOneUserWin) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *LHD_GameResultOneUserWin) GetWinMoney() int64 {
	if x != nil && x.WinMoney != nil {
		return *x.WinMoney
	}
	return 0
}

//遊戲用戶贏錢結果 LHDGameResultTOPNWin=10019
type LHD_GameResultTOPNWin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZhuangWin   *int64                      `protobuf:"varint,1,req,name=ZhuangWin" json:"ZhuangWin,omitempty"`
	SelfWin     *int64                      `protobuf:"varint,2,req,name=SelfWin" json:"SelfWin,omitempty"`
	Result      *int32                      `protobuf:"varint,3,req,name=Result" json:"Result,omitempty"`          // 1 //龍, 2 //和, 3 //虎
	WinUserInfo []*LHD_GameResultOneUserWin `protobuf:"bytes,4,rep,name=WinUserInfo" json:"WinUserInfo,omitempty"` //所有人輸贏數據
}

func (x *LHD_GameResultTOPNWin) Reset() {
	*x = LHD_GameResultTOPNWin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_LHD_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LHD_GameResultTOPNWin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LHD_GameResultTOPNWin) ProtoMessage() {}

func (x *LHD_GameResultTOPNWin) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_LHD_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LHD_GameResultTOPNWin.ProtoReflect.Descriptor instead.
func (*LHD_GameResultTOPNWin) Descriptor() ([]byte, []int) {
	return file_GameMsg_LHD_proto_rawDescGZIP(), []int{10}
}

func (x *LHD_GameResultTOPNWin) GetZhuangWin() int64 {
	if x != nil && x.ZhuangWin != nil {
		return *x.ZhuangWin
	}
	return 0
}

func (x *LHD_GameResultTOPNWin) GetSelfWin() int64 {
	if x != nil && x.SelfWin != nil {
		return *x.SelfWin
	}
	return 0
}

func (x *LHD_GameResultTOPNWin) GetResult() int32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

func (x *LHD_GameResultTOPNWin) GetWinUserInfo() []*LHD_GameResultOneUserWin {
	if x != nil {
		return x.WinUserInfo
	}
	return nil
}

//遊戲用戶贏錢結果
type LHD_GameResultUserMoney struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZhuangWin   *int64            `protobuf:"varint,1,req,name=ZhuangWin" json:"ZhuangWin,omitempty"`
	SelfWin     *int64            `protobuf:"varint,2,req,name=SelfWin" json:"SelfWin,omitempty"`
	WinUserInfo []*LHD_WinUerInfo `protobuf:"bytes,3,rep,name=WinUserInfo" json:"WinUserInfo,omitempty"` //贏錢前三名的人信息
}

func (x *LHD_GameResultUserMoney) Reset() {
	*x = LHD_GameResultUserMoney{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_LHD_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LHD_GameResultUserMoney) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LHD_GameResultUserMoney) ProtoMessage() {}

func (x *LHD_GameResultUserMoney) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_LHD_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LHD_GameResultUserMoney.ProtoReflect.Descriptor instead.
func (*LHD_GameResultUserMoney) Descriptor() ([]byte, []int) {
	return file_GameMsg_LHD_proto_rawDescGZIP(), []int{11}
}

func (x *LHD_GameResultUserMoney) GetZhuangWin() int64 {
	if x != nil && x.ZhuangWin != nil {
		return *x.ZhuangWin
	}
	return 0
}

func (x *LHD_GameResultUserMoney) GetSelfWin() int64 {
	if x != nil && x.SelfWin != nil {
		return *x.SelfWin
	}
	return 0
}

func (x *LHD_GameResultUserMoney) GetWinUserInfo() []*LHD_WinUerInfo {
	if x != nil {
		return x.WinUserInfo
	}
	return nil
}

//贏錢玩家信息
type LHD_WinUerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName *string `protobuf:"bytes,1,req,name=UserName" json:"UserName,omitempty"`
	Win      *int64  `protobuf:"varint,2,req,name=Win" json:"Win,omitempty"`
}

func (x *LHD_WinUerInfo) Reset() {
	*x = LHD_WinUerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_LHD_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LHD_WinUerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LHD_WinUerInfo) ProtoMessage() {}

func (x *LHD_WinUerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_LHD_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LHD_WinUerInfo.ProtoReflect.Descriptor instead.
func (*LHD_WinUerInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_LHD_proto_rawDescGZIP(), []int{12}
}

func (x *LHD_WinUerInfo) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *LHD_WinUerInfo) GetWin() int64 {
	if x != nil && x.Win != nil {
		return *x.Win
	}
	return 0
}

//龍虎鬥牌的點數和花色
type LHD_Poker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Color  *int32 `protobuf:"varint,1,req,name=Color" json:"Color,omitempty"`   //從0-3，分別表示黑桃，紅桃，櫻花，方塊
	Number *int32 `protobuf:"varint,2,req,name=Number" json:"Number,omitempty"` //數字1-13，A-K
}

func (x *LHD_Poker) Reset() {
	*x = LHD_Poker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_LHD_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LHD_Poker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LHD_Poker) ProtoMessage() {}

func (x *LHD_Poker) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_LHD_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LHD_Poker.ProtoReflect.Descriptor instead.
func (*LHD_Poker) Descriptor() ([]byte, []int) {
	return file_GameMsg_LHD_proto_rawDescGZIP(), []int{13}
}

func (x *LHD_Poker) GetColor() int32 {
	if x != nil && x.Color != nil {
		return *x.Color
	}
	return 0
}

func (x *LHD_Poker) GetNumber() int32 {
	if x != nil && x.Number != nil {
		return *x.Number
	}
	return 0
}

type LHD_Cards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cards []*LHD_Poker `protobuf:"bytes,1,rep,name=Cards" json:"Cards,omitempty"` //第一張為龍牌，第二張為虎牌
}

func (x *LHD_Cards) Reset() {
	*x = LHD_Cards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_LHD_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LHD_Cards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LHD_Cards) ProtoMessage() {}

func (x *LHD_Cards) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_LHD_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LHD_Cards.ProtoReflect.Descriptor instead.
func (*LHD_Cards) Descriptor() ([]byte, []int) {
	return file_GameMsg_LHD_proto_rawDescGZIP(), []int{14}
}

func (x *LHD_Cards) GetCards() []*LHD_Poker {
	if x != nil {
		return x.Cards
	}
	return nil
}

//前20次開出的牌
type LHD_ResultCardList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardList []*LHD_Cards `protobuf:"bytes,1,rep,name=CardList" json:"CardList,omitempty"`
	TableNo  *int32       `protobuf:"varint,2,opt,name=TableNo" json:"TableNo,omitempty"` //桌子ID
}

func (x *LHD_ResultCardList) Reset() {
	*x = LHD_ResultCardList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_LHD_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LHD_ResultCardList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LHD_ResultCardList) ProtoMessage() {}

func (x *LHD_ResultCardList) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_LHD_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LHD_ResultCardList.ProtoReflect.Descriptor instead.
func (*LHD_ResultCardList) Descriptor() ([]byte, []int) {
	return file_GameMsg_LHD_proto_rawDescGZIP(), []int{15}
}

func (x *LHD_ResultCardList) GetCardList() []*LHD_Cards {
	if x != nil {
		return x.CardList
	}
	return nil
}

func (x *LHD_ResultCardList) GetTableNo() int32 {
	if x != nil && x.TableNo != nil {
		return *x.TableNo
	}
	return 0
}

//上莊結果
type LHD_ShangzhuangRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *int32 `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"` //值為1時下莊成功，值為0表示上莊成功，值為-1時上莊失敗資金不足，值為-2時已經在上莊列表中。
}

func (x *LHD_ShangzhuangRet) Reset() {
	*x = LHD_ShangzhuangRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_LHD_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LHD_ShangzhuangRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LHD_ShangzhuangRet) ProtoMessage() {}

func (x *LHD_ShangzhuangRet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_LHD_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LHD_ShangzhuangRet.ProtoReflect.Descriptor instead.
func (*LHD_ShangzhuangRet) Descriptor() ([]byte, []int) {
	return file_GameMsg_LHD_proto_rawDescGZIP(), []int{16}
}

func (x *LHD_ShangzhuangRet) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

//是否上莊
type LHD_ShangZhuang struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsShangZhuang *bool `protobuf:"varint,1,req,name=IsShangZhuang" json:"IsShangZhuang,omitempty"`
}

func (x *LHD_ShangZhuang) Reset() {
	*x = LHD_ShangZhuang{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_LHD_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LHD_ShangZhuang) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LHD_ShangZhuang) ProtoMessage() {}

func (x *LHD_ShangZhuang) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_LHD_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LHD_ShangZhuang.ProtoReflect.Descriptor instead.
func (*LHD_ShangZhuang) Descriptor() ([]byte, []int) {
	return file_GameMsg_LHD_proto_rawDescGZIP(), []int{17}
}

func (x *LHD_ShangZhuang) GetIsShangZhuang() bool {
	if x != nil && x.IsShangZhuang != nil {
		return *x.IsShangZhuang
	}
	return false
}

//莊家信息
type LHD_ZhuangInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID      *int32      `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`
	LastTurn    *int32      `protobuf:"varint,2,req,name=LastTurn" json:"LastTurn,omitempty"`
	UserInfo    []*GameUser `protobuf:"bytes,3,rep,name=UserInfo" json:"UserInfo,omitempty"`
	UpdateScore *int64      `protobuf:"varint,4,opt,name=UpdateScore" json:"UpdateScore,omitempty"` //上莊期間的輸贏
}

func (x *LHD_ZhuangInfo) Reset() {
	*x = LHD_ZhuangInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_LHD_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LHD_ZhuangInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LHD_ZhuangInfo) ProtoMessage() {}

func (x *LHD_ZhuangInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_LHD_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LHD_ZhuangInfo.ProtoReflect.Descriptor instead.
func (*LHD_ZhuangInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_LHD_proto_rawDescGZIP(), []int{18}
}

func (x *LHD_ZhuangInfo) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *LHD_ZhuangInfo) GetLastTurn() int32 {
	if x != nil && x.LastTurn != nil {
		return *x.LastTurn
	}
	return 0
}

func (x *LHD_ZhuangInfo) GetUserInfo() []*GameUser {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *LHD_ZhuangInfo) GetUpdateScore() int64 {
	if x != nil && x.UpdateScore != nil {
		return *x.UpdateScore
	}
	return 0
}

//上莊列表
type LHD_ZhuangList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfo []*GameUser `protobuf:"bytes,1,rep,name=UserInfo" json:"UserInfo,omitempty"`
}

func (x *LHD_ZhuangList) Reset() {
	*x = LHD_ZhuangList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_LHD_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LHD_ZhuangList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LHD_ZhuangList) ProtoMessage() {}

func (x *LHD_ZhuangList) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_LHD_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LHD_ZhuangList.ProtoReflect.Descriptor instead.
func (*LHD_ZhuangList) Descriptor() ([]byte, []int) {
	return file_GameMsg_LHD_proto_rawDescGZIP(), []int{19}
}

func (x *LHD_ZhuangList) GetUserInfo() []*GameUser {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

//進入遊戲玩家列表 BRNNEnterGameUserRank=10019
type LHD_EnterGameUserRankList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserList []*GameUser `protobuf:"bytes,1,rep,name=UserList" json:"UserList,omitempty"` //進入本局遊戲時金幣topn
}

func (x *LHD_EnterGameUserRankList) Reset() {
	*x = LHD_EnterGameUserRankList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_LHD_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LHD_EnterGameUserRankList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LHD_EnterGameUserRankList) ProtoMessage() {}

func (x *LHD_EnterGameUserRankList) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_LHD_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LHD_EnterGameUserRankList.ProtoReflect.Descriptor instead.
func (*LHD_EnterGameUserRankList) Descriptor() ([]byte, []int) {
	return file_GameMsg_LHD_proto_rawDescGZIP(), []int{20}
}

func (x *LHD_EnterGameUserRankList) GetUserList() []*GameUser {
	if x != nil {
		return x.UserList
	}
	return nil
}

//清除結果回應消息
type LHD_BetClearRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Money *int64 `protobuf:"varint,1,req,name=Money" json:"Money,omitempty"` //當前的錢
	Ret   *int32 `protobuf:"varint,2,req,name=Ret" json:"Ret,omitempty"`     //清除結果-1，清理失敗，達到清理上限，0清理成功
}

func (x *LHD_BetClearRet) Reset() {
	*x = LHD_BetClearRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_LHD_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LHD_BetClearRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LHD_BetClearRet) ProtoMessage() {}

func (x *LHD_BetClearRet) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_LHD_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LHD_BetClearRet.ProtoReflect.Descriptor instead.
func (*LHD_BetClearRet) Descriptor() ([]byte, []int) {
	return file_GameMsg_LHD_proto_rawDescGZIP(), []int{21}
}

func (x *LHD_BetClearRet) GetMoney() int64 {
	if x != nil && x.Money != nil {
		return *x.Money
	}
	return 0
}

func (x *LHD_BetClearRet) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

//房間桌子信息
type LHD_TableInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableNo          *int32 `protobuf:"varint,1,req,name=TableNo" json:"TableNo,omitempty"`                   //桌子ID
	MinLimit         *int32 `protobuf:"varint,2,req,name=MinLimit" json:"MinLimit,omitempty"`                 //限紅
	MaxLimit         *int32 `protobuf:"varint,3,req,name=MaxLimit" json:"MaxLimit,omitempty"`                 //限紅
	ShoeNo           *int32 `protobuf:"varint,4,req,name=ShoeNo" json:"ShoeNo,omitempty"`                     //牌靴序號
	GameNo           *int32 `protobuf:"varint,5,req,name=GameNo" json:"GameNo,omitempty"`                     //牌局序號
	FirstCardIndex   *int32 `protobuf:"varint,6,req,name=FirstCardIndex" json:"FirstCardIndex,omitempty"`     //此牌局第一張卡的序號
	TableLimit       *int64 `protobuf:"varint,7,req,name=TableLimit" json:"TableLimit,omitempty"`             //牌桌限紅
	TieLimit         *int64 `protobuf:"varint,8,req,name=TieLimit" json:"TieLimit,omitempty"`                 //和限紅
	DragonTigerLimit *int64 `protobuf:"varint,9,req,name=DragonTigerLimit" json:"DragonTigerLimit,omitempty"` //龍虎限紅
}

func (x *LHD_TableInfo) Reset() {
	*x = LHD_TableInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GameMsg_LHD_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LHD_TableInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LHD_TableInfo) ProtoMessage() {}

func (x *LHD_TableInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GameMsg_LHD_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LHD_TableInfo.ProtoReflect.Descriptor instead.
func (*LHD_TableInfo) Descriptor() ([]byte, []int) {
	return file_GameMsg_LHD_proto_rawDescGZIP(), []int{22}
}

func (x *LHD_TableInfo) GetTableNo() int32 {
	if x != nil && x.TableNo != nil {
		return *x.TableNo
	}
	return 0
}

func (x *LHD_TableInfo) GetMinLimit() int32 {
	if x != nil && x.MinLimit != nil {
		return *x.MinLimit
	}
	return 0
}

func (x *LHD_TableInfo) GetMaxLimit() int32 {
	if x != nil && x.MaxLimit != nil {
		return *x.MaxLimit
	}
	return 0
}

func (x *LHD_TableInfo) GetShoeNo() int32 {
	if x != nil && x.ShoeNo != nil {
		return *x.ShoeNo
	}
	return 0
}

func (x *LHD_TableInfo) GetGameNo() int32 {
	if x != nil && x.GameNo != nil {
		return *x.GameNo
	}
	return 0
}

func (x *LHD_TableInfo) GetFirstCardIndex() int32 {
	if x != nil && x.FirstCardIndex != nil {
		return *x.FirstCardIndex
	}
	return 0
}

func (x *LHD_TableInfo) GetTableLimit() int64 {
	if x != nil && x.TableLimit != nil {
		return *x.TableLimit
	}
	return 0
}

func (x *LHD_TableInfo) GetTieLimit() int64 {
	if x != nil && x.TieLimit != nil {
		return *x.TieLimit
	}
	return 0
}

func (x *LHD_TableInfo) GetDragonTigerLimit() int64 {
	if x != nil && x.DragonTigerLimit != nil {
		return *x.DragonTigerLimit
	}
	return 0
}

var File_GameMsg_LHD_proto protoreflect.FileDescriptor

var file_GameMsg_LHD_proto_rawDesc = []byte{
	0x0a, 0x11, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x73, 0x67, 0x5f, 0x4c, 0x48, 0x44, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x08, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x47,
	0x61, 0x6d, 0x65, 0x4d, 0x73, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc9, 0x01, 0x0a,
	0x0b, 0x4c, 0x48, 0x44, 0x5f, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08,
	0x42, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08,
	0x42, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x65, 0x74, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x42, 0x65, 0x74, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0b, 0x5a, 0x68, 0x75, 0x61, 0x6e,
	0x67, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x61, 0x6e, 0x42, 0x65, 0x74,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x43, 0x61, 0x6e,
	0x42, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c,
	0x42, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x49, 0x73, 0x43, 0x61, 0x6e, 0x42, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x49, 0x73, 0x43, 0x61, 0x6e, 0x42, 0x65, 0x74, 0x22, 0x34, 0x0a, 0x08, 0x4c, 0x48, 0x44, 0x5f,
	0x53, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x65,
	0x0a, 0x0f, 0x4c, 0x48, 0x44, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12,
	0x34, 0x0a, 0x07, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x48, 0x44, 0x5f,
	0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x42, 0x65, 0x74, 0x52, 0x07, 0x42, 0x65,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xa6, 0x01, 0x0a, 0x13, 0x4c, 0x48, 0x44, 0x5f, 0x42, 0x72,
	0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x44, 0x0a, 0x0f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61,
	0x73, 0x74, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x48, 0x44, 0x5f, 0x42, 0x72,
	0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x42, 0x65, 0x74, 0x52, 0x0f, 0x42, 0x72, 0x6f, 0x61,
	0x64, 0x43, 0x61, 0x73, 0x74, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x12, 0x31, 0x0a, 0x0a, 0x42,
	0x65, 0x74, 0x41, 0x72, 0x72, 0x53, 0x65, 0x6c, 0x66, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x48, 0x44, 0x5f, 0x42,
	0x65, 0x74, 0x52, 0x0a, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x53, 0x65, 0x6c, 0x66, 0x22, 0x3c,
	0x0a, 0x10, 0x4c, 0x48, 0x44, 0x5f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x42,
	0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x22, 0x37, 0x0a, 0x0a,
	0x4c, 0x48, 0x44, 0x5f, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x12, 0x29, 0x0a, 0x06, 0x42, 0x65,
	0x74, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x65, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x48, 0x44, 0x5f, 0x42, 0x65, 0x74, 0x52, 0x06, 0x42,
	0x65, 0x74, 0x41, 0x72, 0x72, 0x22, 0x39, 0x0a, 0x07, 0x4c, 0x48, 0x44, 0x5f, 0x42, 0x65, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x42, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x07, 0x42, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xc0, 0x01, 0x0a, 0x0a, 0x4c, 0x48, 0x44, 0x5f, 0x42, 0x65, 0x74, 0x52, 0x65, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x52, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x52, 0x65,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03,
	0x52, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x42,
	0x65, 0x74, 0x41, 0x72, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x65,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x48, 0x44, 0x5f, 0x42, 0x65, 0x74, 0x52, 0x06,
	0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x33,
	0x0a, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x65, 0x74, 0x41, 0x72, 0x72, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c,
	0x48, 0x44, 0x5f, 0x42, 0x65, 0x74, 0x52, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x65, 0x74,
	0x41, 0x72, 0x72, 0x22, 0x5a, 0x0a, 0x13, 0x4c, 0x48, 0x44, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x05, 0x50, 0x6f,
	0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x48, 0x44, 0x5f, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x05,
	0x50, 0x6f, 0x6b, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x22,
	0x4e, 0x0a, 0x18, 0x4c, 0x48, 0x44, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x4f, 0x6e, 0x65, 0x55, 0x73, 0x65, 0x72, 0x57, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x57, 0x69, 0x6e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x57, 0x69, 0x6e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x22,
	0xad, 0x01, 0x0a, 0x15, 0x4c, 0x48, 0x44, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x54, 0x4f, 0x50, 0x4e, 0x57, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x5a, 0x68, 0x75,
	0x61, 0x6e, 0x67, 0x57, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x5a, 0x68,
	0x75, 0x61, 0x6e, 0x67, 0x57, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x65, 0x6c, 0x66, 0x57,
	0x69, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x07, 0x53, 0x65, 0x6c, 0x66, 0x57, 0x69,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x44, 0x0a, 0x0b, 0x57, 0x69, 0x6e,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x48, 0x44, 0x5f, 0x47, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4f, 0x6e, 0x65, 0x55, 0x73, 0x65, 0x72, 0x57,
	0x69, 0x6e, 0x52, 0x0b, 0x57, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x8d, 0x01, 0x0a, 0x17, 0x4c, 0x48, 0x44, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x5a,
	0x68, 0x75, 0x61, 0x6e, 0x67, 0x57, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09,
	0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x57, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x65, 0x6c,
	0x66, 0x57, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x07, 0x53, 0x65, 0x6c, 0x66,
	0x57, 0x69, 0x6e, 0x12, 0x3a, 0x0a, 0x0b, 0x57, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x48, 0x44, 0x5f, 0x57, 0x69, 0x6e, 0x55, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0b, 0x57, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x3e, 0x0a, 0x0e, 0x4c, 0x48, 0x44, 0x5f, 0x57, 0x69, 0x6e, 0x55, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x57, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x03, 0x57, 0x69, 0x6e, 0x22,
	0x39, 0x0a, 0x09, 0x4c, 0x48, 0x44, 0x5f, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x36, 0x0a, 0x09, 0x4c, 0x48,
	0x44, 0x5f, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4c, 0x48, 0x44, 0x5f, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x05, 0x43, 0x61, 0x72,
	0x64, 0x73, 0x22, 0x5f, 0x0a, 0x12, 0x4c, 0x48, 0x44, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x08, 0x43, 0x61, 0x72, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x48, 0x44, 0x5f, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52,
	0x08, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x6f, 0x22, 0x26, 0x0a, 0x12, 0x4c, 0x48, 0x44, 0x5f, 0x53, 0x68, 0x61, 0x6e, 0x67,
	0x7a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x52, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0x37, 0x0a, 0x0f, 0x4c,
	0x48, 0x44, 0x5f, 0x53, 0x68, 0x61, 0x6e, 0x67, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x12, 0x24,
	0x0a, 0x0d, 0x49, 0x73, 0x53, 0x68, 0x61, 0x6e, 0x67, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0d, 0x49, 0x73, 0x53, 0x68, 0x61, 0x6e, 0x67, 0x5a, 0x68,
	0x75, 0x61, 0x6e, 0x67, 0x22, 0x96, 0x01, 0x0a, 0x0e, 0x4c, 0x48, 0x44, 0x5f, 0x5a, 0x68, 0x75,
	0x61, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x75, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x75, 0x72, 0x6e, 0x12, 0x2e, 0x0a, 0x08, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x40, 0x0a,
	0x0e, 0x4c, 0x48, 0x44, 0x5f, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x2e, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x4b, 0x0a, 0x19, 0x4c, 0x48, 0x44, 0x5f, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x08,
	0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x39, 0x0a, 0x0f,
	0x4c, 0x48, 0x44, 0x5f, 0x42, 0x65, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x65, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x05,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x52, 0x65, 0x74, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x03, 0x52, 0x65, 0x74, 0x22, 0xa1, 0x02, 0x0a, 0x0d, 0x4c, 0x48, 0x44, 0x5f,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x69, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x4d, 0x69, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x4d, 0x61, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x08, 0x4d, 0x61, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x53,
	0x68, 0x6f, 0x65, 0x4e, 0x6f, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x53, 0x68, 0x6f,
	0x65, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x18, 0x05, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x0e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x07, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0a, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x69, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x08, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x54, 0x69, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x2a, 0x0a, 0x10, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x54, 0x69, 0x67, 0x65, 0x72, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x02, 0x28, 0x03, 0x52, 0x10, 0x44, 0x72, 0x61, 0x67, 0x6f,
	0x6e, 0x54, 0x69, 0x67, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x0c, 0x5a, 0x0a, 0x2e,
	0x2f, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
}

var (
	file_GameMsg_LHD_proto_rawDescOnce sync.Once
	file_GameMsg_LHD_proto_rawDescData = file_GameMsg_LHD_proto_rawDesc
)

func file_GameMsg_LHD_proto_rawDescGZIP() []byte {
	file_GameMsg_LHD_proto_rawDescOnce.Do(func() {
		file_GameMsg_LHD_proto_rawDescData = protoimpl.X.CompressGZIP(file_GameMsg_LHD_proto_rawDescData)
	})
	return file_GameMsg_LHD_proto_rawDescData
}

var file_GameMsg_LHD_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_GameMsg_LHD_proto_goTypes = []interface{}{
	(*LHD_Setting)(nil),               // 0: netproto.LHD_Setting
	(*LHD_Sate)(nil),                  // 1: netproto.LHD_Sate
	(*LHD_UserBetInfo)(nil),           // 2: netproto.LHD_UserBetInfo
	(*LHD_BroadCastBetArr)(nil),       // 3: netproto.LHD_BroadCastBetArr
	(*LHD_BroadCastBet)(nil),          // 4: netproto.LHD_BroadCastBet
	(*LHD_BetArr)(nil),                // 5: netproto.LHD_BetArr
	(*LHD_Bet)(nil),                   // 6: netproto.LHD_Bet
	(*LHD_BetRet)(nil),                // 7: netproto.LHD_BetRet
	(*LHD_GameResultPoker)(nil),       // 8: netproto.LHD_GameResultPoker
	(*LHD_GameResultOneUserWin)(nil),  // 9: netproto.LHD_GameResultOneUserWin
	(*LHD_GameResultTOPNWin)(nil),     // 10: netproto.LHD_GameResultTOPNWin
	(*LHD_GameResultUserMoney)(nil),   // 11: netproto.LHD_GameResultUserMoney
	(*LHD_WinUerInfo)(nil),            // 12: netproto.LHD_WinUerInfo
	(*LHD_Poker)(nil),                 // 13: netproto.LHD_Poker
	(*LHD_Cards)(nil),                 // 14: netproto.LHD_Cards
	(*LHD_ResultCardList)(nil),        // 15: netproto.LHD_ResultCardList
	(*LHD_ShangzhuangRet)(nil),        // 16: netproto.LHD_ShangzhuangRet
	(*LHD_ShangZhuang)(nil),           // 17: netproto.LHD_ShangZhuang
	(*LHD_ZhuangInfo)(nil),            // 18: netproto.LHD_ZhuangInfo
	(*LHD_ZhuangList)(nil),            // 19: netproto.LHD_ZhuangList
	(*LHD_EnterGameUserRankList)(nil), // 20: netproto.LHD_EnterGameUserRankList
	(*LHD_BetClearRet)(nil),           // 21: netproto.LHD_BetClearRet
	(*LHD_TableInfo)(nil),             // 22: netproto.LHD_TableInfo
	(*GameUser)(nil),                  // 23: netproto.GameUser
}
var file_GameMsg_LHD_proto_depIdxs = []int32{
	4,  // 0: netproto.LHD_UserBetInfo.BetInfo:type_name -> netproto.LHD_BroadCastBet
	4,  // 1: netproto.LHD_BroadCastBetArr.BroadCastBetArr:type_name -> netproto.LHD_BroadCastBet
	6,  // 2: netproto.LHD_BroadCastBetArr.BetArrSelf:type_name -> netproto.LHD_Bet
	6,  // 3: netproto.LHD_BetArr.BetArr:type_name -> netproto.LHD_Bet
	6,  // 4: netproto.LHD_BetRet.BetArr:type_name -> netproto.LHD_Bet
	6,  // 5: netproto.LHD_BetRet.TotalBetArr:type_name -> netproto.LHD_Bet
	13, // 6: netproto.LHD_GameResultPoker.Poker:type_name -> netproto.LHD_Poker
	9,  // 7: netproto.LHD_GameResultTOPNWin.WinUserInfo:type_name -> netproto.LHD_GameResultOneUserWin
	12, // 8: netproto.LHD_GameResultUserMoney.WinUserInfo:type_name -> netproto.LHD_WinUerInfo
	13, // 9: netproto.LHD_Cards.Cards:type_name -> netproto.LHD_Poker
	14, // 10: netproto.LHD_ResultCardList.CardList:type_name -> netproto.LHD_Cards
	23, // 11: netproto.LHD_ZhuangInfo.UserInfo:type_name -> netproto.GameUser
	23, // 12: netproto.LHD_ZhuangList.UserInfo:type_name -> netproto.GameUser
	23, // 13: netproto.LHD_EnterGameUserRankList.UserList:type_name -> netproto.GameUser
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_GameMsg_LHD_proto_init() }
func file_GameMsg_LHD_proto_init() {
	if File_GameMsg_LHD_proto != nil {
		return
	}
	file_GameMsg_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_GameMsg_LHD_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LHD_Setting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_LHD_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LHD_Sate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_LHD_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LHD_UserBetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_LHD_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LHD_BroadCastBetArr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_LHD_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LHD_BroadCastBet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_LHD_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LHD_BetArr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_LHD_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LHD_Bet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_LHD_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LHD_BetRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_LHD_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LHD_GameResultPoker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_LHD_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LHD_GameResultOneUserWin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_LHD_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LHD_GameResultTOPNWin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_LHD_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LHD_GameResultUserMoney); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_LHD_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LHD_WinUerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_LHD_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LHD_Poker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_LHD_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LHD_Cards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_LHD_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LHD_ResultCardList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_LHD_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LHD_ShangzhuangRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_LHD_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LHD_ShangZhuang); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_LHD_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LHD_ZhuangInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_LHD_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LHD_ZhuangList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_LHD_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LHD_EnterGameUserRankList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_LHD_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LHD_BetClearRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GameMsg_LHD_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LHD_TableInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_GameMsg_LHD_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_GameMsg_LHD_proto_goTypes,
		DependencyIndexes: file_GameMsg_LHD_proto_depIdxs,
		MessageInfos:      file_GameMsg_LHD_proto_msgTypes,
	}.Build()
	File_GameMsg_LHD_proto = out.File
	file_GameMsg_LHD_proto_rawDesc = nil
	file_GameMsg_LHD_proto_goTypes = nil
	file_GameMsg_LHD_proto_depIdxs = nil
}
