// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0-devel
// 	protoc        v3.19.1
// source: Game_BJ.proto

package netproto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type BJ_GameMessageClassID int32

const (
	BJ_GameMessageClassID_BJSettingID            BJ_GameMessageClassID = 10001 //設定相關  S2C
	BJ_GameMessageClassID_BJStateID              BJ_GameMessageClassID = 10002 //階段ID S2C
	BJ_GameMessageClassID_BJBetID                BJ_GameMessageClassID = 10003 //下注ID C2S
	BJ_GameMessageClassID_BJBroadCastBetID       BJ_GameMessageClassID = 10004 //廣播下注 S2C
	BJ_GameMessageClassID_BJGameSceneID          BJ_GameMessageClassID = 10005 //遊戲場景 斷線重連 S2C (BJ_UserInfoArr)
	BJ_GameMessageClassID_BJBetInfoID            BJ_GameMessageClassID = 10006 //用戶斷線重連已下注的消息 S2C
	BJ_GameMessageClassID_BJBetRetID             BJ_GameMessageClassID = 10007 //下注結果 S2C
	BJ_GameMessageClassID_BJCutpaiID             BJ_GameMessageClassID = 10008 //切牌 S2C
	BJ_GameMessageClassID_BJBroadCastCutpaiRetID BJ_GameMessageClassID = 10009 //切哪張牌 C2S
	BJ_GameMessageClassID_BJBroadCastCutpaiID    BJ_GameMessageClassID = 10010 //切牌廣播 S2C
	BJ_GameMessageClassID_BJBroadCastFapaiID     BJ_GameMessageClassID = 10011 //發牌 S2C
	BJ_GameMessageClassID_BJUserOptID            BJ_GameMessageClassID = 10012 //玩家可操作行為 S2C
	BJ_GameMessageClassID_BJUserOptRetID         BJ_GameMessageClassID = 10013 //玩家操作行為 C2S
	BJ_GameMessageClassID_BJGameResultWinID      BJ_GameMessageClassID = 10014 //遊戲結果贏錢 S2C
	BJ_GameMessageClassID_BJUserDiZhuRetID       BJ_GameMessageClassID = 10015 //用戶底注 C2S
	BJ_GameMessageClassID_BJBroadCastUserDiZhuID BJ_GameMessageClassID = 10016 //廣播用戶底注 S2C
	BJ_GameMessageClassID_BJUserSurrender        BJ_GameMessageClassID = 10017 //玩家投降 C2S
	BJ_GameMessageClassID_BJUserInsurence        BJ_GameMessageClassID = 10018 //玩家保險 C2S
	BJ_GameMessageClassID_BJUserHit              BJ_GameMessageClassID = 10019 //玩家要牌 C2S
	BJ_GameMessageClassID_BJUserStand            BJ_GameMessageClassID = 10020 //玩家停牌 C2S
	BJ_GameMessageClassID_BJUserSplit            BJ_GameMessageClassID = 10021 //玩家分牌 C2S
	BJ_GameMessageClassID_BJUserDouble           BJ_GameMessageClassID = 10022 //玩家加倍 C2S
	BJ_GameMessageClassID_BJUserCancel           BJ_GameMessageClassID = 10023 //玩家不投降不保險 C2S
	BJ_GameMessageClassID_BJCurrOptID            BJ_GameMessageClassID = 10024 //當前操作的椅子號 S2C
	BJ_GameMessageClassID_BJStandBroadCastID     BJ_GameMessageClassID = 10025 //停牌廣播 S2C
	BJ_GameMessageClassID_BJUserSplitHit         BJ_GameMessageClassID = 10026 //玩家要牌 C2S
	BJ_GameMessageClassID_BJUserSplitStand       BJ_GameMessageClassID = 10027 //玩家停牌 C2S
	BJ_GameMessageClassID_BJUserSplitDouble      BJ_GameMessageClassID = 10028 //玩家加倍 C2S
	BJ_GameMessageClassID_BJSplitCardBroacast    BJ_GameMessageClassID = 10029 //玩家分牌 S2C (BJ_SplitCard)
	BJ_GameMessageClassID_BJBroadCastYaopaiID    BJ_GameMessageClassID = 10030 //要牌廣播 S2C (BJ_Yaopai)
	BJ_GameMessageClassID_BJBroadCastFanPaiID    BJ_GameMessageClassID = 10031 //莊家翻牌廣播 S2C (BJ_FanPai)
	BJ_GameMessageClassID_BJZhuangJiaYaoPaiID    BJ_GameMessageClassID = 10032 //莊家要牌廣播 S2C (BJ_ZhuangYaoPai)
	BJ_GameMessageClassID_BJZhuangTuoBaoID       BJ_GameMessageClassID = 10033 //莊家保險廣播 S2C (BJ_UserCheck)
	BJ_GameMessageClassID_BJUserRecoverBetID     BJ_GameMessageClassID = 10034 //斷線重連下注消息 S2C (BJ_RecoverScene)
	BJ_GameMessageClassID_BJUserSpecialBetID     BJ_GameMessageClassID = 10035 //廣播特殊下注 S2C (BJ_BroadCastSpecialBet)
	BJ_GameMessageClassID_BJGameEndReadyTimeID   BJ_GameMessageClassID = 10036 //遊戲結束準備時間 S2C (BJ_ReadyTime)
	BJ_GameMessageClassID_BJUserPokerRecoverID   BJ_GameMessageClassID = 10037 //斷線重連後的牌 S2C (BJ_UserPokerRecover)
	BJ_GameMessageClassID_BJUserWinLoseRecoverID BJ_GameMessageClassID = 10038 //斷線重連後的籌碼 S2C (BJ_WinLoseRecover)
	BJ_GameMessageClassID_BJUserWatchDataID      BJ_GameMessageClassID = 10039 //觀戰資訊S2C (BJ_WatchData)
	BJ_GameMessageClassID_BJCheckTimeUpID        BJ_GameMessageClassID = 10040 //觀戰資訊C2S
	BJ_GameMessageClassID_BJSysPoolID            BJ_GameMessageClassID = 10041 //21點水池載入
	BJ_GameMessageClassID_BJSysPoolRetID         BJ_GameMessageClassID = 10042 //21點水池結果
	BJ_GameMessageClassID_BJGetAllUserBetID      BJ_GameMessageClassID = 10043 //玩家已下注多少金額 S2C
	BJ_GameMessageClassID_BJTableInfo            BJ_GameMessageClassID = 10044 //桌子信息
	BJ_GameMessageClassID_BJUserLeave            BJ_GameMessageClassID = 10045
)

// Enum value maps for BJ_GameMessageClassID.
var (
	BJ_GameMessageClassID_name = map[int32]string{
		10001: "BJSettingID",
		10002: "BJStateID",
		10003: "BJBetID",
		10004: "BJBroadCastBetID",
		10005: "BJGameSceneID",
		10006: "BJBetInfoID",
		10007: "BJBetRetID",
		10008: "BJCutpaiID",
		10009: "BJBroadCastCutpaiRetID",
		10010: "BJBroadCastCutpaiID",
		10011: "BJBroadCastFapaiID",
		10012: "BJUserOptID",
		10013: "BJUserOptRetID",
		10014: "BJGameResultWinID",
		10015: "BJUserDiZhuRetID",
		10016: "BJBroadCastUserDiZhuID",
		10017: "BJUserSurrender",
		10018: "BJUserInsurence",
		10019: "BJUserHit",
		10020: "BJUserStand",
		10021: "BJUserSplit",
		10022: "BJUserDouble",
		10023: "BJUserCancel",
		10024: "BJCurrOptID",
		10025: "BJStandBroadCastID",
		10026: "BJUserSplitHit",
		10027: "BJUserSplitStand",
		10028: "BJUserSplitDouble",
		10029: "BJSplitCardBroacast",
		10030: "BJBroadCastYaopaiID",
		10031: "BJBroadCastFanPaiID",
		10032: "BJZhuangJiaYaoPaiID",
		10033: "BJZhuangTuoBaoID",
		10034: "BJUserRecoverBetID",
		10035: "BJUserSpecialBetID",
		10036: "BJGameEndReadyTimeID",
		10037: "BJUserPokerRecoverID",
		10038: "BJUserWinLoseRecoverID",
		10039: "BJUserWatchDataID",
		10040: "BJCheckTimeUpID",
		10041: "BJSysPoolID",
		10042: "BJSysPoolRetID",
		10043: "BJGetAllUserBetID",
		10044: "BJTableInfo",
		10045: "BJUserLeave",
	}
	BJ_GameMessageClassID_value = map[string]int32{
		"BJSettingID":            10001,
		"BJStateID":              10002,
		"BJBetID":                10003,
		"BJBroadCastBetID":       10004,
		"BJGameSceneID":          10005,
		"BJBetInfoID":            10006,
		"BJBetRetID":             10007,
		"BJCutpaiID":             10008,
		"BJBroadCastCutpaiRetID": 10009,
		"BJBroadCastCutpaiID":    10010,
		"BJBroadCastFapaiID":     10011,
		"BJUserOptID":            10012,
		"BJUserOptRetID":         10013,
		"BJGameResultWinID":      10014,
		"BJUserDiZhuRetID":       10015,
		"BJBroadCastUserDiZhuID": 10016,
		"BJUserSurrender":        10017,
		"BJUserInsurence":        10018,
		"BJUserHit":              10019,
		"BJUserStand":            10020,
		"BJUserSplit":            10021,
		"BJUserDouble":           10022,
		"BJUserCancel":           10023,
		"BJCurrOptID":            10024,
		"BJStandBroadCastID":     10025,
		"BJUserSplitHit":         10026,
		"BJUserSplitStand":       10027,
		"BJUserSplitDouble":      10028,
		"BJSplitCardBroacast":    10029,
		"BJBroadCastYaopaiID":    10030,
		"BJBroadCastFanPaiID":    10031,
		"BJZhuangJiaYaoPaiID":    10032,
		"BJZhuangTuoBaoID":       10033,
		"BJUserRecoverBetID":     10034,
		"BJUserSpecialBetID":     10035,
		"BJGameEndReadyTimeID":   10036,
		"BJUserPokerRecoverID":   10037,
		"BJUserWinLoseRecoverID": 10038,
		"BJUserWatchDataID":      10039,
		"BJCheckTimeUpID":        10040,
		"BJSysPoolID":            10041,
		"BJSysPoolRetID":         10042,
		"BJGetAllUserBetID":      10043,
		"BJTableInfo":            10044,
		"BJUserLeave":            10045,
	}
)

func (x BJ_GameMessageClassID) Enum() *BJ_GameMessageClassID {
	p := new(BJ_GameMessageClassID)
	*p = x
	return p
}

func (x BJ_GameMessageClassID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BJ_GameMessageClassID) Descriptor() protoreflect.EnumDescriptor {
	return file_Game_BJ_proto_enumTypes[0].Descriptor()
}

func (BJ_GameMessageClassID) Type() protoreflect.EnumType {
	return &file_Game_BJ_proto_enumTypes[0]
}

func (x BJ_GameMessageClassID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BJ_GameMessageClassID) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BJ_GameMessageClassID(num)
	return nil
}

// Deprecated: Use BJ_GameMessageClassID.Descriptor instead.
func (BJ_GameMessageClassID) EnumDescriptor() ([]byte, []int) {
	return file_Game_BJ_proto_rawDescGZIP(), []int{0}
}

var File_Game_BJ_proto protoreflect.FileDescriptor

var file_Game_BJ_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x47, 0x61, 0x6d, 0x65, 0x5f, 0x42, 0x4a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x08, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2a, 0xf3, 0x07, 0x0a, 0x15, 0x42, 0x4a,
	0x5f, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x0b, 0x42, 0x4a, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x49, 0x44, 0x10, 0x91, 0x4e, 0x12, 0x0e, 0x0a, 0x09, 0x42, 0x4a, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x49, 0x44, 0x10, 0x92, 0x4e, 0x12, 0x0c, 0x0a, 0x07, 0x42, 0x4a, 0x42, 0x65, 0x74, 0x49, 0x44,
	0x10, 0x93, 0x4e, 0x12, 0x15, 0x0a, 0x10, 0x42, 0x4a, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61,
	0x73, 0x74, 0x42, 0x65, 0x74, 0x49, 0x44, 0x10, 0x94, 0x4e, 0x12, 0x12, 0x0a, 0x0d, 0x42, 0x4a,
	0x47, 0x61, 0x6d, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x44, 0x10, 0x95, 0x4e, 0x12, 0x10,
	0x0a, 0x0b, 0x42, 0x4a, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x44, 0x10, 0x96, 0x4e,
	0x12, 0x0f, 0x0a, 0x0a, 0x42, 0x4a, 0x42, 0x65, 0x74, 0x52, 0x65, 0x74, 0x49, 0x44, 0x10, 0x97,
	0x4e, 0x12, 0x0f, 0x0a, 0x0a, 0x42, 0x4a, 0x43, 0x75, 0x74, 0x70, 0x61, 0x69, 0x49, 0x44, 0x10,
	0x98, 0x4e, 0x12, 0x1b, 0x0a, 0x16, 0x42, 0x4a, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73,
	0x74, 0x43, 0x75, 0x74, 0x70, 0x61, 0x69, 0x52, 0x65, 0x74, 0x49, 0x44, 0x10, 0x99, 0x4e, 0x12,
	0x18, 0x0a, 0x13, 0x42, 0x4a, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x43, 0x75,
	0x74, 0x70, 0x61, 0x69, 0x49, 0x44, 0x10, 0x9a, 0x4e, 0x12, 0x17, 0x0a, 0x12, 0x42, 0x4a, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x46, 0x61, 0x70, 0x61, 0x69, 0x49, 0x44, 0x10,
	0x9b, 0x4e, 0x12, 0x10, 0x0a, 0x0b, 0x42, 0x4a, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x49,
	0x44, 0x10, 0x9c, 0x4e, 0x12, 0x13, 0x0a, 0x0e, 0x42, 0x4a, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x70,
	0x74, 0x52, 0x65, 0x74, 0x49, 0x44, 0x10, 0x9d, 0x4e, 0x12, 0x16, 0x0a, 0x11, 0x42, 0x4a, 0x47,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x57, 0x69, 0x6e, 0x49, 0x44, 0x10, 0x9e,
	0x4e, 0x12, 0x15, 0x0a, 0x10, 0x42, 0x4a, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x5a, 0x68, 0x75,
	0x52, 0x65, 0x74, 0x49, 0x44, 0x10, 0x9f, 0x4e, 0x12, 0x1b, 0x0a, 0x16, 0x42, 0x4a, 0x42, 0x72,
	0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x5a, 0x68, 0x75,
	0x49, 0x44, 0x10, 0xa0, 0x4e, 0x12, 0x14, 0x0a, 0x0f, 0x42, 0x4a, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x10, 0xa1, 0x4e, 0x12, 0x14, 0x0a, 0x0f, 0x42,
	0x4a, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x10, 0xa2,
	0x4e, 0x12, 0x0e, 0x0a, 0x09, 0x42, 0x4a, 0x55, 0x73, 0x65, 0x72, 0x48, 0x69, 0x74, 0x10, 0xa3,
	0x4e, 0x12, 0x10, 0x0a, 0x0b, 0x42, 0x4a, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6e, 0x64,
	0x10, 0xa4, 0x4e, 0x12, 0x10, 0x0a, 0x0b, 0x42, 0x4a, 0x55, 0x73, 0x65, 0x72, 0x53, 0x70, 0x6c,
	0x69, 0x74, 0x10, 0xa5, 0x4e, 0x12, 0x11, 0x0a, 0x0c, 0x42, 0x4a, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x10, 0xa6, 0x4e, 0x12, 0x11, 0x0a, 0x0c, 0x42, 0x4a, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x10, 0xa7, 0x4e, 0x12, 0x10, 0x0a, 0x0b, 0x42,
	0x4a, 0x43, 0x75, 0x72, 0x72, 0x4f, 0x70, 0x74, 0x49, 0x44, 0x10, 0xa8, 0x4e, 0x12, 0x17, 0x0a,
	0x12, 0x42, 0x4a, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73,
	0x74, 0x49, 0x44, 0x10, 0xa9, 0x4e, 0x12, 0x13, 0x0a, 0x0e, 0x42, 0x4a, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x70, 0x6c, 0x69, 0x74, 0x48, 0x69, 0x74, 0x10, 0xaa, 0x4e, 0x12, 0x15, 0x0a, 0x10, 0x42,
	0x4a, 0x55, 0x73, 0x65, 0x72, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x10,
	0xab, 0x4e, 0x12, 0x16, 0x0a, 0x11, 0x42, 0x4a, 0x55, 0x73, 0x65, 0x72, 0x53, 0x70, 0x6c, 0x69,
	0x74, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x10, 0xac, 0x4e, 0x12, 0x18, 0x0a, 0x13, 0x42, 0x4a,
	0x53, 0x70, 0x6c, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x42, 0x72, 0x6f, 0x61, 0x63, 0x61, 0x73,
	0x74, 0x10, 0xad, 0x4e, 0x12, 0x18, 0x0a, 0x13, 0x42, 0x4a, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43,
	0x61, 0x73, 0x74, 0x59, 0x61, 0x6f, 0x70, 0x61, 0x69, 0x49, 0x44, 0x10, 0xae, 0x4e, 0x12, 0x18,
	0x0a, 0x13, 0x42, 0x4a, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x46, 0x61, 0x6e,
	0x50, 0x61, 0x69, 0x49, 0x44, 0x10, 0xaf, 0x4e, 0x12, 0x18, 0x0a, 0x13, 0x42, 0x4a, 0x5a, 0x68,
	0x75, 0x61, 0x6e, 0x67, 0x4a, 0x69, 0x61, 0x59, 0x61, 0x6f, 0x50, 0x61, 0x69, 0x49, 0x44, 0x10,
	0xb0, 0x4e, 0x12, 0x15, 0x0a, 0x10, 0x42, 0x4a, 0x5a, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x54, 0x75,
	0x6f, 0x42, 0x61, 0x6f, 0x49, 0x44, 0x10, 0xb1, 0x4e, 0x12, 0x17, 0x0a, 0x12, 0x42, 0x4a, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x42, 0x65, 0x74, 0x49, 0x44, 0x10,
	0xb2, 0x4e, 0x12, 0x17, 0x0a, 0x12, 0x42, 0x4a, 0x55, 0x73, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x42, 0x65, 0x74, 0x49, 0x44, 0x10, 0xb3, 0x4e, 0x12, 0x19, 0x0a, 0x14, 0x42,
	0x4a, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x64, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x49, 0x44, 0x10, 0xb4, 0x4e, 0x12, 0x19, 0x0a, 0x14, 0x42, 0x4a, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x44, 0x10, 0xb5,
	0x4e, 0x12, 0x1b, 0x0a, 0x16, 0x42, 0x4a, 0x55, 0x73, 0x65, 0x72, 0x57, 0x69, 0x6e, 0x4c, 0x6f,
	0x73, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x44, 0x10, 0xb6, 0x4e, 0x12, 0x16,
	0x0a, 0x11, 0x42, 0x4a, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74,
	0x61, 0x49, 0x44, 0x10, 0xb7, 0x4e, 0x12, 0x14, 0x0a, 0x0f, 0x42, 0x4a, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x49, 0x44, 0x10, 0xb8, 0x4e, 0x12, 0x10, 0x0a, 0x0b,
	0x42, 0x4a, 0x53, 0x79, 0x73, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x10, 0xb9, 0x4e, 0x12, 0x13,
	0x0a, 0x0e, 0x42, 0x4a, 0x53, 0x79, 0x73, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x74, 0x49, 0x44,
	0x10, 0xba, 0x4e, 0x12, 0x16, 0x0a, 0x11, 0x42, 0x4a, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x55,
	0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x49, 0x44, 0x10, 0xbb, 0x4e, 0x12, 0x10, 0x0a, 0x0b, 0x42,
	0x4a, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0xbc, 0x4e, 0x12, 0x10, 0x0a,
	0x0b, 0x42, 0x4a, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x10, 0xbd, 0x4e, 0x42,
	0x0c, 0x5a, 0x0a, 0x2e, 0x2f, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
}

var (
	file_Game_BJ_proto_rawDescOnce sync.Once
	file_Game_BJ_proto_rawDescData = file_Game_BJ_proto_rawDesc
)

func file_Game_BJ_proto_rawDescGZIP() []byte {
	file_Game_BJ_proto_rawDescOnce.Do(func() {
		file_Game_BJ_proto_rawDescData = protoimpl.X.CompressGZIP(file_Game_BJ_proto_rawDescData)
	})
	return file_Game_BJ_proto_rawDescData
}

var file_Game_BJ_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_Game_BJ_proto_goTypes = []interface{}{
	(BJ_GameMessageClassID)(0), // 0: netproto.BJ_GameMessageClassID
}
var file_Game_BJ_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_Game_BJ_proto_init() }
func file_Game_BJ_proto_init() {
	if File_Game_BJ_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Game_BJ_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Game_BJ_proto_goTypes,
		DependencyIndexes: file_Game_BJ_proto_depIdxs,
		EnumInfos:         file_Game_BJ_proto_enumTypes,
	}.Build()
	File_Game_BJ_proto = out.File
	file_Game_BJ_proto_rawDesc = nil
	file_Game_BJ_proto_goTypes = nil
	file_Game_BJ_proto_depIdxs = nil
}
