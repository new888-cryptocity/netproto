// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0-devel
// 	protoc        v3.19.1
// source: DBServerMsg.proto

package netproto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type DBServerRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code *int32 `protobuf:"varint,1,req,name=Code" json:"Code,omitempty"`
}

func (x *DBServerRet) Reset() {
	*x = DBServerRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBServerRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBServerRet) ProtoMessage() {}

func (x *DBServerRet) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBServerRet.ProtoReflect.Descriptor instead.
func (*DBServerRet) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{0}
}

func (x *DBServerRet) GetCode() int32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

type HallServerStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerID   *int32  `protobuf:"varint,1,req,name=ServerID" json:"ServerID,omitempty"`
	ClientAddr *string `protobuf:"bytes,2,req,name=ClientAddr" json:"ClientAddr,omitempty"`
	NotifyAddr *string `protobuf:"bytes,3,req,name=NotifyAddr" json:"NotifyAddr,omitempty"`
	HttpAddr   *string `protobuf:"bytes,4,req,name=HttpAddr" json:"HttpAddr,omitempty"`
	LianyunID  *int32  `protobuf:"varint,5,opt,name=LianyunID" json:"LianyunID,omitempty"`
}

func (x *HallServerStart) Reset() {
	*x = HallServerStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HallServerStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HallServerStart) ProtoMessage() {}

func (x *HallServerStart) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HallServerStart.ProtoReflect.Descriptor instead.
func (*HallServerStart) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{1}
}

func (x *HallServerStart) GetServerID() int32 {
	if x != nil && x.ServerID != nil {
		return *x.ServerID
	}
	return 0
}

func (x *HallServerStart) GetClientAddr() string {
	if x != nil && x.ClientAddr != nil {
		return *x.ClientAddr
	}
	return ""
}

func (x *HallServerStart) GetNotifyAddr() string {
	if x != nil && x.NotifyAddr != nil {
		return *x.NotifyAddr
	}
	return ""
}

func (x *HallServerStart) GetHttpAddr() string {
	if x != nil && x.HttpAddr != nil {
		return *x.HttpAddr
	}
	return ""
}

func (x *HallServerStart) GetLianyunID() int32 {
	if x != nil && x.LianyunID != nil {
		return *x.LianyunID
	}
	return 0
}

type HallServerStartRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           *int32  `protobuf:"varint,1,req,name=Code" json:"Code,omitempty"`
	Message        *string `protobuf:"bytes,2,req,name=Message" json:"Message,omitempty"`
	AndroidVersion *string `protobuf:"bytes,3,opt,name=AndroidVersion" json:"AndroidVersion,omitempty"`
	IOSVersion     *string `protobuf:"bytes,4,opt,name=IOSVersion" json:"IOSVersion,omitempty"`
}

func (x *HallServerStartRet) Reset() {
	*x = HallServerStartRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HallServerStartRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HallServerStartRet) ProtoMessage() {}

func (x *HallServerStartRet) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HallServerStartRet.ProtoReflect.Descriptor instead.
func (*HallServerStartRet) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{2}
}

func (x *HallServerStartRet) GetCode() int32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *HallServerStartRet) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *HallServerStartRet) GetAndroidVersion() string {
	if x != nil && x.AndroidVersion != nil {
		return *x.AndroidVersion
	}
	return ""
}

func (x *HallServerStartRet) GetIOSVersion() string {
	if x != nil && x.IOSVersion != nil {
		return *x.IOSVersion
	}
	return ""
}

type GameServerStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerID   *int32  `protobuf:"varint,1,req,name=ServerID" json:"ServerID,omitempty"`
	ServerName *string `protobuf:"bytes,2,req,name=ServerName" json:"ServerName,omitempty"`
	GameID     *int32  `protobuf:"varint,3,req,name=GameID" json:"GameID,omitempty"`
	ShowName   *string `protobuf:"bytes,4,req,name=ShowName" json:"ShowName,omitempty"`
	ClientAddr *string `protobuf:"bytes,5,req,name=ClientAddr" json:"ClientAddr,omitempty"`
	NotifyAddr *string `protobuf:"bytes,6,req,name=NotifyAddr" json:"NotifyAddr,omitempty"`
	LoginMoney *int32  `protobuf:"varint,7,req,name=LoginMoney" json:"LoginMoney,omitempty"`
	HttpAddr   *string `protobuf:"bytes,8,req,name=HttpAddr" json:"HttpAddr,omitempty"`
	LianyunID  *int32  `protobuf:"varint,9,opt,name=LianyunID" json:"LianyunID,omitempty"`
}

func (x *GameServerStart) Reset() {
	*x = GameServerStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameServerStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameServerStart) ProtoMessage() {}

func (x *GameServerStart) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameServerStart.ProtoReflect.Descriptor instead.
func (*GameServerStart) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{3}
}

func (x *GameServerStart) GetServerID() int32 {
	if x != nil && x.ServerID != nil {
		return *x.ServerID
	}
	return 0
}

func (x *GameServerStart) GetServerName() string {
	if x != nil && x.ServerName != nil {
		return *x.ServerName
	}
	return ""
}

func (x *GameServerStart) GetGameID() int32 {
	if x != nil && x.GameID != nil {
		return *x.GameID
	}
	return 0
}

func (x *GameServerStart) GetShowName() string {
	if x != nil && x.ShowName != nil {
		return *x.ShowName
	}
	return ""
}

func (x *GameServerStart) GetClientAddr() string {
	if x != nil && x.ClientAddr != nil {
		return *x.ClientAddr
	}
	return ""
}

func (x *GameServerStart) GetNotifyAddr() string {
	if x != nil && x.NotifyAddr != nil {
		return *x.NotifyAddr
	}
	return ""
}

func (x *GameServerStart) GetLoginMoney() int32 {
	if x != nil && x.LoginMoney != nil {
		return *x.LoginMoney
	}
	return 0
}

func (x *GameServerStart) GetHttpAddr() string {
	if x != nil && x.HttpAddr != nil {
		return *x.HttpAddr
	}
	return ""
}

func (x *GameServerStart) GetLianyunID() int32 {
	if x != nil && x.LianyunID != nil {
		return *x.LianyunID
	}
	return 0
}

type GameServerStartRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           *int32  `protobuf:"varint,1,req,name=Code" json:"Code,omitempty"`
	Message        *string `protobuf:"bytes,2,req,name=Message" json:"Message,omitempty"`
	AndroidVersion *string `protobuf:"bytes,3,opt,name=AndroidVersion" json:"AndroidVersion,omitempty"`
	IOSVersion     *string `protobuf:"bytes,4,opt,name=IOSVersion" json:"IOSVersion,omitempty"`
	Status         *int32  `protobuf:"varint,5,opt,name=Status" json:"Status,omitempty"`
	StatusMessage  *string `protobuf:"bytes,6,opt,name=StatusMessage" json:"StatusMessage,omitempty"`
}

func (x *GameServerStartRet) Reset() {
	*x = GameServerStartRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameServerStartRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameServerStartRet) ProtoMessage() {}

func (x *GameServerStartRet) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameServerStartRet.ProtoReflect.Descriptor instead.
func (*GameServerStartRet) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{4}
}

func (x *GameServerStartRet) GetCode() int32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *GameServerStartRet) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *GameServerStartRet) GetAndroidVersion() string {
	if x != nil && x.AndroidVersion != nil {
		return *x.AndroidVersion
	}
	return ""
}

func (x *GameServerStartRet) GetIOSVersion() string {
	if x != nil && x.IOSVersion != nil {
		return *x.IOSVersion
	}
	return ""
}

func (x *GameServerStartRet) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *GameServerStartRet) GetStatusMessage() string {
	if x != nil && x.StatusMessage != nil {
		return *x.StatusMessage
	}
	return ""
}

//H5Game登入開始 ( hallServer:H5GameLogin => dbServer:H5GameLoginStart )
type H5GameLoginStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HDCode               *string `protobuf:"bytes,1,req,name=HDCode" json:"HDCode,omitempty"`                               //設備碼
	HDType               *int32  `protobuf:"varint,2,req,name=HDType" json:"HDType,omitempty"`                              //設備類型
	SiteID               *int32  `protobuf:"varint,3,req,name=SiteID" json:"SiteID,omitempty"`                              //通路ID
	Version              *string `protobuf:"bytes,4,req,name=Version" json:"Version,omitempty"`                             //客戶端版本號
	PlatformID           *int32  `protobuf:"varint,5,req,name=PlatformID" json:"PlatformID,omitempty"`                      //平臺號
	ServerID             *int32  `protobuf:"varint,6,opt,name=ServerID" json:"ServerID,omitempty"`                          //服務器ID
	BunldID              *string `protobuf:"bytes,7,opt,name=BunldID" json:"BunldID,omitempty"`                             //BunldID
	Ver                  *string `protobuf:"bytes,8,opt,name=Ver" json:"Ver,omitempty"`                                     //版本號
	Language             *string `protobuf:"bytes,9,opt,name=Language" json:"Language,omitempty"`                           //zh_CN/en_US/zh_TW
	CountryCode          *int32  `protobuf:"varint,10,opt,name=CountryCode" json:"CountryCode,omitempty"`                   //國際代碼
	Token                *string `protobuf:"bytes,11,req,name=Token" json:"Token,omitempty"`                                //上層網頁平臺產生的Token
	ThirdPartyUserID     *int64  `protobuf:"varint,12,req,name=ThirdPartyUserID" json:"ThirdPartyUserID,omitempty"`         //上層網頁平臺的會員ID (int64)
	ThirdPartyUserIDStr  *string `protobuf:"bytes,13,req,name=ThirdPartyUserIDStr" json:"ThirdPartyUserIDStr,omitempty"`    //上層網頁平臺的會員ID (string)
	ThirdPartyCurrency   *string `protobuf:"bytes,14,req,name=ThirdPartyCurrency" json:"ThirdPartyCurrency,omitempty"`      //上層網頁平臺的會員幣值
	ThirdPartyUserAmount *int64  `protobuf:"varint,15,req,name=ThirdPartyUserAmount" json:"ThirdPartyUserAmount,omitempty"` //上層網頁平臺的會員錢幣數量 (int64)
	BrowserType          *int32  `protobuf:"varint,16,opt,name=BrowserType" json:"BrowserType,omitempty"`                   //瀏覽器種類 0:unkonw 1:chrome 2:其他
	BrowserVer           *string `protobuf:"bytes,17,opt,name=BrowserVer" json:"BrowserVer,omitempty"`                      //瀏覽器版本號
}

func (x *H5GameLoginStart) Reset() {
	*x = H5GameLoginStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *H5GameLoginStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*H5GameLoginStart) ProtoMessage() {}

func (x *H5GameLoginStart) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use H5GameLoginStart.ProtoReflect.Descriptor instead.
func (*H5GameLoginStart) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{5}
}

func (x *H5GameLoginStart) GetHDCode() string {
	if x != nil && x.HDCode != nil {
		return *x.HDCode
	}
	return ""
}

func (x *H5GameLoginStart) GetHDType() int32 {
	if x != nil && x.HDType != nil {
		return *x.HDType
	}
	return 0
}

func (x *H5GameLoginStart) GetSiteID() int32 {
	if x != nil && x.SiteID != nil {
		return *x.SiteID
	}
	return 0
}

func (x *H5GameLoginStart) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *H5GameLoginStart) GetPlatformID() int32 {
	if x != nil && x.PlatformID != nil {
		return *x.PlatformID
	}
	return 0
}

func (x *H5GameLoginStart) GetServerID() int32 {
	if x != nil && x.ServerID != nil {
		return *x.ServerID
	}
	return 0
}

func (x *H5GameLoginStart) GetBunldID() string {
	if x != nil && x.BunldID != nil {
		return *x.BunldID
	}
	return ""
}

func (x *H5GameLoginStart) GetVer() string {
	if x != nil && x.Ver != nil {
		return *x.Ver
	}
	return ""
}

func (x *H5GameLoginStart) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *H5GameLoginStart) GetCountryCode() int32 {
	if x != nil && x.CountryCode != nil {
		return *x.CountryCode
	}
	return 0
}

func (x *H5GameLoginStart) GetToken() string {
	if x != nil && x.Token != nil {
		return *x.Token
	}
	return ""
}

func (x *H5GameLoginStart) GetThirdPartyUserID() int64 {
	if x != nil && x.ThirdPartyUserID != nil {
		return *x.ThirdPartyUserID
	}
	return 0
}

func (x *H5GameLoginStart) GetThirdPartyUserIDStr() string {
	if x != nil && x.ThirdPartyUserIDStr != nil {
		return *x.ThirdPartyUserIDStr
	}
	return ""
}

func (x *H5GameLoginStart) GetThirdPartyCurrency() string {
	if x != nil && x.ThirdPartyCurrency != nil {
		return *x.ThirdPartyCurrency
	}
	return ""
}

func (x *H5GameLoginStart) GetThirdPartyUserAmount() int64 {
	if x != nil && x.ThirdPartyUserAmount != nil {
		return *x.ThirdPartyUserAmount
	}
	return 0
}

func (x *H5GameLoginStart) GetBrowserType() int32 {
	if x != nil && x.BrowserType != nil {
		return *x.BrowserType
	}
	return 0
}

func (x *H5GameLoginStart) GetBrowserVer() string {
	if x != nil && x.BrowserVer != nil {
		return *x.BrowserVer
	}
	return ""
}

type LogoutGameRoomInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID          *int32  `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`
	UpdateAmount    *int64  `protobuf:"varint,2,req,name=UpdateAmount" json:"UpdateAmount,omitempty"`
	TaxAmount       *int64  `protobuf:"varint,3,req,name=TaxAmount" json:"TaxAmount,omitempty"`
	WinCount        *int32  `protobuf:"varint,4,req,name=WinCount" json:"WinCount,omitempty"`
	LoseCount       *int32  `protobuf:"varint,5,req,name=LoseCount" json:"LoseCount,omitempty"`
	DrawCount       *int32  `protobuf:"varint,6,req,name=DrawCount" json:"DrawCount,omitempty"`
	LoginTime       *string `protobuf:"bytes,7,req,name=LoginTime" json:"LoginTime,omitempty"`
	LogoutTime      *string `protobuf:"bytes,8,req,name=LogoutTime" json:"LogoutTime,omitempty"`
	IPAddress       *string `protobuf:"bytes,9,req,name=IPAddress" json:"IPAddress,omitempty"`
	HDCode          *string `protobuf:"bytes,10,req,name=HDCode" json:"HDCode,omitempty"`
	HDType          *int32  `protobuf:"varint,11,req,name=HDType" json:"HDType,omitempty"`
	GameTime        *int32  `protobuf:"varint,12,req,name=GameTime" json:"GameTime,omitempty"`
	GameID          *int32  `protobuf:"varint,13,req,name=GameID" json:"GameID,omitempty"`
	ServerID        *int32  `protobuf:"varint,14,req,name=ServerID" json:"ServerID,omitempty"`
	LoginMoney      *int64  `protobuf:"varint,15,req,name=LoginMoney" json:"LoginMoney,omitempty"`
	ScoreUpdateMode *int32  `protobuf:"varint,16,req,name=ScoreUpdateMode" json:"ScoreUpdateMode,omitempty"`
}

func (x *LogoutGameRoomInfo) Reset() {
	*x = LogoutGameRoomInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogoutGameRoomInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoutGameRoomInfo) ProtoMessage() {}

func (x *LogoutGameRoomInfo) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoutGameRoomInfo.ProtoReflect.Descriptor instead.
func (*LogoutGameRoomInfo) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{6}
}

func (x *LogoutGameRoomInfo) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *LogoutGameRoomInfo) GetUpdateAmount() int64 {
	if x != nil && x.UpdateAmount != nil {
		return *x.UpdateAmount
	}
	return 0
}

func (x *LogoutGameRoomInfo) GetTaxAmount() int64 {
	if x != nil && x.TaxAmount != nil {
		return *x.TaxAmount
	}
	return 0
}

func (x *LogoutGameRoomInfo) GetWinCount() int32 {
	if x != nil && x.WinCount != nil {
		return *x.WinCount
	}
	return 0
}

func (x *LogoutGameRoomInfo) GetLoseCount() int32 {
	if x != nil && x.LoseCount != nil {
		return *x.LoseCount
	}
	return 0
}

func (x *LogoutGameRoomInfo) GetDrawCount() int32 {
	if x != nil && x.DrawCount != nil {
		return *x.DrawCount
	}
	return 0
}

func (x *LogoutGameRoomInfo) GetLoginTime() string {
	if x != nil && x.LoginTime != nil {
		return *x.LoginTime
	}
	return ""
}

func (x *LogoutGameRoomInfo) GetLogoutTime() string {
	if x != nil && x.LogoutTime != nil {
		return *x.LogoutTime
	}
	return ""
}

func (x *LogoutGameRoomInfo) GetIPAddress() string {
	if x != nil && x.IPAddress != nil {
		return *x.IPAddress
	}
	return ""
}

func (x *LogoutGameRoomInfo) GetHDCode() string {
	if x != nil && x.HDCode != nil {
		return *x.HDCode
	}
	return ""
}

func (x *LogoutGameRoomInfo) GetHDType() int32 {
	if x != nil && x.HDType != nil {
		return *x.HDType
	}
	return 0
}

func (x *LogoutGameRoomInfo) GetGameTime() int32 {
	if x != nil && x.GameTime != nil {
		return *x.GameTime
	}
	return 0
}

func (x *LogoutGameRoomInfo) GetGameID() int32 {
	if x != nil && x.GameID != nil {
		return *x.GameID
	}
	return 0
}

func (x *LogoutGameRoomInfo) GetServerID() int32 {
	if x != nil && x.ServerID != nil {
		return *x.ServerID
	}
	return 0
}

func (x *LogoutGameRoomInfo) GetLoginMoney() int64 {
	if x != nil && x.LoginMoney != nil {
		return *x.LoginMoney
	}
	return 0
}

func (x *LogoutGameRoomInfo) GetScoreUpdateMode() int32 {
	if x != nil && x.ScoreUpdateMode != nil {
		return *x.ScoreUpdateMode
	}
	return 0
}

type UpdateUserScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID    *int32 `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`
	Score     *int64 `protobuf:"varint,2,req,name=Score" json:"Score,omitempty"`
	ServerID  *int32 `protobuf:"varint,3,req,name=ServerID" json:"ServerID,omitempty"`
	TaxAmount *int64 `protobuf:"varint,4,req,name=TaxAmount" json:"TaxAmount,omitempty"`
	Flag      *int32 `protobuf:"varint,5,opt,name=Flag" json:"Flag,omitempty"`
	Param     *int32 `protobuf:"varint,6,opt,name=Param" json:"Param,omitempty"`
}

func (x *UpdateUserScore) Reset() {
	*x = UpdateUserScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserScore) ProtoMessage() {}

func (x *UpdateUserScore) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserScore.ProtoReflect.Descriptor instead.
func (*UpdateUserScore) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateUserScore) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *UpdateUserScore) GetScore() int64 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *UpdateUserScore) GetServerID() int32 {
	if x != nil && x.ServerID != nil {
		return *x.ServerID
	}
	return 0
}

func (x *UpdateUserScore) GetTaxAmount() int64 {
	if x != nil && x.TaxAmount != nil {
		return *x.TaxAmount
	}
	return 0
}

func (x *UpdateUserScore) GetFlag() int32 {
	if x != nil && x.Flag != nil {
		return *x.Flag
	}
	return 0
}

func (x *UpdateUserScore) GetParam() int32 {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return 0
}

type BlockIP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IPAddress *string `protobuf:"bytes,1,req,name=IPAddress" json:"IPAddress,omitempty"`
	Sec       *int32  `protobuf:"varint,2,req,name=Sec" json:"Sec,omitempty"`
	Memo      *string `protobuf:"bytes,3,req,name=Memo" json:"Memo,omitempty"`
}

func (x *BlockIP) Reset() {
	*x = BlockIP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockIP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockIP) ProtoMessage() {}

func (x *BlockIP) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockIP.ProtoReflect.Descriptor instead.
func (*BlockIP) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{8}
}

func (x *BlockIP) GetIPAddress() string {
	if x != nil && x.IPAddress != nil {
		return *x.IPAddress
	}
	return ""
}

func (x *BlockIP) GetSec() int32 {
	if x != nil && x.Sec != nil {
		return *x.Sec
	}
	return 0
}

func (x *BlockIP) GetMemo() string {
	if x != nil && x.Memo != nil {
		return *x.Memo
	}
	return ""
}

type BlockIPList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IPAddress []string `protobuf:"bytes,1,rep,name=IPAddress" json:"IPAddress,omitempty"`
}

func (x *BlockIPList) Reset() {
	*x = BlockIPList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockIPList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockIPList) ProtoMessage() {}

func (x *BlockIPList) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockIPList.ProtoReflect.Descriptor instead.
func (*BlockIPList) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{9}
}

func (x *BlockIPList) GetIPAddress() []string {
	if x != nil {
		return x.IPAddress
	}
	return nil
}

type DealLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerID      *int32  `protobuf:"varint,1,req,name=ServerID" json:"ServerID,omitempty"`
	UserGameRet   *string `protobuf:"bytes,2,req,name=UserGameRet" json:"UserGameRet,omitempty"`
	GameBeginTime *string `protobuf:"bytes,3,req,name=GameBeginTime" json:"GameBeginTime,omitempty"`
	GameEndTime   *string `protobuf:"bytes,4,req,name=GameEndTime" json:"GameEndTime,omitempty"`
	GameData      *string `protobuf:"bytes,5,req,name=GameData" json:"GameData,omitempty"`
	TaxAmount     *int64  `protobuf:"varint,6,req,name=TaxAmount" json:"TaxAmount,omitempty"`
	LianyunID     *int32  `protobuf:"varint,7,opt,name=LianyunID" json:"LianyunID,omitempty"`
	TableNo       *int32  `protobuf:"varint,8,req,name=TableNo" json:"TableNo,omitempty"`
}

func (x *DealLog) Reset() {
	*x = DealLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DealLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DealLog) ProtoMessage() {}

func (x *DealLog) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DealLog.ProtoReflect.Descriptor instead.
func (*DealLog) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{10}
}

func (x *DealLog) GetServerID() int32 {
	if x != nil && x.ServerID != nil {
		return *x.ServerID
	}
	return 0
}

func (x *DealLog) GetUserGameRet() string {
	if x != nil && x.UserGameRet != nil {
		return *x.UserGameRet
	}
	return ""
}

func (x *DealLog) GetGameBeginTime() string {
	if x != nil && x.GameBeginTime != nil {
		return *x.GameBeginTime
	}
	return ""
}

func (x *DealLog) GetGameEndTime() string {
	if x != nil && x.GameEndTime != nil {
		return *x.GameEndTime
	}
	return ""
}

func (x *DealLog) GetGameData() string {
	if x != nil && x.GameData != nil {
		return *x.GameData
	}
	return ""
}

func (x *DealLog) GetTaxAmount() int64 {
	if x != nil && x.TaxAmount != nil {
		return *x.TaxAmount
	}
	return 0
}

func (x *DealLog) GetLianyunID() int32 {
	if x != nil && x.LianyunID != nil {
		return *x.LianyunID
	}
	return 0
}

func (x *DealLog) GetTableNo() int32 {
	if x != nil && x.TableNo != nil {
		return *x.TableNo
	}
	return 0
}

type LogonRobot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerID          *int32 `protobuf:"varint,1,req,name=ServerID" json:"ServerID,omitempty"`
	CurrentRobotCount *int32 `protobuf:"varint,2,req,name=CurrentRobotCount" json:"CurrentRobotCount,omitempty"`
	MinMoneyAmount    *int64 `protobuf:"varint,3,req,name=MinMoneyAmount" json:"MinMoneyAmount,omitempty"`
	MaxMoneyAmount    *int64 `protobuf:"varint,4,req,name=MaxMoneyAmount" json:"MaxMoneyAmount,omitempty"`
	LianyunID         *int32 `protobuf:"varint,5,opt,name=LianyunID" json:"LianyunID,omitempty"`
}

func (x *LogonRobot) Reset() {
	*x = LogonRobot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogonRobot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogonRobot) ProtoMessage() {}

func (x *LogonRobot) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogonRobot.ProtoReflect.Descriptor instead.
func (*LogonRobot) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{11}
}

func (x *LogonRobot) GetServerID() int32 {
	if x != nil && x.ServerID != nil {
		return *x.ServerID
	}
	return 0
}

func (x *LogonRobot) GetCurrentRobotCount() int32 {
	if x != nil && x.CurrentRobotCount != nil {
		return *x.CurrentRobotCount
	}
	return 0
}

func (x *LogonRobot) GetMinMoneyAmount() int64 {
	if x != nil && x.MinMoneyAmount != nil {
		return *x.MinMoneyAmount
	}
	return 0
}

func (x *LogonRobot) GetMaxMoneyAmount() int64 {
	if x != nil && x.MaxMoneyAmount != nil {
		return *x.MaxMoneyAmount
	}
	return 0
}

func (x *LogonRobot) GetLianyunID() int32 {
	if x != nil && x.LianyunID != nil {
		return *x.LianyunID
	}
	return 0
}

type RobotData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID       *int32  `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`
	UserType     *int32  `protobuf:"varint,2,req,name=UserType" json:"UserType,omitempty"`
	NickName     *string `protobuf:"bytes,3,req,name=NickName" json:"NickName,omitempty"`
	FaceID       *int32  `protobuf:"varint,4,req,name=FaceID" json:"FaceID,omitempty"`
	Sex          *int32  `protobuf:"varint,5,req,name=Sex" json:"Sex,omitempty"`
	CashAmount   *int64  `protobuf:"varint,6,req,name=CashAmount" json:"CashAmount,omitempty"`
	WinCount     *int32  `protobuf:"varint,7,req,name=WinCount" json:"WinCount,omitempty"`
	LoseCount    *int32  `protobuf:"varint,8,req,name=LoseCount" json:"LoseCount,omitempty"`
	DrawCount    *int32  `protobuf:"varint,9,req,name=DrawCount" json:"DrawCount,omitempty"`
	RobotLevelID *int32  `protobuf:"varint,10,req,name=RobotLevelID" json:"RobotLevelID,omitempty"`
	TotalScore   *int64  `protobuf:"varint,11,opt,name=TotalScore" json:"TotalScore,omitempty"`
}

func (x *RobotData) Reset() {
	*x = RobotData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RobotData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RobotData) ProtoMessage() {}

func (x *RobotData) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RobotData.ProtoReflect.Descriptor instead.
func (*RobotData) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{12}
}

func (x *RobotData) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *RobotData) GetUserType() int32 {
	if x != nil && x.UserType != nil {
		return *x.UserType
	}
	return 0
}

func (x *RobotData) GetNickName() string {
	if x != nil && x.NickName != nil {
		return *x.NickName
	}
	return ""
}

func (x *RobotData) GetFaceID() int32 {
	if x != nil && x.FaceID != nil {
		return *x.FaceID
	}
	return 0
}

func (x *RobotData) GetSex() int32 {
	if x != nil && x.Sex != nil {
		return *x.Sex
	}
	return 0
}

func (x *RobotData) GetCashAmount() int64 {
	if x != nil && x.CashAmount != nil {
		return *x.CashAmount
	}
	return 0
}

func (x *RobotData) GetWinCount() int32 {
	if x != nil && x.WinCount != nil {
		return *x.WinCount
	}
	return 0
}

func (x *RobotData) GetLoseCount() int32 {
	if x != nil && x.LoseCount != nil {
		return *x.LoseCount
	}
	return 0
}

func (x *RobotData) GetDrawCount() int32 {
	if x != nil && x.DrawCount != nil {
		return *x.DrawCount
	}
	return 0
}

func (x *RobotData) GetRobotLevelID() int32 {
	if x != nil && x.RobotLevelID != nil {
		return *x.RobotLevelID
	}
	return 0
}

func (x *RobotData) GetTotalScore() int64 {
	if x != nil && x.TotalScore != nil {
		return *x.TotalScore
	}
	return 0
}

type LogonRobotRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RobotCount *int32       `protobuf:"varint,1,req,name=RobotCount" json:"RobotCount,omitempty"`
	UserData   []*RobotData `protobuf:"bytes,2,rep,name=UserData" json:"UserData,omitempty"`
}

func (x *LogonRobotRet) Reset() {
	*x = LogonRobotRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogonRobotRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogonRobotRet) ProtoMessage() {}

func (x *LogonRobotRet) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogonRobotRet.ProtoReflect.Descriptor instead.
func (*LogonRobotRet) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{13}
}

func (x *LogonRobotRet) GetRobotCount() int32 {
	if x != nil && x.RobotCount != nil {
		return *x.RobotCount
	}
	return 0
}

func (x *LogonRobotRet) GetUserData() []*RobotData {
	if x != nil {
		return x.UserData
	}
	return nil
}

type LogoutRobot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerID    *int32 `protobuf:"varint,1,req,name=ServerID" json:"ServerID,omitempty"`
	RobotUserID *int32 `protobuf:"varint,2,req,name=RobotUserID" json:"RobotUserID,omitempty"`
}

func (x *LogoutRobot) Reset() {
	*x = LogoutRobot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogoutRobot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoutRobot) ProtoMessage() {}

func (x *LogoutRobot) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoutRobot.ProtoReflect.Descriptor instead.
func (*LogoutRobot) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{14}
}

func (x *LogoutRobot) GetServerID() int32 {
	if x != nil && x.ServerID != nil {
		return *x.ServerID
	}
	return 0
}

func (x *LogoutRobot) GetRobotUserID() int32 {
	if x != nil && x.RobotUserID != nil {
		return *x.RobotUserID
	}
	return 0
}

type HallServerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerID  *int32  `protobuf:"varint,1,req,name=ServerID" json:"ServerID,omitempty"`
	Addr      *string `protobuf:"bytes,2,req,name=Addr" json:"Addr,omitempty"`
	Status    *int32  `protobuf:"varint,3,opt,name=Status" json:"Status,omitempty"`
	PlayerCnt *int32  `protobuf:"varint,4,opt,name=PlayerCnt" json:"PlayerCnt,omitempty"`
	LianyunID *int32  `protobuf:"varint,5,opt,name=LianyunID" json:"LianyunID,omitempty"`
}

func (x *HallServerInfo) Reset() {
	*x = HallServerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HallServerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HallServerInfo) ProtoMessage() {}

func (x *HallServerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HallServerInfo.ProtoReflect.Descriptor instead.
func (*HallServerInfo) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{15}
}

func (x *HallServerInfo) GetServerID() int32 {
	if x != nil && x.ServerID != nil {
		return *x.ServerID
	}
	return 0
}

func (x *HallServerInfo) GetAddr() string {
	if x != nil && x.Addr != nil {
		return *x.Addr
	}
	return ""
}

func (x *HallServerInfo) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *HallServerInfo) GetPlayerCnt() int32 {
	if x != nil && x.PlayerCnt != nil {
		return *x.PlayerCnt
	}
	return 0
}

func (x *HallServerInfo) GetLianyunID() int32 {
	if x != nil && x.LianyunID != nil {
		return *x.LianyunID
	}
	return 0
}

type UpdateVideoGameInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID  *int32 `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`   //玩家ID
	VGameID *int32 `protobuf:"varint,2,req,name=VGameID" json:"VGameID,omitempty"` //視訊類遊戲ID
	CashNum *int32 `protobuf:"varint,3,req,name=CashNum" json:"CashNum,omitempty"` //上下分（正負）
	InOrOut *int32 `protobuf:"varint,4,req,name=InOrOut" json:"InOrOut,omitempty"` //進出遊戲:0-進遊戲 1-出遊戲
}

func (x *UpdateVideoGameInfo) Reset() {
	*x = UpdateVideoGameInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVideoGameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVideoGameInfo) ProtoMessage() {}

func (x *UpdateVideoGameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVideoGameInfo.ProtoReflect.Descriptor instead.
func (*UpdateVideoGameInfo) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateVideoGameInfo) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *UpdateVideoGameInfo) GetVGameID() int32 {
	if x != nil && x.VGameID != nil {
		return *x.VGameID
	}
	return 0
}

func (x *UpdateVideoGameInfo) GetCashNum() int32 {
	if x != nil && x.CashNum != nil {
		return *x.CashNum
	}
	return 0
}

func (x *UpdateVideoGameInfo) GetInOrOut() int32 {
	if x != nil && x.InOrOut != nil {
		return *x.InOrOut
	}
	return 0
}

type UpdateVideoGameInfoRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code *int32               `protobuf:"varint,1,req,name=Code" json:"Code,omitempty"` //操作是否成功
	Uvgi *UpdateVideoGameInfo `protobuf:"bytes,2,opt,name=uvgi" json:"uvgi,omitempty"`  //成功後才有值
}

func (x *UpdateVideoGameInfoRet) Reset() {
	*x = UpdateVideoGameInfoRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVideoGameInfoRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVideoGameInfoRet) ProtoMessage() {}

func (x *UpdateVideoGameInfoRet) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVideoGameInfoRet.ProtoReflect.Descriptor instead.
func (*UpdateVideoGameInfoRet) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateVideoGameInfoRet) GetCode() int32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *UpdateVideoGameInfoRet) GetUvgi() *UpdateVideoGameInfo {
	if x != nil {
		return x.Uvgi
	}
	return nil
}

//遊戲日誌結構體
type GameLogDeal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID    *int32  `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`      //玩家ID
	GameID    *int32  `protobuf:"varint,2,req,name=GameID" json:"GameID,omitempty"`      //遊戲ID
	GroupID   *int32  `protobuf:"varint,3,req,name=GroupID" json:"GroupID,omitempty"`    //聯運ID
	BeginTime *string `protobuf:"bytes,4,req,name=BeginTime" json:"BeginTime,omitempty"` //記錄開始時間
	EndTime   *string `protobuf:"bytes,5,req,name=EndTime" json:"EndTime,omitempty"`     //記錄結束時間
	LogPk     *string `protobuf:"bytes,6,req,name=LogPk" json:"LogPk,omitempty"`         //日誌記錄唯一ID
	GameData  *string `protobuf:"bytes,7,req,name=GameData" json:"GameData,omitempty"`   //詳情
}

func (x *GameLogDeal) Reset() {
	*x = GameLogDeal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameLogDeal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameLogDeal) ProtoMessage() {}

func (x *GameLogDeal) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameLogDeal.ProtoReflect.Descriptor instead.
func (*GameLogDeal) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{18}
}

func (x *GameLogDeal) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *GameLogDeal) GetGameID() int32 {
	if x != nil && x.GameID != nil {
		return *x.GameID
	}
	return 0
}

func (x *GameLogDeal) GetGroupID() int32 {
	if x != nil && x.GroupID != nil {
		return *x.GroupID
	}
	return 0
}

func (x *GameLogDeal) GetBeginTime() string {
	if x != nil && x.BeginTime != nil {
		return *x.BeginTime
	}
	return ""
}

func (x *GameLogDeal) GetEndTime() string {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return ""
}

func (x *GameLogDeal) GetLogPk() string {
	if x != nil && x.LogPk != nil {
		return *x.LogPk
	}
	return ""
}

func (x *GameLogDeal) GetGameData() string {
	if x != nil && x.GameData != nil {
		return *x.GameData
	}
	return ""
}

//請求查詢玩家的餘額信息
type ReqUserScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessKey *string `protobuf:"bytes,1,req,name=BusinessKey" json:"BusinessKey,omitempty"` //商戶ID
	UserID      *int32  `protobuf:"varint,2,req,name=UserID" json:"UserID,omitempty"`          //玩家UID
}

func (x *ReqUserScore) Reset() {
	*x = ReqUserScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUserScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUserScore) ProtoMessage() {}

func (x *ReqUserScore) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUserScore.ProtoReflect.Descriptor instead.
func (*ReqUserScore) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{19}
}

func (x *ReqUserScore) GetBusinessKey() string {
	if x != nil && x.BusinessKey != nil {
		return *x.BusinessKey
	}
	return ""
}

func (x *ReqUserScore) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

//查詢玩家賬戶餘額的返回
type ResUserScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID  *int32  `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`   //玩家UID
	Score   *int64  `protobuf:"varint,2,opt,name=Score" json:"Score,omitempty"`     //玩家金幣餘額
	ErrMsg  *string `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`    //錯誤信息
	ErrCode *int32  `protobuf:"varint,4,opt,name=errCode" json:"errCode,omitempty"` //錯誤碼
}

func (x *ResUserScore) Reset() {
	*x = ResUserScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResUserScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResUserScore) ProtoMessage() {}

func (x *ResUserScore) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResUserScore.ProtoReflect.Descriptor instead.
func (*ResUserScore) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{20}
}

func (x *ResUserScore) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *ResUserScore) GetScore() int64 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *ResUserScore) GetErrMsg() string {
	if x != nil && x.ErrMsg != nil {
		return *x.ErrMsg
	}
	return ""
}

func (x *ResUserScore) GetErrCode() int32 {
	if x != nil && x.ErrCode != nil {
		return *x.ErrCode
	}
	return 0
}

//CP請求提取/充值玩家的金幣餘額
type CpGameUserTransferScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessKey  *string `protobuf:"bytes,1,req,name=BusinessKey" json:"BusinessKey,omitempty"`    //商戶ID
	UserID       *int32  `protobuf:"varint,2,req,name=UserID" json:"UserID,omitempty"`             //頑疾UID
	OrderID      *string `protobuf:"bytes,3,req,name=OrderID" json:"OrderID,omitempty"`            //訂單ID
	TransferType *int32  `protobuf:"varint,4,req,name=TransferType" json:"TransferType,omitempty"` //存取款類型
	Amount       *int64  `protobuf:"varint,5,req,name=Amount" json:"Amount,omitempty"`             //存取款的金額
	ServerID     *int32  `protobuf:"varint,6,req,name=ServerID" json:"ServerID,omitempty"`         //遊戲服務器ID
	CreateTime   *string `protobuf:"bytes,7,req,name=createTime" json:"createTime,omitempty"`      //訂單請求時間
}

func (x *CpGameUserTransferScore) Reset() {
	*x = CpGameUserTransferScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CpGameUserTransferScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CpGameUserTransferScore) ProtoMessage() {}

func (x *CpGameUserTransferScore) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CpGameUserTransferScore.ProtoReflect.Descriptor instead.
func (*CpGameUserTransferScore) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{21}
}

func (x *CpGameUserTransferScore) GetBusinessKey() string {
	if x != nil && x.BusinessKey != nil {
		return *x.BusinessKey
	}
	return ""
}

func (x *CpGameUserTransferScore) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *CpGameUserTransferScore) GetOrderID() string {
	if x != nil && x.OrderID != nil {
		return *x.OrderID
	}
	return ""
}

func (x *CpGameUserTransferScore) GetTransferType() int32 {
	if x != nil && x.TransferType != nil {
		return *x.TransferType
	}
	return 0
}

func (x *CpGameUserTransferScore) GetAmount() int64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *CpGameUserTransferScore) GetServerID() int32 {
	if x != nil && x.ServerID != nil {
		return *x.ServerID
	}
	return 0
}

func (x *CpGameUserTransferScore) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

//CP請求提取/充值玩家的金幣返回結果
type CpGameUserTransferRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessKey  *string `protobuf:"bytes,1,req,name=BusinessKey" json:"BusinessKey,omitempty"`    //商戶ID
	UserID       *int32  `protobuf:"varint,2,req,name=UserID" json:"UserID,omitempty"`             //頑疾UID
	OrderID      *string `protobuf:"bytes,3,req,name=OrderID" json:"OrderID,omitempty"`            //訂單ID
	TransferType *int32  `protobuf:"varint,4,req,name=TransferType" json:"TransferType,omitempty"` //存取款類型
	Score        *int64  `protobuf:"varint,5,opt,name=Score" json:"Score,omitempty"`               //玩家剩餘金幣值
	ErrMsg       *string `protobuf:"bytes,6,opt,name=errMsg" json:"errMsg,omitempty"`              //錯誤信息
	ErrCode      *int32  `protobuf:"varint,7,opt,name=errCode" json:"errCode,omitempty"`           //錯誤碼
	UpdateAmount *int64  `protobuf:"varint,8,opt,name=UpdateAmount" json:"UpdateAmount,omitempty"` //變更的貨幣
}

func (x *CpGameUserTransferRes) Reset() {
	*x = CpGameUserTransferRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CpGameUserTransferRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CpGameUserTransferRes) ProtoMessage() {}

func (x *CpGameUserTransferRes) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CpGameUserTransferRes.ProtoReflect.Descriptor instead.
func (*CpGameUserTransferRes) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{22}
}

func (x *CpGameUserTransferRes) GetBusinessKey() string {
	if x != nil && x.BusinessKey != nil {
		return *x.BusinessKey
	}
	return ""
}

func (x *CpGameUserTransferRes) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *CpGameUserTransferRes) GetOrderID() string {
	if x != nil && x.OrderID != nil {
		return *x.OrderID
	}
	return ""
}

func (x *CpGameUserTransferRes) GetTransferType() int32 {
	if x != nil && x.TransferType != nil {
		return *x.TransferType
	}
	return 0
}

func (x *CpGameUserTransferRes) GetScore() int64 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *CpGameUserTransferRes) GetErrMsg() string {
	if x != nil && x.ErrMsg != nil {
		return *x.ErrMsg
	}
	return ""
}

func (x *CpGameUserTransferRes) GetErrCode() int32 {
	if x != nil && x.ErrCode != nil {
		return *x.ErrCode
	}
	return 0
}

func (x *CpGameUserTransferRes) GetUpdateAmount() int64 {
	if x != nil && x.UpdateAmount != nil {
		return *x.UpdateAmount
	}
	return 0
}

//cp查詢訂單狀態
type CpCheckOderState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessKey *string `protobuf:"bytes,1,req,name=BusinessKey" json:"BusinessKey,omitempty"` //商戶ID
	OrderID     *string `protobuf:"bytes,2,req,name=OrderID" json:"OrderID,omitempty"`         //訂單ID
}

func (x *CpCheckOderState) Reset() {
	*x = CpCheckOderState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CpCheckOderState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CpCheckOderState) ProtoMessage() {}

func (x *CpCheckOderState) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CpCheckOderState.ProtoReflect.Descriptor instead.
func (*CpCheckOderState) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{23}
}

func (x *CpCheckOderState) GetBusinessKey() string {
	if x != nil && x.BusinessKey != nil {
		return *x.BusinessKey
	}
	return ""
}

func (x *CpCheckOderState) GetOrderID() string {
	if x != nil && x.OrderID != nil {
		return *x.OrderID
	}
	return ""
}

//cp查詢訂單狀態
type CpCheckOderStateRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessKey *string `protobuf:"bytes,1,req,name=BusinessKey" json:"BusinessKey,omitempty"` //商戶ID
	OrderID     *string `protobuf:"bytes,2,req,name=OrderID" json:"OrderID,omitempty"`         //訂單ID
	State       *int32  `protobuf:"varint,3,opt,name=State" json:"State,omitempty"`            //交易訂單的狀態
	ErrMsg      *string `protobuf:"bytes,4,opt,name=errMsg" json:"errMsg,omitempty"`           //錯誤信息
	ErrCode     *int32  `protobuf:"varint,5,opt,name=errCode" json:"errCode,omitempty"`        //錯誤碼
}

func (x *CpCheckOderStateRes) Reset() {
	*x = CpCheckOderStateRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CpCheckOderStateRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CpCheckOderStateRes) ProtoMessage() {}

func (x *CpCheckOderStateRes) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CpCheckOderStateRes.ProtoReflect.Descriptor instead.
func (*CpCheckOderStateRes) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{24}
}

func (x *CpCheckOderStateRes) GetBusinessKey() string {
	if x != nil && x.BusinessKey != nil {
		return *x.BusinessKey
	}
	return ""
}

func (x *CpCheckOderStateRes) GetOrderID() string {
	if x != nil && x.OrderID != nil {
		return *x.OrderID
	}
	return ""
}

func (x *CpCheckOderStateRes) GetState() int32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

func (x *CpCheckOderStateRes) GetErrMsg() string {
	if x != nil && x.ErrMsg != nil {
		return *x.ErrMsg
	}
	return ""
}

func (x *CpCheckOderStateRes) GetErrCode() int32 {
	if x != nil && x.ErrCode != nil {
		return *x.ErrCode
	}
	return 0
}

//返回查詢CP遊戲配置信息
type CpGameConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Res []*CpGameInfo `protobuf:"bytes,1,rep,name=Res" json:"Res,omitempty"` //配置信息列錶
}

func (x *CpGameConfig) Reset() {
	*x = CpGameConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CpGameConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CpGameConfig) ProtoMessage() {}

func (x *CpGameConfig) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CpGameConfig.ProtoReflect.Descriptor instead.
func (*CpGameConfig) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{25}
}

func (x *CpGameConfig) GetRes() []*CpGameInfo {
	if x != nil {
		return x.Res
	}
	return nil
}

//配置信息
type CpGameInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          *int32  `protobuf:"varint,1,req,name=ID" json:"ID,omitempty"`                  //索引ID
	Name        *string `protobuf:"bytes,2,req,name=Name" json:"Name,omitempty"`               //
	BusinessKey *string `protobuf:"bytes,3,req,name=BusinessKey" json:"BusinessKey,omitempty"` //商戶Key
	SignKey     *string `protobuf:"bytes,4,req,name=SignKey" json:"SignKey,omitempty"`         //簽名key
	Part        *int32  `protobuf:"varint,5,req,name=Part" json:"Part,omitempty"`              //第幾期
	GroupID     *int32  `protobuf:"varint,6,req,name=GroupID" json:"GroupID,omitempty"`
	PlatformID  *int32  `protobuf:"varint,7,req,name=PlatformID" json:"PlatformID,omitempty"`
	HostAddress *string `protobuf:"bytes,8,req,name=HostAddress" json:"HostAddress,omitempty"`
}

func (x *CpGameInfo) Reset() {
	*x = CpGameInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CpGameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CpGameInfo) ProtoMessage() {}

func (x *CpGameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CpGameInfo.ProtoReflect.Descriptor instead.
func (*CpGameInfo) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{26}
}

func (x *CpGameInfo) GetID() int32 {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return 0
}

func (x *CpGameInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CpGameInfo) GetBusinessKey() string {
	if x != nil && x.BusinessKey != nil {
		return *x.BusinessKey
	}
	return ""
}

func (x *CpGameInfo) GetSignKey() string {
	if x != nil && x.SignKey != nil {
		return *x.SignKey
	}
	return ""
}

func (x *CpGameInfo) GetPart() int32 {
	if x != nil && x.Part != nil {
		return *x.Part
	}
	return 0
}

func (x *CpGameInfo) GetGroupID() int32 {
	if x != nil && x.GroupID != nil {
		return *x.GroupID
	}
	return 0
}

func (x *CpGameInfo) GetPlatformID() int32 {
	if x != nil && x.PlatformID != nil {
		return *x.PlatformID
	}
	return 0
}

func (x *CpGameInfo) GetHostAddress() string {
	if x != nil && x.HostAddress != nil {
		return *x.HostAddress
	}
	return ""
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//加載活動配置返回消息
type SignActionConfigRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Con  []*SignProConfig `protobuf:"bytes,1,rep,name=Con" json:"Con,omitempty"`   //簽到配置
	Pool []*LotteryPool   `protobuf:"bytes,2,rep,name=Pool" json:"Pool,omitempty"` //抽獎獎池
}

func (x *SignActionConfigRet) Reset() {
	*x = SignActionConfigRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignActionConfigRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignActionConfigRet) ProtoMessage() {}

func (x *SignActionConfigRet) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignActionConfigRet.ProtoReflect.Descriptor instead.
func (*SignActionConfigRet) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{27}
}

func (x *SignActionConfigRet) GetCon() []*SignProConfig {
	if x != nil {
		return x.Con
	}
	return nil
}

func (x *SignActionConfigRet) GetPool() []*LotteryPool {
	if x != nil {
		return x.Pool
	}
	return nil
}

//簽到活動進度配置
type SignProConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Day              *int32 `protobuf:"varint,1,req,name=Day" json:"Day,omitempty"`                           //第幾天
	Reward           *int64 `protobuf:"varint,2,req,name=Reward" json:"Reward,omitempty"`                     //獎勵金幣
	TargetCostAmount *int64 `protobuf:"varint,3,req,name=TargetCostAmount" json:"TargetCostAmount,omitempty"` //目標日流水
}

func (x *SignProConfig) Reset() {
	*x = SignProConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignProConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignProConfig) ProtoMessage() {}

func (x *SignProConfig) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignProConfig.ProtoReflect.Descriptor instead.
func (*SignProConfig) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{28}
}

func (x *SignProConfig) GetDay() int32 {
	if x != nil && x.Day != nil {
		return *x.Day
	}
	return 0
}

func (x *SignProConfig) GetReward() int64 {
	if x != nil && x.Reward != nil {
		return *x.Reward
	}
	return 0
}

func (x *SignProConfig) GetTargetCostAmount() int64 {
	if x != nil && x.TargetCostAmount != nil {
		return *x.TargetCostAmount
	}
	return 0
}

//獎池配置
type LotteryPool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index   *int32 `protobuf:"varint,1,req,name=Index" json:"Index,omitempty"`     //索引
	Reward  *int64 `protobuf:"varint,2,req,name=Reward" json:"Reward,omitempty"`   //獎勵
	Weights *int32 `protobuf:"varint,3,req,name=Weights" json:"Weights,omitempty"` //中獎權重
}

func (x *LotteryPool) Reset() {
	*x = LotteryPool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LotteryPool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LotteryPool) ProtoMessage() {}

func (x *LotteryPool) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LotteryPool.ProtoReflect.Descriptor instead.
func (*LotteryPool) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{29}
}

func (x *LotteryPool) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *LotteryPool) GetReward() int64 {
	if x != nil && x.Reward != nil {
		return *x.Reward
	}
	return 0
}

func (x *LotteryPool) GetWeights() int32 {
	if x != nil && x.Weights != nil {
		return *x.Weights
	}
	return 0
}

//更新玩家的流水信息
type UpdateUserCostAmount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID          *int32 `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`                   //玩家ID
	TodayCostAmount *int64 `protobuf:"varint,2,req,name=TodayCostAmount" json:"TodayCostAmount,omitempty"` //今日玩家總流水
}

func (x *UpdateUserCostAmount) Reset() {
	*x = UpdateUserCostAmount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserCostAmount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserCostAmount) ProtoMessage() {}

func (x *UpdateUserCostAmount) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserCostAmount.ProtoReflect.Descriptor instead.
func (*UpdateUserCostAmount) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{30}
}

func (x *UpdateUserCostAmount) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *UpdateUserCostAmount) GetTodayCostAmount() int64 {
	if x != nil && x.TodayCostAmount != nil {
		return *x.TodayCostAmount
	}
	return 0
}

//加載玩家的簽到消息請求
type LoadUserSignProReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID *int32 `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"` //玩家ID
}

func (x *LoadUserSignProReq) Reset() {
	*x = LoadUserSignProReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadUserSignProReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadUserSignProReq) ProtoMessage() {}

func (x *LoadUserSignProReq) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadUserSignProReq.ProtoReflect.Descriptor instead.
func (*LoadUserSignProReq) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{31}
}

func (x *LoadUserSignProReq) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

//加載玩家的簽到信息返回消息
type LoadUserSignProRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LotteryCount   *int32           `protobuf:"varint,1,req,name=LotteryCount" json:"LotteryCount,omitempty"` //抽獎剩餘次數
	DayOneAmount   *int32           `protobuf:"varint,2,req,name=DayOneAmount" json:"DayOneAmount,omitempty"` //第一天的流水
	DayOneState    *int32           `protobuf:"varint,3,req,name=DayOneState" json:"DayOneState,omitempty"`   //第一天的簽到狀態
	DayTwoAmount   *int32           `protobuf:"varint,4,req,name=DayTwoAmount" json:"DayTwoAmount,omitempty"` //
	DayTwoState    *int32           `protobuf:"varint,5,req,name=DayTwoState" json:"DayTwoState,omitempty"`
	DayThreeAmount *int32           `protobuf:"varint,6,req,name=DayThreeAmount" json:"DayThreeAmount,omitempty"`
	DayThreeState  *int32           `protobuf:"varint,7,req,name=DayThreeState" json:"DayThreeState,omitempty"`
	DayFourAmount  *int32           `protobuf:"varint,8,req,name=DayFourAmount" json:"DayFourAmount,omitempty"`
	DayFourState   *int32           `protobuf:"varint,9,req,name=DayFourState" json:"DayFourState,omitempty"`
	DayFiveAmount  *int32           `protobuf:"varint,10,req,name=DayFiveAmount" json:"DayFiveAmount,omitempty"`
	DayFiveState   *int32           `protobuf:"varint,11,req,name=DayFiveState" json:"DayFiveState,omitempty"`
	DaySixAmount   *int32           `protobuf:"varint,12,req,name=DaySixAmount" json:"DaySixAmount,omitempty"`
	DaySixState    *int32           `protobuf:"varint,13,req,name=DaySixState" json:"DaySixState,omitempty"`
	DaySevenAmount *int32           `protobuf:"varint,14,req,name=DaySevenAmount" json:"DaySevenAmount,omitempty"`
	DaySevenState  *int32           `protobuf:"varint,15,req,name=DaySevenState" json:"DaySevenState,omitempty"`
	SignDay        *int32           `protobuf:"varint,16,req,name=SignDay" json:"SignDay,omitempty"`    //當前簽到第幾天
	UserID         *int32           `protobuf:"varint,17,req,name=UserID" json:"UserID,omitempty"`      //玩家id
	EndTime        *int32           `protobuf:"varint,18,req,name=EndTime" json:"EndTime,omitempty"`    //活動結束時間
	Code           *int32           `protobuf:"varint,19,req,name=Code" json:"Code,omitempty"`          //錯誤嗎
	Msg            *string          `protobuf:"bytes,20,opt,name=Msg" json:"Msg,omitempty"`             //錯誤描述
	SignCon        []*SignProConfig `protobuf:"bytes,21,rep,name=SignCon" json:"SignCon,omitempty"`     //簽到配置
	Pool           []*LotteryPool   `protobuf:"bytes,22,rep,name=Pool" json:"Pool,omitempty"`           //抽獎獎池
	ActiveDes      *string          `protobuf:"bytes,23,opt,name=ActiveDes" json:"ActiveDes,omitempty"` //活動描述
	ParamLG        *string          `protobuf:"bytes,24,opt,name=ParamLG" json:"ParamLG,omitempty"`     //錯誤附帶參數， 多參數以|分割（兼容國際化版本）
}

func (x *LoadUserSignProRet) Reset() {
	*x = LoadUserSignProRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadUserSignProRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadUserSignProRet) ProtoMessage() {}

func (x *LoadUserSignProRet) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadUserSignProRet.ProtoReflect.Descriptor instead.
func (*LoadUserSignProRet) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{32}
}

func (x *LoadUserSignProRet) GetLotteryCount() int32 {
	if x != nil && x.LotteryCount != nil {
		return *x.LotteryCount
	}
	return 0
}

func (x *LoadUserSignProRet) GetDayOneAmount() int32 {
	if x != nil && x.DayOneAmount != nil {
		return *x.DayOneAmount
	}
	return 0
}

func (x *LoadUserSignProRet) GetDayOneState() int32 {
	if x != nil && x.DayOneState != nil {
		return *x.DayOneState
	}
	return 0
}

func (x *LoadUserSignProRet) GetDayTwoAmount() int32 {
	if x != nil && x.DayTwoAmount != nil {
		return *x.DayTwoAmount
	}
	return 0
}

func (x *LoadUserSignProRet) GetDayTwoState() int32 {
	if x != nil && x.DayTwoState != nil {
		return *x.DayTwoState
	}
	return 0
}

func (x *LoadUserSignProRet) GetDayThreeAmount() int32 {
	if x != nil && x.DayThreeAmount != nil {
		return *x.DayThreeAmount
	}
	return 0
}

func (x *LoadUserSignProRet) GetDayThreeState() int32 {
	if x != nil && x.DayThreeState != nil {
		return *x.DayThreeState
	}
	return 0
}

func (x *LoadUserSignProRet) GetDayFourAmount() int32 {
	if x != nil && x.DayFourAmount != nil {
		return *x.DayFourAmount
	}
	return 0
}

func (x *LoadUserSignProRet) GetDayFourState() int32 {
	if x != nil && x.DayFourState != nil {
		return *x.DayFourState
	}
	return 0
}

func (x *LoadUserSignProRet) GetDayFiveAmount() int32 {
	if x != nil && x.DayFiveAmount != nil {
		return *x.DayFiveAmount
	}
	return 0
}

func (x *LoadUserSignProRet) GetDayFiveState() int32 {
	if x != nil && x.DayFiveState != nil {
		return *x.DayFiveState
	}
	return 0
}

func (x *LoadUserSignProRet) GetDaySixAmount() int32 {
	if x != nil && x.DaySixAmount != nil {
		return *x.DaySixAmount
	}
	return 0
}

func (x *LoadUserSignProRet) GetDaySixState() int32 {
	if x != nil && x.DaySixState != nil {
		return *x.DaySixState
	}
	return 0
}

func (x *LoadUserSignProRet) GetDaySevenAmount() int32 {
	if x != nil && x.DaySevenAmount != nil {
		return *x.DaySevenAmount
	}
	return 0
}

func (x *LoadUserSignProRet) GetDaySevenState() int32 {
	if x != nil && x.DaySevenState != nil {
		return *x.DaySevenState
	}
	return 0
}

func (x *LoadUserSignProRet) GetSignDay() int32 {
	if x != nil && x.SignDay != nil {
		return *x.SignDay
	}
	return 0
}

func (x *LoadUserSignProRet) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *LoadUserSignProRet) GetEndTime() int32 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

func (x *LoadUserSignProRet) GetCode() int32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *LoadUserSignProRet) GetMsg() string {
	if x != nil && x.Msg != nil {
		return *x.Msg
	}
	return ""
}

func (x *LoadUserSignProRet) GetSignCon() []*SignProConfig {
	if x != nil {
		return x.SignCon
	}
	return nil
}

func (x *LoadUserSignProRet) GetPool() []*LotteryPool {
	if x != nil {
		return x.Pool
	}
	return nil
}

func (x *LoadUserSignProRet) GetActiveDes() string {
	if x != nil && x.ActiveDes != nil {
		return *x.ActiveDes
	}
	return ""
}

func (x *LoadUserSignProRet) GetParamLG() string {
	if x != nil && x.ParamLG != nil {
		return *x.ParamLG
	}
	return ""
}

//領取簽到獎勵
type ReceiveSignRewardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID *int32 `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"` //玩家ID
	Day    *int32 `protobuf:"varint,2,req,name=Day" json:"Day,omitempty"`       //第幾天的簽到獎勵
}

func (x *ReceiveSignRewardReq) Reset() {
	*x = ReceiveSignRewardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiveSignRewardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveSignRewardReq) ProtoMessage() {}

func (x *ReceiveSignRewardReq) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveSignRewardReq.ProtoReflect.Descriptor instead.
func (*ReceiveSignRewardReq) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{33}
}

func (x *ReceiveSignRewardReq) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *ReceiveSignRewardReq) GetDay() int32 {
	if x != nil && x.Day != nil {
		return *x.Day
	}
	return 0
}

//領取簽到獎勵返回
type ReceiveSignRewardRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code          *int32  `protobuf:"varint,1,req,name=Code" json:"Code,omitempty"`
	Msg           *string `protobuf:"bytes,2,opt,name=Msg" json:"Msg,omitempty"`
	UserID        *int32  `protobuf:"varint,3,req,name=UserID" json:"UserID,omitempty"`               //玩家ID
	Day           *int32  `protobuf:"varint,4,req,name=Day" json:"Day,omitempty"`                     //第幾天的簽到獎勵
	BankAmount    *int64  `protobuf:"varint,5,opt,name=BankAmount" json:"BankAmount,omitempty"`       //保險箱的金幣
	RewardAmount  *int32  `protobuf:"varint,6,opt,name=RewardAmount" json:"RewardAmount,omitempty"`   //簽到的獎勵
	ParamLG       *string `protobuf:"bytes,7,opt,name=ParamLG" json:"ParamLG,omitempty"`              //錯誤附帶參數， 多參數以|分割（兼容國際化版本）
	LotteryAmount *int32  `protobuf:"varint,8,opt,name=LotteryAmount" json:"LotteryAmount,omitempty"` //獲得抽獎次數
}

func (x *ReceiveSignRewardRes) Reset() {
	*x = ReceiveSignRewardRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiveSignRewardRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveSignRewardRes) ProtoMessage() {}

func (x *ReceiveSignRewardRes) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveSignRewardRes.ProtoReflect.Descriptor instead.
func (*ReceiveSignRewardRes) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{34}
}

func (x *ReceiveSignRewardRes) GetCode() int32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *ReceiveSignRewardRes) GetMsg() string {
	if x != nil && x.Msg != nil {
		return *x.Msg
	}
	return ""
}

func (x *ReceiveSignRewardRes) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *ReceiveSignRewardRes) GetDay() int32 {
	if x != nil && x.Day != nil {
		return *x.Day
	}
	return 0
}

func (x *ReceiveSignRewardRes) GetBankAmount() int64 {
	if x != nil && x.BankAmount != nil {
		return *x.BankAmount
	}
	return 0
}

func (x *ReceiveSignRewardRes) GetRewardAmount() int32 {
	if x != nil && x.RewardAmount != nil {
		return *x.RewardAmount
	}
	return 0
}

func (x *ReceiveSignRewardRes) GetParamLG() string {
	if x != nil && x.ParamLG != nil {
		return *x.ParamLG
	}
	return ""
}

func (x *ReceiveSignRewardRes) GetLotteryAmount() int32 {
	if x != nil && x.LotteryAmount != nil {
		return *x.LotteryAmount
	}
	return 0
}

//領取簽到抽獎獎勵
type AddSignLotteryRewardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID    *int32 `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`       //玩家ID
	AddAmount *int32 `protobuf:"varint,2,req,name=AddAmount" json:"AddAmount,omitempty"` //增加的金幣
	Index     *int32 `protobuf:"varint,3,req,name=Index" json:"Index,omitempty"`         //中獎的獎池索引
}

func (x *AddSignLotteryRewardReq) Reset() {
	*x = AddSignLotteryRewardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSignLotteryRewardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSignLotteryRewardReq) ProtoMessage() {}

func (x *AddSignLotteryRewardReq) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSignLotteryRewardReq.ProtoReflect.Descriptor instead.
func (*AddSignLotteryRewardReq) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{35}
}

func (x *AddSignLotteryRewardReq) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *AddSignLotteryRewardReq) GetAddAmount() int32 {
	if x != nil && x.AddAmount != nil {
		return *x.AddAmount
	}
	return 0
}

func (x *AddSignLotteryRewardReq) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

//領取簽到抽獎獎勵返回
type AddSignLotteryRewardRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code       *int32  `protobuf:"varint,1,req,name=Code" json:"Code,omitempty"`
	Msg        *string `protobuf:"bytes,2,opt,name=Msg" json:"Msg,omitempty"`
	UserID     *int32  `protobuf:"varint,3,req,name=UserID" json:"UserID,omitempty"`         //玩家ID
	BankAmount *int64  `protobuf:"varint,5,opt,name=BankAmount" json:"BankAmount,omitempty"` //保險箱的金幣
	AddAmount  *int32  `protobuf:"varint,6,req,name=AddAmount" json:"AddAmount,omitempty"`   //增加的金幣
	Index      *int32  `protobuf:"varint,7,req,name=Index" json:"Index,omitempty"`           //中獎的獎池索引
	ParamLG    *string `protobuf:"bytes,8,opt,name=ParamLG" json:"ParamLG,omitempty"`        //錯誤附帶參數， 多參數以|分割（兼容國際化版本）
}

func (x *AddSignLotteryRewardRes) Reset() {
	*x = AddSignLotteryRewardRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSignLotteryRewardRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSignLotteryRewardRes) ProtoMessage() {}

func (x *AddSignLotteryRewardRes) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSignLotteryRewardRes.ProtoReflect.Descriptor instead.
func (*AddSignLotteryRewardRes) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{36}
}

func (x *AddSignLotteryRewardRes) GetCode() int32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *AddSignLotteryRewardRes) GetMsg() string {
	if x != nil && x.Msg != nil {
		return *x.Msg
	}
	return ""
}

func (x *AddSignLotteryRewardRes) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *AddSignLotteryRewardRes) GetBankAmount() int64 {
	if x != nil && x.BankAmount != nil {
		return *x.BankAmount
	}
	return 0
}

func (x *AddSignLotteryRewardRes) GetAddAmount() int32 {
	if x != nil && x.AddAmount != nil {
		return *x.AddAmount
	}
	return 0
}

func (x *AddSignLotteryRewardRes) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *AddSignLotteryRewardRes) GetParamLG() string {
	if x != nil && x.ParamLG != nil {
		return *x.ParamLG
	}
	return ""
}

//大廳配置結構
type LoadHallConfigRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CpConfig *CpGameConfig `protobuf:"bytes,1,req,name=CpConfig" json:"CpConfig,omitempty"` //CP通路配置信息列錶
}

func (x *LoadHallConfigRes) Reset() {
	*x = LoadHallConfigRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadHallConfigRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadHallConfigRes) ProtoMessage() {}

func (x *LoadHallConfigRes) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadHallConfigRes.ProtoReflect.Descriptor instead.
func (*LoadHallConfigRes) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{37}
}

func (x *LoadHallConfigRes) GetCpConfig() *CpGameConfig {
	if x != nil {
		return x.CpConfig
	}
	return nil
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//請求獲取玩家旋轉信息
type GetUserTurnInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID *int32 `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"` //玩家ID
}

func (x *GetUserTurnInfoReq) Reset() {
	*x = GetUserTurnInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserTurnInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserTurnInfoReq) ProtoMessage() {}

func (x *GetUserTurnInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserTurnInfoReq.ProtoReflect.Descriptor instead.
func (*GetUserTurnInfoReq) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{38}
}

func (x *GetUserTurnInfoReq) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

//旋轉信息返回
type GetUserTurnInfoRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID      *int32            `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`           //玩家ID
	Code        *int32            `protobuf:"varint,2,req,name=Code" json:"Code,omitempty"`               //錯誤碼
	Msg         *string           `protobuf:"bytes,3,opt,name=Msg" json:"Msg,omitempty"`                  //錯誤信息
	TotalAmount *int32            `protobuf:"varint,4,opt,name=TotalAmount" json:"TotalAmount,omitempty"` //總贏取流水
	TurnCon     []*TurnConfig     `protobuf:"bytes,5,rep,name=TurnCon" json:"TurnCon,omitempty"`          //轉盤配置信息
	TurnCost    []*TurnCostConfig `protobuf:"bytes,6,rep,name=TurnCost" json:"TurnCost,omitempty"`        //旋轉消耗配置
}

func (x *GetUserTurnInfoRes) Reset() {
	*x = GetUserTurnInfoRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserTurnInfoRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserTurnInfoRes) ProtoMessage() {}

func (x *GetUserTurnInfoRes) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserTurnInfoRes.ProtoReflect.Descriptor instead.
func (*GetUserTurnInfoRes) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{39}
}

func (x *GetUserTurnInfoRes) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *GetUserTurnInfoRes) GetCode() int32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *GetUserTurnInfoRes) GetMsg() string {
	if x != nil && x.Msg != nil {
		return *x.Msg
	}
	return ""
}

func (x *GetUserTurnInfoRes) GetTotalAmount() int32 {
	if x != nil && x.TotalAmount != nil {
		return *x.TotalAmount
	}
	return 0
}

func (x *GetUserTurnInfoRes) GetTurnCon() []*TurnConfig {
	if x != nil {
		return x.TurnCon
	}
	return nil
}

func (x *GetUserTurnInfoRes) GetTurnCost() []*TurnCostConfig {
	if x != nil {
		return x.TurnCost
	}
	return nil
}

//轉盤配置
type TurnConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TurnType *int32 `protobuf:"varint,1,req,name=TurnType" json:"TurnType,omitempty"` //旋轉類型
	Index    *int32 `protobuf:"varint,2,req,name=Index" json:"Index,omitempty"`       //索引
	Reward   *int32 `protobuf:"varint,3,req,name=Reward" json:"Reward,omitempty"`     //獎勵金
	Weight   *int32 `protobuf:"varint,4,req,name=Weight" json:"Weight,omitempty"`     //中獎權重
}

func (x *TurnConfig) Reset() {
	*x = TurnConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TurnConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TurnConfig) ProtoMessage() {}

func (x *TurnConfig) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TurnConfig.ProtoReflect.Descriptor instead.
func (*TurnConfig) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{40}
}

func (x *TurnConfig) GetTurnType() int32 {
	if x != nil && x.TurnType != nil {
		return *x.TurnType
	}
	return 0
}

func (x *TurnConfig) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *TurnConfig) GetReward() int32 {
	if x != nil && x.Reward != nil {
		return *x.Reward
	}
	return 0
}

func (x *TurnConfig) GetWeight() int32 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

//旋轉消耗配置
type TurnCostConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TurnSilverCost  *int32 `protobuf:"varint,1,req,name=TurnSilverCost" json:"TurnSilverCost,omitempty"`   //白銀消耗
	TurnGoldCost    *int32 `protobuf:"varint,2,req,name=TurnGoldCost" json:"TurnGoldCost,omitempty"`       //黃金消耗
	TurnDiamondCost *int32 `protobuf:"varint,3,req,name=TurnDiamondCost" json:"TurnDiamondCost,omitempty"` //鑽石消耗
}

func (x *TurnCostConfig) Reset() {
	*x = TurnCostConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TurnCostConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TurnCostConfig) ProtoMessage() {}

func (x *TurnCostConfig) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TurnCostConfig.ProtoReflect.Descriptor instead.
func (*TurnCostConfig) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{41}
}

func (x *TurnCostConfig) GetTurnSilverCost() int32 {
	if x != nil && x.TurnSilverCost != nil {
		return *x.TurnSilverCost
	}
	return 0
}

func (x *TurnCostConfig) GetTurnGoldCost() int32 {
	if x != nil && x.TurnGoldCost != nil {
		return *x.TurnGoldCost
	}
	return 0
}

func (x *TurnCostConfig) GetTurnDiamondCost() int32 {
	if x != nil && x.TurnDiamondCost != nil {
		return *x.TurnDiamondCost
	}
	return 0
}

//請求獲取玩家戳戳了旋轉信息
type GetUserCCLTurnInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID *int32 `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"` //玩家ID
}

func (x *GetUserCCLTurnInfoReq) Reset() {
	*x = GetUserCCLTurnInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserCCLTurnInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserCCLTurnInfoReq) ProtoMessage() {}

func (x *GetUserCCLTurnInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserCCLTurnInfoReq.ProtoReflect.Descriptor instead.
func (*GetUserCCLTurnInfoReq) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{42}
}

func (x *GetUserCCLTurnInfoReq) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

//戳戳樂旋轉信息返回
type GetUserCCLTurnInfoRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID      *int32  `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`           //玩家ID
	Code        *int32  `protobuf:"varint,2,req,name=Code" json:"Code,omitempty"`               //錯誤碼
	Msg         *string `protobuf:"bytes,3,opt,name=Msg" json:"Msg,omitempty"`                  //錯誤信息
	TotalAmount *int32  `protobuf:"varint,4,opt,name=TotalAmount" json:"TotalAmount,omitempty"` //總充值流水
	CostAmount  *int32  `protobuf:"varint,5,opt,name=CostAmount" json:"CostAmount,omitempty"`   //旋轉消耗的充值流水
}

func (x *GetUserCCLTurnInfoRes) Reset() {
	*x = GetUserCCLTurnInfoRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserCCLTurnInfoRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserCCLTurnInfoRes) ProtoMessage() {}

func (x *GetUserCCLTurnInfoRes) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserCCLTurnInfoRes.ProtoReflect.Descriptor instead.
func (*GetUserCCLTurnInfoRes) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{43}
}

func (x *GetUserCCLTurnInfoRes) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *GetUserCCLTurnInfoRes) GetCode() int32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *GetUserCCLTurnInfoRes) GetMsg() string {
	if x != nil && x.Msg != nil {
		return *x.Msg
	}
	return ""
}

func (x *GetUserCCLTurnInfoRes) GetTotalAmount() int32 {
	if x != nil && x.TotalAmount != nil {
		return *x.TotalAmount
	}
	return 0
}

func (x *GetUserCCLTurnInfoRes) GetCostAmount() int32 {
	if x != nil && x.CostAmount != nil {
		return *x.CostAmount
	}
	return 0
}

//增加旋轉獎勵請求
type AddTurnRewardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID   *int32 `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`     //玩家ID
	Reward   *int32 `protobuf:"varint,2,req,name=Reward" json:"Reward,omitempty"`     //獎勵金
	TurnType *int32 `protobuf:"varint,3,req,name=TurnType" json:"TurnType,omitempty"` //旋轉獎勵類型
}

func (x *AddTurnRewardReq) Reset() {
	*x = AddTurnRewardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTurnRewardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTurnRewardReq) ProtoMessage() {}

func (x *AddTurnRewardReq) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTurnRewardReq.ProtoReflect.Descriptor instead.
func (*AddTurnRewardReq) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{44}
}

func (x *AddTurnRewardReq) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *AddTurnRewardReq) GetReward() int32 {
	if x != nil && x.Reward != nil {
		return *x.Reward
	}
	return 0
}

func (x *AddTurnRewardReq) GetTurnType() int32 {
	if x != nil && x.TurnType != nil {
		return *x.TurnType
	}
	return 0
}

//增加旋轉獎勵返回
type AddTurnRewardRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID       *int32  `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`             //玩家ID
	Reward       *int32  `protobuf:"varint,2,req,name=Reward" json:"Reward,omitempty"`             //獎勵金
	TurnType     *int32  `protobuf:"varint,3,req,name=TurnType" json:"TurnType,omitempty"`         //旋轉獎勵類型
	Code         *int32  `protobuf:"varint,4,req,name=Code" json:"Code,omitempty"`                 //錯誤碼
	Msg          *string `protobuf:"bytes,5,opt,name=Msg" json:"Msg,omitempty"`                    //錯誤信息
	RemainAmount *int32  `protobuf:"varint,6,opt,name=RemainAmount" json:"RemainAmount,omitempty"` //剩餘積分
}

func (x *AddTurnRewardRes) Reset() {
	*x = AddTurnRewardRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTurnRewardRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTurnRewardRes) ProtoMessage() {}

func (x *AddTurnRewardRes) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTurnRewardRes.ProtoReflect.Descriptor instead.
func (*AddTurnRewardRes) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{45}
}

func (x *AddTurnRewardRes) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *AddTurnRewardRes) GetReward() int32 {
	if x != nil && x.Reward != nil {
		return *x.Reward
	}
	return 0
}

func (x *AddTurnRewardRes) GetTurnType() int32 {
	if x != nil && x.TurnType != nil {
		return *x.TurnType
	}
	return 0
}

func (x *AddTurnRewardRes) GetCode() int32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *AddTurnRewardRes) GetMsg() string {
	if x != nil && x.Msg != nil {
		return *x.Msg
	}
	return ""
}

func (x *AddTurnRewardRes) GetRemainAmount() int32 {
	if x != nil && x.RemainAmount != nil {
		return *x.RemainAmount
	}
	return 0
}

type LuckyWheelConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rewards      []*LuckyWheelReward                     `protobuf:"bytes,1,rep,name=Rewards" json:"Rewards,omitempty"`
	Probabilitys []*LuckyWheelProbability                `protobuf:"bytes,2,rep,name=Probabilitys" json:"Probabilitys,omitempty"`
	ResetTime    *string                                 `protobuf:"bytes,3,req,name=ResetTime" json:"ResetTime,omitempty"`
	Records      *DZPKHALLLuckyWheelUserRewardRecordsRet `protobuf:"bytes,4,req,name=records" json:"records,omitempty"`
}

func (x *LuckyWheelConfig) Reset() {
	*x = LuckyWheelConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LuckyWheelConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LuckyWheelConfig) ProtoMessage() {}

func (x *LuckyWheelConfig) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LuckyWheelConfig.ProtoReflect.Descriptor instead.
func (*LuckyWheelConfig) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{46}
}

func (x *LuckyWheelConfig) GetRewards() []*LuckyWheelReward {
	if x != nil {
		return x.Rewards
	}
	return nil
}

func (x *LuckyWheelConfig) GetProbabilitys() []*LuckyWheelProbability {
	if x != nil {
		return x.Probabilitys
	}
	return nil
}

func (x *LuckyWheelConfig) GetResetTime() string {
	if x != nil && x.ResetTime != nil {
		return *x.ResetTime
	}
	return ""
}

func (x *LuckyWheelConfig) GetRecords() *DZPKHALLLuckyWheelUserRewardRecordsRet {
	if x != nil {
		return x.Records
	}
	return nil
}

type LuckyWheelReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           *int32  `protobuf:"varint,1,req,name=Id" json:"Id,omitempty"`
	RewardName   *string `protobuf:"bytes,2,req,name=RewardName" json:"RewardName,omitempty"`
	RewardType   *int32  `protobuf:"varint,3,req,name=RewardType" json:"RewardType,omitempty"`
	RewardAmount *int32  `protobuf:"varint,4,req,name=RewardAmount" json:"RewardAmount,omitempty"`
	LimitAmount  *int32  `protobuf:"varint,5,req,name=LimitAmount" json:"LimitAmount,omitempty"`
	AssignAmount *int32  `protobuf:"varint,6,req,name=AssignAmount" json:"AssignAmount,omitempty"`
	PosIndex     *string `protobuf:"bytes,7,req,name=PosIndex" json:"PosIndex,omitempty"`
	BulletType   *int32  `protobuf:"varint,8,req,name=BulletType" json:"BulletType,omitempty"`
	RewardWeight *int32  `protobuf:"varint,9,req,name=RewardWeight" json:"RewardWeight,omitempty"`
}

func (x *LuckyWheelReward) Reset() {
	*x = LuckyWheelReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LuckyWheelReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LuckyWheelReward) ProtoMessage() {}

func (x *LuckyWheelReward) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LuckyWheelReward.ProtoReflect.Descriptor instead.
func (*LuckyWheelReward) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{47}
}

func (x *LuckyWheelReward) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *LuckyWheelReward) GetRewardName() string {
	if x != nil && x.RewardName != nil {
		return *x.RewardName
	}
	return ""
}

func (x *LuckyWheelReward) GetRewardType() int32 {
	if x != nil && x.RewardType != nil {
		return *x.RewardType
	}
	return 0
}

func (x *LuckyWheelReward) GetRewardAmount() int32 {
	if x != nil && x.RewardAmount != nil {
		return *x.RewardAmount
	}
	return 0
}

func (x *LuckyWheelReward) GetLimitAmount() int32 {
	if x != nil && x.LimitAmount != nil {
		return *x.LimitAmount
	}
	return 0
}

func (x *LuckyWheelReward) GetAssignAmount() int32 {
	if x != nil && x.AssignAmount != nil {
		return *x.AssignAmount
	}
	return 0
}

func (x *LuckyWheelReward) GetPosIndex() string {
	if x != nil && x.PosIndex != nil {
		return *x.PosIndex
	}
	return ""
}

func (x *LuckyWheelReward) GetBulletType() int32 {
	if x != nil && x.BulletType != nil {
		return *x.BulletType
	}
	return 0
}

func (x *LuckyWheelReward) GetRewardWeight() int32 {
	if x != nil && x.RewardWeight != nil {
		return *x.RewardWeight
	}
	return 0
}

type LuckyWheelProbability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   *int32 `protobuf:"varint,1,req,name=Id" json:"Id,omitempty"`
	RewardId             *int32 `protobuf:"varint,2,req,name=RewardId" json:"RewardId,omitempty"`
	ProbabilityGroup     *int32 `protobuf:"varint,3,req,name=ProbabilityGroup" json:"ProbabilityGroup,omitempty"`
	Probability          *int32 `protobuf:"varint,4,req,name=Probability" json:"Probability,omitempty"`
	LevelWeightLimitDown *int32 `protobuf:"varint,5,req,name=LevelWeightLimitDown" json:"LevelWeightLimitDown,omitempty"`
}

func (x *LuckyWheelProbability) Reset() {
	*x = LuckyWheelProbability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LuckyWheelProbability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LuckyWheelProbability) ProtoMessage() {}

func (x *LuckyWheelProbability) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LuckyWheelProbability.ProtoReflect.Descriptor instead.
func (*LuckyWheelProbability) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{48}
}

func (x *LuckyWheelProbability) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *LuckyWheelProbability) GetRewardId() int32 {
	if x != nil && x.RewardId != nil {
		return *x.RewardId
	}
	return 0
}

func (x *LuckyWheelProbability) GetProbabilityGroup() int32 {
	if x != nil && x.ProbabilityGroup != nil {
		return *x.ProbabilityGroup
	}
	return 0
}

func (x *LuckyWheelProbability) GetProbability() int32 {
	if x != nil && x.Probability != nil {
		return *x.Probability
	}
	return 0
}

func (x *LuckyWheelProbability) GetLevelWeightLimitDown() int32 {
	if x != nil && x.LevelWeightLimitDown != nil {
		return *x.LevelWeightLimitDown
	}
	return 0
}

type LuckyWheelGetReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardId     *int32 `protobuf:"varint,1,req,name=RewardId" json:"RewardId,omitempty"`
	RewardAmount *int32 `protobuf:"varint,2,req,name=RewardAmount" json:"RewardAmount,omitempty"`
	RewardType   *int32 `protobuf:"varint,3,req,name=RewardType" json:"RewardType,omitempty"`
	SpinWeight   *int32 `protobuf:"varint,4,req,name=SpinWeight" json:"SpinWeight,omitempty"`
	GroupID      *int32 `protobuf:"varint,5,req,name=GroupID" json:"GroupID,omitempty"`
}

func (x *LuckyWheelGetReward) Reset() {
	*x = LuckyWheelGetReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LuckyWheelGetReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LuckyWheelGetReward) ProtoMessage() {}

func (x *LuckyWheelGetReward) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LuckyWheelGetReward.ProtoReflect.Descriptor instead.
func (*LuckyWheelGetReward) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{49}
}

func (x *LuckyWheelGetReward) GetRewardId() int32 {
	if x != nil && x.RewardId != nil {
		return *x.RewardId
	}
	return 0
}

func (x *LuckyWheelGetReward) GetRewardAmount() int32 {
	if x != nil && x.RewardAmount != nil {
		return *x.RewardAmount
	}
	return 0
}

func (x *LuckyWheelGetReward) GetRewardType() int32 {
	if x != nil && x.RewardType != nil {
		return *x.RewardType
	}
	return 0
}

func (x *LuckyWheelGetReward) GetSpinWeight() int32 {
	if x != nil && x.SpinWeight != nil {
		return *x.SpinWeight
	}
	return 0
}

func (x *LuckyWheelGetReward) GetGroupID() int32 {
	if x != nil && x.GroupID != nil {
		return *x.GroupID
	}
	return 0
}

type LuckyWheelUserData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpinWeight *int32  `protobuf:"varint,1,req,name=SpinWeight" json:"SpinWeight,omitempty"`
	SpinCount  *int32  `protobuf:"varint,2,req,name=SpinCount" json:"SpinCount,omitempty"`
	CanSpin    *int32  `protobuf:"varint,3,req,name=CanSpin" json:"CanSpin,omitempty"`
	UpdateTime *string `protobuf:"bytes,4,req,name=UpdateTime" json:"UpdateTime,omitempty"`
}

func (x *LuckyWheelUserData) Reset() {
	*x = LuckyWheelUserData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LuckyWheelUserData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LuckyWheelUserData) ProtoMessage() {}

func (x *LuckyWheelUserData) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LuckyWheelUserData.ProtoReflect.Descriptor instead.
func (*LuckyWheelUserData) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{50}
}

func (x *LuckyWheelUserData) GetSpinWeight() int32 {
	if x != nil && x.SpinWeight != nil {
		return *x.SpinWeight
	}
	return 0
}

func (x *LuckyWheelUserData) GetSpinCount() int32 {
	if x != nil && x.SpinCount != nil {
		return *x.SpinCount
	}
	return 0
}

func (x *LuckyWheelUserData) GetCanSpin() int32 {
	if x != nil && x.CanSpin != nil {
		return *x.CanSpin
	}
	return 0
}

func (x *LuckyWheelUserData) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

type LuckyWheelDBRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupID *int32 `protobuf:"varint,1,req,name=GroupID" json:"GroupID,omitempty"` // 營運ID
}

func (x *LuckyWheelDBRequest) Reset() {
	*x = LuckyWheelDBRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LuckyWheelDBRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LuckyWheelDBRequest) ProtoMessage() {}

func (x *LuckyWheelDBRequest) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LuckyWheelDBRequest.ProtoReflect.Descriptor instead.
func (*LuckyWheelDBRequest) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{51}
}

func (x *LuckyWheelDBRequest) GetGroupID() int32 {
	if x != nil && x.GroupID != nil {
		return *x.GroupID
	}
	return 0
}

type LuckyWheelForceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*LuckyWheelForce `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
}

func (x *LuckyWheelForceList) Reset() {
	*x = LuckyWheelForceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LuckyWheelForceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LuckyWheelForceList) ProtoMessage() {}

func (x *LuckyWheelForceList) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LuckyWheelForceList.ProtoReflect.Descriptor instead.
func (*LuckyWheelForceList) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{52}
}

func (x *LuckyWheelForceList) GetList() []*LuckyWheelForce {
	if x != nil {
		return x.List
	}
	return nil
}

type LuckyWheelForce struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID       *int32 `protobuf:"varint,1,req,name=ID" json:"ID,omitempty"`
	UserID   *int32 `protobuf:"varint,2,req,name=UserID" json:"UserID,omitempty"`
	RewardID *int32 `protobuf:"varint,3,req,name=RewardID" json:"RewardID,omitempty"`
}

func (x *LuckyWheelForce) Reset() {
	*x = LuckyWheelForce{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LuckyWheelForce) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LuckyWheelForce) ProtoMessage() {}

func (x *LuckyWheelForce) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LuckyWheelForce.ProtoReflect.Descriptor instead.
func (*LuckyWheelForce) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{53}
}

func (x *LuckyWheelForce) GetID() int32 {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return 0
}

func (x *LuckyWheelForce) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *LuckyWheelForce) GetRewardID() int32 {
	if x != nil && x.RewardID != nil {
		return *x.RewardID
	}
	return 0
}

type BJL_DBCardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameIndex *int32  `protobuf:"varint,1,req,name=GameIndex" json:"GameIndex,omitempty"` // 局數
	Card      *string `protobuf:"bytes,2,req,name=Card" json:"Card,omitempty"`            // 撲克牌花色與數字
	CardNo    *int32  `protobuf:"varint,3,req,name=CardNo" json:"CardNo,omitempty"`       // 撲克牌編號
	Code      *string `protobuf:"bytes,4,opt,name=Code" json:"Code,omitempty"`            //
	Encode    *string `protobuf:"bytes,5,opt,name=Encode" json:"Encode,omitempty"`        //
}

func (x *BJL_DBCardInfo) Reset() {
	*x = BJL_DBCardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BJL_DBCardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BJL_DBCardInfo) ProtoMessage() {}

func (x *BJL_DBCardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BJL_DBCardInfo.ProtoReflect.Descriptor instead.
func (*BJL_DBCardInfo) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{54}
}

func (x *BJL_DBCardInfo) GetGameIndex() int32 {
	if x != nil && x.GameIndex != nil {
		return *x.GameIndex
	}
	return 0
}

func (x *BJL_DBCardInfo) GetCard() string {
	if x != nil && x.Card != nil {
		return *x.Card
	}
	return ""
}

func (x *BJL_DBCardInfo) GetCardNo() int32 {
	if x != nil && x.CardNo != nil {
		return *x.CardNo
	}
	return 0
}

func (x *BJL_DBCardInfo) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

func (x *BJL_DBCardInfo) GetEncode() string {
	if x != nil && x.Encode != nil {
		return *x.Encode
	}
	return ""
}

type BJL_DBCardInfoList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cards        []*BJL_DBCardInfo `protobuf:"bytes,1,rep,name=cards" json:"cards,omitempty"`
	TableNo      *int32            `protobuf:"varint,2,req,name=TableNo" json:"TableNo,omitempty"`
	ShoeNo       *int32            `protobuf:"varint,3,req,name=ShoeNo" json:"ShoeNo,omitempty"`
	GroupID      *int32            `protobuf:"varint,4,req,name=GroupID" json:"GroupID,omitempty"`
	GameSN       *string           `protobuf:"bytes,5,req,name=GameSN" json:"GameSN,omitempty"` // 遊戲編號
	GameID       *int32            `protobuf:"varint,6,req,name=GameID" json:"GameID,omitempty"`
	IsBlockchain *bool             `protobuf:"varint,7,opt,name=IsBlockchain" json:"IsBlockchain,omitempty"` //是否將牌組上鏈
	Flag         *int32            `protobuf:"varint,8,opt,name=Flag" json:"Flag,omitempty"`
}

func (x *BJL_DBCardInfoList) Reset() {
	*x = BJL_DBCardInfoList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BJL_DBCardInfoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BJL_DBCardInfoList) ProtoMessage() {}

func (x *BJL_DBCardInfoList) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BJL_DBCardInfoList.ProtoReflect.Descriptor instead.
func (*BJL_DBCardInfoList) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{55}
}

func (x *BJL_DBCardInfoList) GetCards() []*BJL_DBCardInfo {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *BJL_DBCardInfoList) GetTableNo() int32 {
	if x != nil && x.TableNo != nil {
		return *x.TableNo
	}
	return 0
}

func (x *BJL_DBCardInfoList) GetShoeNo() int32 {
	if x != nil && x.ShoeNo != nil {
		return *x.ShoeNo
	}
	return 0
}

func (x *BJL_DBCardInfoList) GetGroupID() int32 {
	if x != nil && x.GroupID != nil {
		return *x.GroupID
	}
	return 0
}

func (x *BJL_DBCardInfoList) GetGameSN() string {
	if x != nil && x.GameSN != nil {
		return *x.GameSN
	}
	return ""
}

func (x *BJL_DBCardInfoList) GetGameID() int32 {
	if x != nil && x.GameID != nil {
		return *x.GameID
	}
	return 0
}

func (x *BJL_DBCardInfoList) GetIsBlockchain() bool {
	if x != nil && x.IsBlockchain != nil {
		return *x.IsBlockchain
	}
	return false
}

func (x *BJL_DBCardInfoList) GetFlag() int32 {
	if x != nil && x.Flag != nil {
		return *x.Flag
	}
	return 0
}

type BJL_DBPokerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameSN     *string `protobuf:"bytes,1,req,name=GameSN" json:"GameSN,omitempty"`          // 遊戲編號
	TotalCount *int32  `protobuf:"varint,2,req,name=TotalCount" json:"TotalCount,omitempty"` // 總牌數
	UseCount   *int32  `protobuf:"varint,3,req,name=UseCount" json:"UseCount,omitempty"`     // 使用牌數
	CurrCount  *int32  `protobuf:"varint,4,req,name=CurrCount" json:"CurrCount,omitempty"`   // 目前開啟牌數
	Games      *int32  `protobuf:"varint,5,req,name=Games" json:"Games,omitempty"`           // 目前局數
	CreateTime *int64  `protobuf:"varint,6,req,name=CreateTime" json:"CreateTime,omitempty"` // 建立時間
	GroupID    *int32  `protobuf:"varint,7,req,name=GroupID" json:"GroupID,omitempty"`
	Flag       *int32  `protobuf:"varint,8,opt,name=Flag" json:"Flag,omitempty"`
}

func (x *BJL_DBPokerInfo) Reset() {
	*x = BJL_DBPokerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BJL_DBPokerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BJL_DBPokerInfo) ProtoMessage() {}

func (x *BJL_DBPokerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BJL_DBPokerInfo.ProtoReflect.Descriptor instead.
func (*BJL_DBPokerInfo) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{56}
}

func (x *BJL_DBPokerInfo) GetGameSN() string {
	if x != nil && x.GameSN != nil {
		return *x.GameSN
	}
	return ""
}

func (x *BJL_DBPokerInfo) GetTotalCount() int32 {
	if x != nil && x.TotalCount != nil {
		return *x.TotalCount
	}
	return 0
}

func (x *BJL_DBPokerInfo) GetUseCount() int32 {
	if x != nil && x.UseCount != nil {
		return *x.UseCount
	}
	return 0
}

func (x *BJL_DBPokerInfo) GetCurrCount() int32 {
	if x != nil && x.CurrCount != nil {
		return *x.CurrCount
	}
	return 0
}

func (x *BJL_DBPokerInfo) GetGames() int32 {
	if x != nil && x.Games != nil {
		return *x.Games
	}
	return 0
}

func (x *BJL_DBPokerInfo) GetCreateTime() int64 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

func (x *BJL_DBPokerInfo) GetGroupID() int32 {
	if x != nil && x.GroupID != nil {
		return *x.GroupID
	}
	return 0
}

func (x *BJL_DBPokerInfo) GetFlag() int32 {
	if x != nil && x.Flag != nil {
		return *x.Flag
	}
	return 0
}

type BJL_DBTableShoeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableNo []int32 `protobuf:"varint,1,rep,name=TableNo" json:"TableNo,omitempty"`
	ShoeNo  []int32 `protobuf:"varint,2,rep,name=ShoeNo" json:"ShoeNo,omitempty"`
	GroupID *int32  `protobuf:"varint,3,opt,name=GroupID" json:"GroupID,omitempty"`
	Flag    *int32  `protobuf:"varint,4,opt,name=Flag" json:"Flag,omitempty"`
}

func (x *BJL_DBTableShoeInfo) Reset() {
	*x = BJL_DBTableShoeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BJL_DBTableShoeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BJL_DBTableShoeInfo) ProtoMessage() {}

func (x *BJL_DBTableShoeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BJL_DBTableShoeInfo.ProtoReflect.Descriptor instead.
func (*BJL_DBTableShoeInfo) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{57}
}

func (x *BJL_DBTableShoeInfo) GetTableNo() []int32 {
	if x != nil {
		return x.TableNo
	}
	return nil
}

func (x *BJL_DBTableShoeInfo) GetShoeNo() []int32 {
	if x != nil {
		return x.ShoeNo
	}
	return nil
}

func (x *BJL_DBTableShoeInfo) GetGroupID() int32 {
	if x != nil && x.GroupID != nil {
		return *x.GroupID
	}
	return 0
}

func (x *BJL_DBTableShoeInfo) GetFlag() int32 {
	if x != nil && x.Flag != nil {
		return *x.Flag
	}
	return 0
}

type BJL_DBTableConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 桌號
	TableID         *int32 `protobuf:"varint,1,req,name=TableID" json:"TableID,omitempty"`
	Channel         *int32 `protobuf:"varint,2,req,name=Channel" json:"Channel,omitempty"`
	MinBet          *int32 `protobuf:"varint,3,opt,name=MinBet" json:"MinBet,omitempty"`
	MaxBet          *int32 `protobuf:"varint,4,opt,name=MaxBet" json:"MaxBet,omitempty"`
	TableLimit      *int32 `protobuf:"varint,5,opt,name=TableLimit" json:"TableLimit,omitempty"`
	BankerLimit     *int32 `protobuf:"varint,6,opt,name=BankerLimit" json:"BankerLimit,omitempty"`
	PlayerLimit     *int32 `protobuf:"varint,7,opt,name=PlayerLimit" json:"PlayerLimit,omitempty"`
	BankerPairLimit *int32 `protobuf:"varint,8,opt,name=BankerPairLimit" json:"BankerPairLimit,omitempty"`
	PlayerPairLimit *int32 `protobuf:"varint,9,opt,name=PlayerPairLimit" json:"PlayerPairLimit,omitempty"`
	TieLimit        *int32 `protobuf:"varint,10,opt,name=TieLimit" json:"TieLimit,omitempty"`
	// 座位數
	SeatCount *int32 `protobuf:"varint,11,opt,name=SeatCount" json:"SeatCount,omitempty"`
	// 是否啟用機器人
	EnableRobot *bool `protobuf:"varint,12,opt,name=EnableRobot" json:"EnableRobot,omitempty"`
	// 下注時間
	BetTime *int32 `protobuf:"varint,13,opt,name=BetTime" json:"BetTime,omitempty"`
	// 每隻牌靴使用的撲克牌數量
	PokersPerShoe *int32 `protobuf:"varint,14,opt,name=PokersPerShoe" json:"PokersPerShoe,omitempty"`
	// 每隻牌靴最多可玩的局數，0表示不限制
	GamesPerShoe *int32 `protobuf:"varint,15,opt,name=GamesPerShoe" json:"GamesPerShoe,omitempty"`
	// 牌靴切牌的最小張數
	MinPokerCut *int32 `protobuf:"varint,16,opt,name=MinPokerCut" json:"MinPokerCut,omitempty"`
	// 牌靴切牌的最大張數
	MaxPokerCut *int32 `protobuf:"varint,17,opt,name=MaxPokerCut" json:"MaxPokerCut,omitempty"`
	Flag        *int32 `protobuf:"varint,18,opt,name=Flag" json:"Flag,omitempty"`
}

func (x *BJL_DBTableConfig) Reset() {
	*x = BJL_DBTableConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BJL_DBTableConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BJL_DBTableConfig) ProtoMessage() {}

func (x *BJL_DBTableConfig) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BJL_DBTableConfig.ProtoReflect.Descriptor instead.
func (*BJL_DBTableConfig) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{58}
}

func (x *BJL_DBTableConfig) GetTableID() int32 {
	if x != nil && x.TableID != nil {
		return *x.TableID
	}
	return 0
}

func (x *BJL_DBTableConfig) GetChannel() int32 {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return 0
}

func (x *BJL_DBTableConfig) GetMinBet() int32 {
	if x != nil && x.MinBet != nil {
		return *x.MinBet
	}
	return 0
}

func (x *BJL_DBTableConfig) GetMaxBet() int32 {
	if x != nil && x.MaxBet != nil {
		return *x.MaxBet
	}
	return 0
}

func (x *BJL_DBTableConfig) GetTableLimit() int32 {
	if x != nil && x.TableLimit != nil {
		return *x.TableLimit
	}
	return 0
}

func (x *BJL_DBTableConfig) GetBankerLimit() int32 {
	if x != nil && x.BankerLimit != nil {
		return *x.BankerLimit
	}
	return 0
}

func (x *BJL_DBTableConfig) GetPlayerLimit() int32 {
	if x != nil && x.PlayerLimit != nil {
		return *x.PlayerLimit
	}
	return 0
}

func (x *BJL_DBTableConfig) GetBankerPairLimit() int32 {
	if x != nil && x.BankerPairLimit != nil {
		return *x.BankerPairLimit
	}
	return 0
}

func (x *BJL_DBTableConfig) GetPlayerPairLimit() int32 {
	if x != nil && x.PlayerPairLimit != nil {
		return *x.PlayerPairLimit
	}
	return 0
}

func (x *BJL_DBTableConfig) GetTieLimit() int32 {
	if x != nil && x.TieLimit != nil {
		return *x.TieLimit
	}
	return 0
}

func (x *BJL_DBTableConfig) GetSeatCount() int32 {
	if x != nil && x.SeatCount != nil {
		return *x.SeatCount
	}
	return 0
}

func (x *BJL_DBTableConfig) GetEnableRobot() bool {
	if x != nil && x.EnableRobot != nil {
		return *x.EnableRobot
	}
	return false
}

func (x *BJL_DBTableConfig) GetBetTime() int32 {
	if x != nil && x.BetTime != nil {
		return *x.BetTime
	}
	return 0
}

func (x *BJL_DBTableConfig) GetPokersPerShoe() int32 {
	if x != nil && x.PokersPerShoe != nil {
		return *x.PokersPerShoe
	}
	return 0
}

func (x *BJL_DBTableConfig) GetGamesPerShoe() int32 {
	if x != nil && x.GamesPerShoe != nil {
		return *x.GamesPerShoe
	}
	return 0
}

func (x *BJL_DBTableConfig) GetMinPokerCut() int32 {
	if x != nil && x.MinPokerCut != nil {
		return *x.MinPokerCut
	}
	return 0
}

func (x *BJL_DBTableConfig) GetMaxPokerCut() int32 {
	if x != nil && x.MaxPokerCut != nil {
		return *x.MaxPokerCut
	}
	return 0
}

func (x *BJL_DBTableConfig) GetFlag() int32 {
	if x != nil && x.Flag != nil {
		return *x.Flag
	}
	return 0
}

type DepositActivityData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config   *DZPKHALLDepositActivityConfig         `protobuf:"bytes,1,req,name=Config" json:"Config,omitempty"`
	Rewards  []*DZPKHALLDepositActivityRewardConfig `protobuf:"bytes,2,rep,name=Rewards" json:"Rewards,omitempty"`
	UserData []*DepositActivityUserData             `protobuf:"bytes,3,rep,name=UserData" json:"UserData,omitempty"`
}

func (x *DepositActivityData) Reset() {
	*x = DepositActivityData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepositActivityData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositActivityData) ProtoMessage() {}

func (x *DepositActivityData) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositActivityData.ProtoReflect.Descriptor instead.
func (*DepositActivityData) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{59}
}

func (x *DepositActivityData) GetConfig() *DZPKHALLDepositActivityConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *DepositActivityData) GetRewards() []*DZPKHALLDepositActivityRewardConfig {
	if x != nil {
		return x.Rewards
	}
	return nil
}

func (x *DepositActivityData) GetUserData() []*DepositActivityUserData {
	if x != nil {
		return x.UserData
	}
	return nil
}

type DepositActivityUserData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID         *int32 `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`
	BetAmount      *int64 `protobuf:"varint,2,req,name=BetAmount" json:"BetAmount,omitempty"`
	RechargeAmount *int64 `protobuf:"varint,3,req,name=RechargeAmount" json:"RechargeAmount,omitempty"`
}

func (x *DepositActivityUserData) Reset() {
	*x = DepositActivityUserData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepositActivityUserData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositActivityUserData) ProtoMessage() {}

func (x *DepositActivityUserData) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositActivityUserData.ProtoReflect.Descriptor instead.
func (*DepositActivityUserData) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{60}
}

func (x *DepositActivityUserData) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *DepositActivityUserData) GetBetAmount() int64 {
	if x != nil && x.BetAmount != nil {
		return *x.BetAmount
	}
	return 0
}

func (x *DepositActivityUserData) GetRechargeAmount() int64 {
	if x != nil && x.RechargeAmount != nil {
		return *x.RechargeAmount
	}
	return 0
}

type LHD_DBTableConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 桌號
	TableID    *int32 `protobuf:"varint,1,req,name=TableID" json:"TableID,omitempty"`
	Channel    *int32 `protobuf:"varint,2,req,name=Channel" json:"Channel,omitempty"`
	MinBet     *int32 `protobuf:"varint,3,req,name=MinBet" json:"MinBet,omitempty"`
	MaxBet     *int32 `protobuf:"varint,4,req,name=MaxBet" json:"MaxBet,omitempty"`
	TableLimit *int32 `protobuf:"varint,5,req,name=TableLimit" json:"TableLimit,omitempty"`
	TieLimit   *int32 `protobuf:"varint,6,req,name=TieLimit" json:"TieLimit,omitempty"`
	// 座位數
	SeatCount *int32 `protobuf:"varint,7,req,name=SeatCount" json:"SeatCount,omitempty"`
	// 是否啟用機器人
	EnableRobot *bool `protobuf:"varint,8,req,name=EnableRobot" json:"EnableRobot,omitempty"`
	// 下注時間
	BetTime *int32 `protobuf:"varint,9,req,name=BetTime" json:"BetTime,omitempty"`
	// 每隻牌靴使用的撲克牌數量
	PokersPerShoe *int32 `protobuf:"varint,10,opt,name=PokersPerShoe" json:"PokersPerShoe,omitempty"`
	// 每隻牌靴最多可玩的局數，0表示不限制
	GamesPerShoe *int32 `protobuf:"varint,11,opt,name=GamesPerShoe" json:"GamesPerShoe,omitempty"`
	// 牌靴切牌的最小張數
	MinPokerCut *int32 `protobuf:"varint,12,opt,name=MinPokerCut" json:"MinPokerCut,omitempty"`
	// 牌靴切牌的最大張數
	MaxPokerCut      *int32 `protobuf:"varint,13,opt,name=MaxPokerCut" json:"MaxPokerCut,omitempty"`
	Flag             *int32 `protobuf:"varint,14,opt,name=Flag" json:"Flag,omitempty"`
	DragonTigerLimit *int32 `protobuf:"varint,15,req,name=DragonTigerLimit" json:"DragonTigerLimit,omitempty"`
}

func (x *LHD_DBTableConfig) Reset() {
	*x = LHD_DBTableConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LHD_DBTableConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LHD_DBTableConfig) ProtoMessage() {}

func (x *LHD_DBTableConfig) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LHD_DBTableConfig.ProtoReflect.Descriptor instead.
func (*LHD_DBTableConfig) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{61}
}

func (x *LHD_DBTableConfig) GetTableID() int32 {
	if x != nil && x.TableID != nil {
		return *x.TableID
	}
	return 0
}

func (x *LHD_DBTableConfig) GetChannel() int32 {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return 0
}

func (x *LHD_DBTableConfig) GetMinBet() int32 {
	if x != nil && x.MinBet != nil {
		return *x.MinBet
	}
	return 0
}

func (x *LHD_DBTableConfig) GetMaxBet() int32 {
	if x != nil && x.MaxBet != nil {
		return *x.MaxBet
	}
	return 0
}

func (x *LHD_DBTableConfig) GetTableLimit() int32 {
	if x != nil && x.TableLimit != nil {
		return *x.TableLimit
	}
	return 0
}

func (x *LHD_DBTableConfig) GetTieLimit() int32 {
	if x != nil && x.TieLimit != nil {
		return *x.TieLimit
	}
	return 0
}

func (x *LHD_DBTableConfig) GetSeatCount() int32 {
	if x != nil && x.SeatCount != nil {
		return *x.SeatCount
	}
	return 0
}

func (x *LHD_DBTableConfig) GetEnableRobot() bool {
	if x != nil && x.EnableRobot != nil {
		return *x.EnableRobot
	}
	return false
}

func (x *LHD_DBTableConfig) GetBetTime() int32 {
	if x != nil && x.BetTime != nil {
		return *x.BetTime
	}
	return 0
}

func (x *LHD_DBTableConfig) GetPokersPerShoe() int32 {
	if x != nil && x.PokersPerShoe != nil {
		return *x.PokersPerShoe
	}
	return 0
}

func (x *LHD_DBTableConfig) GetGamesPerShoe() int32 {
	if x != nil && x.GamesPerShoe != nil {
		return *x.GamesPerShoe
	}
	return 0
}

func (x *LHD_DBTableConfig) GetMinPokerCut() int32 {
	if x != nil && x.MinPokerCut != nil {
		return *x.MinPokerCut
	}
	return 0
}

func (x *LHD_DBTableConfig) GetMaxPokerCut() int32 {
	if x != nil && x.MaxPokerCut != nil {
		return *x.MaxPokerCut
	}
	return 0
}

func (x *LHD_DBTableConfig) GetFlag() int32 {
	if x != nil && x.Flag != nil {
		return *x.Flag
	}
	return 0
}

func (x *LHD_DBTableConfig) GetDragonTigerLimit() int32 {
	if x != nil && x.DragonTigerLimit != nil {
		return *x.DragonTigerLimit
	}
	return 0
}

type BJ_DBTableConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 桌號
	TableID    *int32 `protobuf:"varint,1,req,name=TableID" json:"TableID,omitempty"`
	Channel    *int32 `protobuf:"varint,2,req,name=Channel" json:"Channel,omitempty"`
	MinBet     *int32 `protobuf:"varint,3,opt,name=MinBet" json:"MinBet,omitempty"`
	MaxBet     *int32 `protobuf:"varint,4,opt,name=MaxBet" json:"MaxBet,omitempty"`
	TableLimit *int32 `protobuf:"varint,5,opt,name=TableLimit" json:"TableLimit,omitempty"`
	// 座位數
	SeatCount *int32 `protobuf:"varint,6,opt,name=SeatCount" json:"SeatCount,omitempty"`
	// 是否啟用機器人
	EnableRobot *bool `protobuf:"varint,7,opt,name=EnableRobot" json:"EnableRobot,omitempty"`
	// 下注時間
	BetTime *int32 `protobuf:"varint,8,opt,name=BetTime" json:"BetTime,omitempty"`
	// 每隻牌靴使用的撲克牌數量
	PokersPerShoe *int32 `protobuf:"varint,9,opt,name=PokersPerShoe" json:"PokersPerShoe,omitempty"`
	// 每隻牌靴最多可玩的局數，0表示不限制
	GamesPerShoe *int32 `protobuf:"varint,10,opt,name=GamesPerShoe" json:"GamesPerShoe,omitempty"`
	// 牌靴切牌的最小張數
	MinPokerCut *int32 `protobuf:"varint,11,opt,name=MinPokerCut" json:"MinPokerCut,omitempty"`
	// 牌靴切牌的最大張數
	MaxPokerCut *int32 `protobuf:"varint,12,opt,name=MaxPokerCut" json:"MaxPokerCut,omitempty"`
	Flag        *int32 `protobuf:"varint,13,opt,name=Flag" json:"Flag,omitempty"`
}

func (x *BJ_DBTableConfig) Reset() {
	*x = BJ_DBTableConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BJ_DBTableConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BJ_DBTableConfig) ProtoMessage() {}

func (x *BJ_DBTableConfig) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BJ_DBTableConfig.ProtoReflect.Descriptor instead.
func (*BJ_DBTableConfig) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{62}
}

func (x *BJ_DBTableConfig) GetTableID() int32 {
	if x != nil && x.TableID != nil {
		return *x.TableID
	}
	return 0
}

func (x *BJ_DBTableConfig) GetChannel() int32 {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return 0
}

func (x *BJ_DBTableConfig) GetMinBet() int32 {
	if x != nil && x.MinBet != nil {
		return *x.MinBet
	}
	return 0
}

func (x *BJ_DBTableConfig) GetMaxBet() int32 {
	if x != nil && x.MaxBet != nil {
		return *x.MaxBet
	}
	return 0
}

func (x *BJ_DBTableConfig) GetTableLimit() int32 {
	if x != nil && x.TableLimit != nil {
		return *x.TableLimit
	}
	return 0
}

func (x *BJ_DBTableConfig) GetSeatCount() int32 {
	if x != nil && x.SeatCount != nil {
		return *x.SeatCount
	}
	return 0
}

func (x *BJ_DBTableConfig) GetEnableRobot() bool {
	if x != nil && x.EnableRobot != nil {
		return *x.EnableRobot
	}
	return false
}

func (x *BJ_DBTableConfig) GetBetTime() int32 {
	if x != nil && x.BetTime != nil {
		return *x.BetTime
	}
	return 0
}

func (x *BJ_DBTableConfig) GetPokersPerShoe() int32 {
	if x != nil && x.PokersPerShoe != nil {
		return *x.PokersPerShoe
	}
	return 0
}

func (x *BJ_DBTableConfig) GetGamesPerShoe() int32 {
	if x != nil && x.GamesPerShoe != nil {
		return *x.GamesPerShoe
	}
	return 0
}

func (x *BJ_DBTableConfig) GetMinPokerCut() int32 {
	if x != nil && x.MinPokerCut != nil {
		return *x.MinPokerCut
	}
	return 0
}

func (x *BJ_DBTableConfig) GetMaxPokerCut() int32 {
	if x != nil && x.MaxPokerCut != nil {
		return *x.MaxPokerCut
	}
	return 0
}

func (x *BJ_DBTableConfig) GetFlag() int32 {
	if x != nil && x.Flag != nil {
		return *x.Flag
	}
	return 0
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///// 骰寶
type SB_DBCardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableNo   *int32  `protobuf:"varint,1,req,name=TableNo" json:"TableNo,omitempty"`     // 桌號
	Shoe      *int32  `protobuf:"varint,2,req,name=Shoe" json:"Shoe,omitempty"`           // 牌靴
	GameIndex *int32  `protobuf:"varint,3,req,name=GameIndex" json:"GameIndex,omitempty"` // 局數
	Card      *string `protobuf:"bytes,4,req,name=Card" json:"Card,omitempty"`            // 撲克牌花色與數字
	CardNo    *int32  `protobuf:"varint,5,req,name=CardNo" json:"CardNo,omitempty"`       // 撲克牌編號
	Code      *string `protobuf:"bytes,6,opt,name=Code" json:"Code,omitempty"`            //
	Encode    *string `protobuf:"bytes,7,opt,name=Encode" json:"Encode,omitempty"`        //
	IsOpen    *bool   `protobuf:"varint,8,opt,name=IsOpen" json:"IsOpen,omitempty"`       // 是否開牌
	GameSN    *string `protobuf:"bytes,9,req,name=GameSN" json:"GameSN,omitempty"`        // 遊戲編號
	GroupID   *int32  `protobuf:"varint,10,req,name=GroupID" json:"GroupID,omitempty"`
}

func (x *SB_DBCardInfo) Reset() {
	*x = SB_DBCardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SB_DBCardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SB_DBCardInfo) ProtoMessage() {}

func (x *SB_DBCardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SB_DBCardInfo.ProtoReflect.Descriptor instead.
func (*SB_DBCardInfo) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{63}
}

func (x *SB_DBCardInfo) GetTableNo() int32 {
	if x != nil && x.TableNo != nil {
		return *x.TableNo
	}
	return 0
}

func (x *SB_DBCardInfo) GetShoe() int32 {
	if x != nil && x.Shoe != nil {
		return *x.Shoe
	}
	return 0
}

func (x *SB_DBCardInfo) GetGameIndex() int32 {
	if x != nil && x.GameIndex != nil {
		return *x.GameIndex
	}
	return 0
}

func (x *SB_DBCardInfo) GetCard() string {
	if x != nil && x.Card != nil {
		return *x.Card
	}
	return ""
}

func (x *SB_DBCardInfo) GetCardNo() int32 {
	if x != nil && x.CardNo != nil {
		return *x.CardNo
	}
	return 0
}

func (x *SB_DBCardInfo) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

func (x *SB_DBCardInfo) GetEncode() string {
	if x != nil && x.Encode != nil {
		return *x.Encode
	}
	return ""
}

func (x *SB_DBCardInfo) GetIsOpen() bool {
	if x != nil && x.IsOpen != nil {
		return *x.IsOpen
	}
	return false
}

func (x *SB_DBCardInfo) GetGameSN() string {
	if x != nil && x.GameSN != nil {
		return *x.GameSN
	}
	return ""
}

func (x *SB_DBCardInfo) GetGroupID() int32 {
	if x != nil && x.GroupID != nil {
		return *x.GroupID
	}
	return 0
}

type SB_DBCardInfoList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cards []*SB_DBCardInfo `protobuf:"bytes,1,rep,name=cards" json:"cards,omitempty"`
}

func (x *SB_DBCardInfoList) Reset() {
	*x = SB_DBCardInfoList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SB_DBCardInfoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SB_DBCardInfoList) ProtoMessage() {}

func (x *SB_DBCardInfoList) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SB_DBCardInfoList.ProtoReflect.Descriptor instead.
func (*SB_DBCardInfoList) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{64}
}

func (x *SB_DBCardInfoList) GetCards() []*SB_DBCardInfo {
	if x != nil {
		return x.Cards
	}
	return nil
}

type SB_DBPokerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameSN     *string `protobuf:"bytes,1,req,name=GameSN" json:"GameSN,omitempty"`          // 遊戲編號
	TotalCount *int32  `protobuf:"varint,2,req,name=TotalCount" json:"TotalCount,omitempty"` // 總牌數
	UseCount   *int32  `protobuf:"varint,3,req,name=UseCount" json:"UseCount,omitempty"`     // 使用牌數
	CurrCount  *int32  `protobuf:"varint,4,req,name=CurrCount" json:"CurrCount,omitempty"`   // 目前開啟牌數
	Games      *int32  `protobuf:"varint,5,req,name=Games" json:"Games,omitempty"`           // 目前局數
	CreateTime *int64  `protobuf:"varint,6,req,name=CreateTime" json:"CreateTime,omitempty"` // 建立時間
	GroupID    *int32  `protobuf:"varint,7,req,name=GroupID" json:"GroupID,omitempty"`
}

func (x *SB_DBPokerInfo) Reset() {
	*x = SB_DBPokerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SB_DBPokerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SB_DBPokerInfo) ProtoMessage() {}

func (x *SB_DBPokerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SB_DBPokerInfo.ProtoReflect.Descriptor instead.
func (*SB_DBPokerInfo) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{65}
}

func (x *SB_DBPokerInfo) GetGameSN() string {
	if x != nil && x.GameSN != nil {
		return *x.GameSN
	}
	return ""
}

func (x *SB_DBPokerInfo) GetTotalCount() int32 {
	if x != nil && x.TotalCount != nil {
		return *x.TotalCount
	}
	return 0
}

func (x *SB_DBPokerInfo) GetUseCount() int32 {
	if x != nil && x.UseCount != nil {
		return *x.UseCount
	}
	return 0
}

func (x *SB_DBPokerInfo) GetCurrCount() int32 {
	if x != nil && x.CurrCount != nil {
		return *x.CurrCount
	}
	return 0
}

func (x *SB_DBPokerInfo) GetGames() int32 {
	if x != nil && x.Games != nil {
		return *x.Games
	}
	return 0
}

func (x *SB_DBPokerInfo) GetCreateTime() int64 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

func (x *SB_DBPokerInfo) GetGroupID() int32 {
	if x != nil && x.GroupID != nil {
		return *x.GroupID
	}
	return 0
}

type SB_DBTableShoeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableNo []int32 `protobuf:"varint,1,rep,name=TableNo" json:"TableNo,omitempty"`
	ShoeNo  []int32 `protobuf:"varint,2,rep,name=ShoeNo" json:"ShoeNo,omitempty"`
}

func (x *SB_DBTableShoeInfo) Reset() {
	*x = SB_DBTableShoeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SB_DBTableShoeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SB_DBTableShoeInfo) ProtoMessage() {}

func (x *SB_DBTableShoeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SB_DBTableShoeInfo.ProtoReflect.Descriptor instead.
func (*SB_DBTableShoeInfo) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{66}
}

func (x *SB_DBTableShoeInfo) GetTableNo() []int32 {
	if x != nil {
		return x.TableNo
	}
	return nil
}

func (x *SB_DBTableShoeInfo) GetShoeNo() []int32 {
	if x != nil {
		return x.ShoeNo
	}
	return nil
}

type SB_DBTableConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 桌號
	TableID         *int32 `protobuf:"varint,1,req,name=TableID" json:"TableID,omitempty"`
	Channel         *int32 `protobuf:"varint,2,req,name=Channel" json:"Channel,omitempty"`
	MinBet          *int32 `protobuf:"varint,3,opt,name=MinBet" json:"MinBet,omitempty"`
	MaxBet          *int32 `protobuf:"varint,4,opt,name=MaxBet" json:"MaxBet,omitempty"`
	TableLimit      *int32 `protobuf:"varint,5,opt,name=TableLimit" json:"TableLimit,omitempty"`
	BankerLimit     *int32 `protobuf:"varint,6,opt,name=BankerLimit" json:"BankerLimit,omitempty"`
	PlayerLimit     *int32 `protobuf:"varint,7,opt,name=PlayerLimit" json:"PlayerLimit,omitempty"`
	BankerPairLimit *int32 `protobuf:"varint,8,opt,name=BankerPairLimit" json:"BankerPairLimit,omitempty"`
	PlayerPairLimit *int32 `protobuf:"varint,9,opt,name=PlayerPairLimit" json:"PlayerPairLimit,omitempty"`
	TieLimit        *int32 `protobuf:"varint,10,opt,name=TieLimit" json:"TieLimit,omitempty"`
	// 座位數
	SeatCount *int32 `protobuf:"varint,11,opt,name=SeatCount" json:"SeatCount,omitempty"`
	// 是否啟用機器人
	EnableRobot *bool `protobuf:"varint,12,opt,name=EnableRobot" json:"EnableRobot,omitempty"`
	// 下注時間
	BetTime *int32 `protobuf:"varint,13,opt,name=BetTime" json:"BetTime,omitempty"`
	// 每隻牌靴使用的撲克牌數量
	PokersPerShoe *int32 `protobuf:"varint,14,opt,name=PokersPerShoe" json:"PokersPerShoe,omitempty"`
	// 每隻牌靴最多可玩的局數，0表示不限制
	GamesPerShoe *int32 `protobuf:"varint,15,opt,name=GamesPerShoe" json:"GamesPerShoe,omitempty"`
	// 牌靴切牌的最小張數
	MinPokerCut *int32 `protobuf:"varint,16,opt,name=MinPokerCut" json:"MinPokerCut,omitempty"`
	// 牌靴切牌的最大張數
	MaxPokerCut *int32 `protobuf:"varint,17,opt,name=MaxPokerCut" json:"MaxPokerCut,omitempty"`
}

func (x *SB_DBTableConfig) Reset() {
	*x = SB_DBTableConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SB_DBTableConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SB_DBTableConfig) ProtoMessage() {}

func (x *SB_DBTableConfig) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SB_DBTableConfig.ProtoReflect.Descriptor instead.
func (*SB_DBTableConfig) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{67}
}

func (x *SB_DBTableConfig) GetTableID() int32 {
	if x != nil && x.TableID != nil {
		return *x.TableID
	}
	return 0
}

func (x *SB_DBTableConfig) GetChannel() int32 {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return 0
}

func (x *SB_DBTableConfig) GetMinBet() int32 {
	if x != nil && x.MinBet != nil {
		return *x.MinBet
	}
	return 0
}

func (x *SB_DBTableConfig) GetMaxBet() int32 {
	if x != nil && x.MaxBet != nil {
		return *x.MaxBet
	}
	return 0
}

func (x *SB_DBTableConfig) GetTableLimit() int32 {
	if x != nil && x.TableLimit != nil {
		return *x.TableLimit
	}
	return 0
}

func (x *SB_DBTableConfig) GetBankerLimit() int32 {
	if x != nil && x.BankerLimit != nil {
		return *x.BankerLimit
	}
	return 0
}

func (x *SB_DBTableConfig) GetPlayerLimit() int32 {
	if x != nil && x.PlayerLimit != nil {
		return *x.PlayerLimit
	}
	return 0
}

func (x *SB_DBTableConfig) GetBankerPairLimit() int32 {
	if x != nil && x.BankerPairLimit != nil {
		return *x.BankerPairLimit
	}
	return 0
}

func (x *SB_DBTableConfig) GetPlayerPairLimit() int32 {
	if x != nil && x.PlayerPairLimit != nil {
		return *x.PlayerPairLimit
	}
	return 0
}

func (x *SB_DBTableConfig) GetTieLimit() int32 {
	if x != nil && x.TieLimit != nil {
		return *x.TieLimit
	}
	return 0
}

func (x *SB_DBTableConfig) GetSeatCount() int32 {
	if x != nil && x.SeatCount != nil {
		return *x.SeatCount
	}
	return 0
}

func (x *SB_DBTableConfig) GetEnableRobot() bool {
	if x != nil && x.EnableRobot != nil {
		return *x.EnableRobot
	}
	return false
}

func (x *SB_DBTableConfig) GetBetTime() int32 {
	if x != nil && x.BetTime != nil {
		return *x.BetTime
	}
	return 0
}

func (x *SB_DBTableConfig) GetPokersPerShoe() int32 {
	if x != nil && x.PokersPerShoe != nil {
		return *x.PokersPerShoe
	}
	return 0
}

func (x *SB_DBTableConfig) GetGamesPerShoe() int32 {
	if x != nil && x.GamesPerShoe != nil {
		return *x.GamesPerShoe
	}
	return 0
}

func (x *SB_DBTableConfig) GetMinPokerCut() int32 {
	if x != nil && x.MinPokerCut != nil {
		return *x.MinPokerCut
	}
	return 0
}

func (x *SB_DBTableConfig) GetMaxPokerCut() int32 {
	if x != nil && x.MaxPokerCut != nil {
		return *x.MaxPokerCut
	}
	return 0
}

type GS_BetDetailLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        *int32  `protobuf:"varint,1,req,name=UserId" json:"UserId,omitempty"`
	RoundId       *string `protobuf:"bytes,2,req,name=RoundId" json:"RoundId,omitempty"`
	GameId        *int32  `protobuf:"varint,3,req,name=GameId" json:"GameId,omitempty"`
	BetAmount     *int64  `protobuf:"varint,4,req,name=BetAmount" json:"BetAmount,omitempty"`
	WinAmount     *int64  `protobuf:"varint,5,req,name=WinAmount" json:"WinAmount,omitempty"`
	Result        *string `protobuf:"bytes,6,req,name=Result" json:"Result,omitempty"`
	GroupID       *int32  `protobuf:"varint,7,req,name=GroupID" json:"GroupID,omitempty"`
	TableNo       *int32  `protobuf:"varint,8,req,name=TableNo" json:"TableNo,omitempty"`
	BetDetail     *string `protobuf:"bytes,9,req,name=BetDetail" json:"BetDetail,omitempty"`
	ResultDetail  *string `protobuf:"bytes,10,req,name=ResultDetail" json:"ResultDetail,omitempty"`
	BalanceBefore *int64  `protobuf:"varint,11,req,name=BalanceBefore" json:"BalanceBefore,omitempty"`
	BalanceAfter  *int64  `protobuf:"varint,12,req,name=BalanceAfter" json:"BalanceAfter,omitempty"`
}

func (x *GS_BetDetailLog) Reset() {
	*x = GS_BetDetailLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DBServerMsg_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GS_BetDetailLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GS_BetDetailLog) ProtoMessage() {}

func (x *GS_BetDetailLog) ProtoReflect() protoreflect.Message {
	mi := &file_DBServerMsg_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GS_BetDetailLog.ProtoReflect.Descriptor instead.
func (*GS_BetDetailLog) Descriptor() ([]byte, []int) {
	return file_DBServerMsg_proto_rawDescGZIP(), []int{68}
}

func (x *GS_BetDetailLog) GetUserId() int32 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *GS_BetDetailLog) GetRoundId() string {
	if x != nil && x.RoundId != nil {
		return *x.RoundId
	}
	return ""
}

func (x *GS_BetDetailLog) GetGameId() int32 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *GS_BetDetailLog) GetBetAmount() int64 {
	if x != nil && x.BetAmount != nil {
		return *x.BetAmount
	}
	return 0
}

func (x *GS_BetDetailLog) GetWinAmount() int64 {
	if x != nil && x.WinAmount != nil {
		return *x.WinAmount
	}
	return 0
}

func (x *GS_BetDetailLog) GetResult() string {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return ""
}

func (x *GS_BetDetailLog) GetGroupID() int32 {
	if x != nil && x.GroupID != nil {
		return *x.GroupID
	}
	return 0
}

func (x *GS_BetDetailLog) GetTableNo() int32 {
	if x != nil && x.TableNo != nil {
		return *x.TableNo
	}
	return 0
}

func (x *GS_BetDetailLog) GetBetDetail() string {
	if x != nil && x.BetDetail != nil {
		return *x.BetDetail
	}
	return ""
}

func (x *GS_BetDetailLog) GetResultDetail() string {
	if x != nil && x.ResultDetail != nil {
		return *x.ResultDetail
	}
	return ""
}

func (x *GS_BetDetailLog) GetBalanceBefore() int64 {
	if x != nil && x.BalanceBefore != nil {
		return *x.BalanceBefore
	}
	return 0
}

func (x *GS_BetDetailLog) GetBalanceAfter() int64 {
	if x != nil && x.BalanceAfter != nil {
		return *x.BalanceAfter
	}
	return 0
}

var File_DBServerMsg_proto protoreflect.FileDescriptor

var file_DBServerMsg_proto_rawDesc = []byte{
	0x0a, 0x11, 0x44, 0x42, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x08, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x48,
	0x61, 0x6c, 0x6c, 0x4d, 0x73, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x21, 0x0a, 0x0b,
	0x44, 0x42, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0xa7, 0x01, 0x0a, 0x0f, 0x48, 0x61, 0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x12,
	0x1e, 0x0a, 0x0a, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x41, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x0a, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x41, 0x64, 0x64, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x48, 0x74, 0x74, 0x70, 0x41, 0x64, 0x64, 0x72, 0x18, 0x04, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x08, 0x48, 0x74, 0x74, 0x70, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x4c,
	0x69, 0x61, 0x6e, 0x79, 0x75, 0x6e, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x4c, 0x69, 0x61, 0x6e, 0x79, 0x75, 0x6e, 0x49, 0x44, 0x22, 0x8a, 0x01, 0x0a, 0x12, 0x48, 0x61,
	0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x4f, 0x53, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x4f, 0x53, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x9b, 0x02, 0x0a, 0x0f, 0x47, 0x61, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x53, 0x68, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x08, 0x53, 0x68, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x18, 0x05, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x41, 0x64, 0x64, 0x72, 0x18, 0x06, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x07, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x74,
	0x74, 0x70, 0x41, 0x64, 0x64, 0x72, 0x18, 0x08, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x48, 0x74,
	0x74, 0x70, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x69, 0x61, 0x6e, 0x79, 0x75,
	0x6e, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4c, 0x69, 0x61, 0x6e, 0x79,
	0x75, 0x6e, 0x49, 0x44, 0x22, 0xc8, 0x01, 0x0a, 0x12, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x6e, 0x64,
	0x72, 0x6f, 0x69, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x4f, 0x53, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x4f, 0x53, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0xb4, 0x04, 0x0a, 0x10, 0x48, 0x35, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x44, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x48, 0x44, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x48, 0x44, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x48, 0x44,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x69, 0x74, 0x65, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x53, 0x69, 0x74, 0x65, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x49, 0x44, 0x18, 0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x75, 0x6e, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x42, 0x75, 0x6e, 0x6c, 0x64, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03,
	0x56, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x56, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x02, 0x28, 0x03, 0x52, 0x10, 0x54, 0x68,
	0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x30,
	0x0a, 0x13, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x53, 0x74, 0x72, 0x18, 0x0d, 0x20, 0x02, 0x28, 0x09, 0x52, 0x13, 0x54, 0x68, 0x69,
	0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x53, 0x74, 0x72,
	0x12, 0x2e, 0x0a, 0x12, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0e, 0x20, 0x02, 0x28, 0x09, 0x52, 0x12, 0x54, 0x68,
	0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x32, 0x0a, 0x14, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x02, 0x28, 0x03, 0x52, 0x14,
	0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x42, 0x72, 0x6f, 0x77, 0x73,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65,
	0x72, 0x56, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x72, 0x6f, 0x77,
	0x73, 0x65, 0x72, 0x56, 0x65, 0x72, 0x22, 0xec, 0x03, 0x0a, 0x12, 0x4c, 0x6f, 0x67, 0x6f, 0x75,
	0x74, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x61, 0x78,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x54, 0x61,
	0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x57, 0x69, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x57, 0x69, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x4c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x44, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x09, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x0a, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x48,
	0x44, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x48, 0x44, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x44, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x06, 0x48, 0x44, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x47,
	0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x47,
	0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49,
	0x44, 0x18, 0x0d, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x12,
	0x1a, 0x0a, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x0f, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x0a, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x10,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x0f, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0xa3, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03,
	0x52, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x54, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x4d, 0x0a, 0x07, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x50, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x65, 0x63, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x03, 0x53, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x65, 0x6d, 0x6f, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x4d, 0x65, 0x6d, 0x6f, 0x22, 0x2b, 0x0a, 0x0b, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x49, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x50, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x49, 0x50,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x81, 0x02, 0x0a, 0x07, 0x44, 0x65, 0x61, 0x6c,
	0x4c, 0x6f, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x20, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0d, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x65,
	0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x47, 0x61, 0x6d, 0x65, 0x45,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x47, 0x61,
	0x6d, 0x65, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x61, 0x6d,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x47, 0x61, 0x6d,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x54, 0x61, 0x78, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x69, 0x61, 0x6e, 0x79, 0x75, 0x6e, 0x49, 0x44,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4c, 0x69, 0x61, 0x6e, 0x79, 0x75, 0x6e, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x18, 0x08, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x22, 0xc4, 0x01, 0x0a, 0x0a,
	0x4c, 0x6f, 0x67, 0x6f, 0x6e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x11, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x69, 0x6e, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0e, 0x4d, 0x69,
	0x6e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e,
	0x4d, 0x61, 0x78, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x02, 0x28, 0x03, 0x52, 0x0e, 0x4d, 0x61, 0x78, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x69, 0x61, 0x6e, 0x79, 0x75, 0x6e, 0x49,
	0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4c, 0x69, 0x61, 0x6e, 0x79, 0x75, 0x6e,
	0x49, 0x44, 0x22, 0xc1, 0x02, 0x0a, 0x09, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x46, 0x61, 0x63, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x06, 0x46, 0x61, 0x63, 0x65, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x65, 0x78, 0x18,
	0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x53, 0x65, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x61,
	0x73, 0x68, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0a,
	0x43, 0x61, 0x73, 0x68, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x57, 0x69,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x57, 0x69,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x6f, 0x73, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x4c, 0x6f, 0x73, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x09, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x44, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x49, 0x44, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0c, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x60, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x6f, 0x6e, 0x52,
	0x6f, 0x62, 0x6f, 0x74, 0x52, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x6f, 0x62, 0x6f, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x52, 0x6f, 0x62,
	0x6f, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x22, 0x4b, 0x0a, 0x0b, 0x4c, 0x6f, 0x67, 0x6f,
	0x75, 0x74, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0b, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x94, 0x01, 0x0a, 0x0e, 0x48, 0x61, 0x6c, 0x6c, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x41, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x04, 0x41, 0x64, 0x64, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6e, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x4c, 0x69, 0x61, 0x6e, 0x79, 0x75, 0x6e, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x4c, 0x69, 0x61, 0x6e, 0x79, 0x75, 0x6e, 0x49, 0x44, 0x22, 0x7b, 0x0a, 0x13,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x47, 0x61, 0x6d, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x56,
	0x47, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x56, 0x47,
	0x61, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x61, 0x73, 0x68, 0x4e, 0x75, 0x6d,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x43, 0x61, 0x73, 0x68, 0x4e, 0x75, 0x6d, 0x12,
	0x18, 0x0a, 0x07, 0x49, 0x6e, 0x4f, 0x72, 0x4f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x07, 0x49, 0x6e, 0x4f, 0x72, 0x4f, 0x75, 0x74, 0x22, 0x5f, 0x0a, 0x16, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x75, 0x76, 0x67, 0x69, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x47, 0x61, 0x6d, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x75, 0x76, 0x67, 0x69, 0x22, 0xc1, 0x01, 0x0a, 0x0b, 0x47,
	0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x44, 0x65, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x4c, 0x6f, 0x67, 0x50, 0x6b, 0x18, 0x06, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x6f, 0x67,
	0x50, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x07,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x48,
	0x0a, 0x0c, 0x52, 0x65, 0x71, 0x55, 0x73, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x0b, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x6e, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x14, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xe5, 0x01, 0x0a, 0x17, 0x43, 0x70, 0x47,
	0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18,
	0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0c,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x02, 0x28, 0x03, 0x52, 0x06, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x06, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0xfb, 0x01, 0x0a, 0x15, 0x43, 0x70, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x0b, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22,
	0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x4d,
	0x73, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4e,
	0x0a, 0x10, 0x43, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x22, 0x99,
	0x01, 0x0a, 0x13, 0x43, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x64, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x4d,
	0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x36, 0x0a, 0x0c, 0x43, 0x70,
	0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26, 0x0a, 0x03, 0x52, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x70, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x52,
	0x65, 0x73, 0x22, 0xdc, 0x01, 0x0a, 0x0a, 0x43, 0x70, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x69, 0x67, 0x6e, 0x4b,
	0x65, 0x79, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x53, 0x69, 0x67, 0x6e, 0x4b, 0x65,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x04, 0x50, 0x61, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44,
	0x18, 0x06, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x44, 0x18, 0x07, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x0a, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x44, 0x12,
	0x20, 0x0a, 0x0b, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0x6b, 0x0a, 0x13, 0x53, 0x69, 0x67, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x74, 0x12, 0x29, 0x0a, 0x03, 0x43, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x50, 0x72, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x03,
	0x43, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x04, 0x50, 0x6f, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x04, 0x50, 0x6f, 0x6f, 0x6c, 0x22, 0x65,
	0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x50, 0x72, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x10, 0x0a, 0x03, 0x44, 0x61, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x44, 0x61,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x03, 0x52, 0x06, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x10, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x55, 0x0a, 0x0b, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79,
	0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x06, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x07, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x22, 0x58, 0x0a, 0x14,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x73, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f,
	0x54, 0x6f, 0x64, 0x61, 0x79, 0x43, 0x6f, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0f, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x43, 0x6f, 0x73, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x2c, 0x0a, 0x12, 0x4c, 0x6f, 0x61, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x50, 0x72, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x22, 0xc2, 0x06, 0x0a, 0x12, 0x4c, 0x6f, 0x61, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x69, 0x67, 0x6e, 0x50, 0x72, 0x6f, 0x52, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x4c,
	0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x0c, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x44, 0x61, 0x79, 0x4f, 0x6e, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0c, 0x44, 0x61, 0x79, 0x4f, 0x6e, 0x65, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x61, 0x79, 0x4f, 0x6e, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0b, 0x44, 0x61, 0x79, 0x4f, 0x6e, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x61, 0x79, 0x54, 0x77, 0x6f, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0c, 0x44, 0x61, 0x79,
	0x54, 0x77, 0x6f, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x61, 0x79,
	0x54, 0x77, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0b,
	0x44, 0x61, 0x79, 0x54, 0x77, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x44,
	0x61, 0x79, 0x54, 0x68, 0x72, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x0e, 0x44, 0x61, 0x79, 0x54, 0x68, 0x72, 0x65, 0x65, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x61, 0x79, 0x54, 0x68, 0x72, 0x65, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0d, 0x44, 0x61, 0x79, 0x54,
	0x68, 0x72, 0x65, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x61, 0x79,
	0x46, 0x6f, 0x75, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x0d, 0x44, 0x61, 0x79, 0x46, 0x6f, 0x75, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x44, 0x61, 0x79, 0x46, 0x6f, 0x75, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x09, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0c, 0x44, 0x61, 0x79, 0x46, 0x6f, 0x75, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x61, 0x79, 0x46, 0x69, 0x76, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0d, 0x44, 0x61, 0x79, 0x46,
	0x69, 0x76, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x61, 0x79,
	0x46, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x0c, 0x44, 0x61, 0x79, 0x46, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x44, 0x61, 0x79, 0x53, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x0c, 0x44, 0x61, 0x79, 0x53, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x61, 0x79, 0x53, 0x69, 0x78, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x0d, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0b, 0x44, 0x61, 0x79, 0x53, 0x69, 0x78, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x61, 0x79, 0x53, 0x65, 0x76, 0x65, 0x6e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0e, 0x44, 0x61, 0x79,
	0x53, 0x65, 0x76, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x44,
	0x61, 0x79, 0x53, 0x65, 0x76, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x0d, 0x44, 0x61, 0x79, 0x53, 0x65, 0x76, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x69, 0x67, 0x6e, 0x44, 0x61, 0x79, 0x18, 0x10, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x07, 0x53, 0x69, 0x67, 0x6e, 0x44, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x11, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x12,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x4d, 0x73, 0x67, 0x12, 0x31, 0x0a, 0x07, 0x53, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6e, 0x18, 0x15,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x50, 0x72, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x53,
	0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x04, 0x50, 0x6f, 0x6f, 0x6c, 0x18, 0x16,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x04, 0x50, 0x6f, 0x6f,
	0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x73, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x47, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x47, 0x22, 0x40, 0x0a, 0x14, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x44, 0x61, 0x79,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x44, 0x61, 0x79, 0x22, 0xea, 0x01, 0x0a, 0x14,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x44, 0x61, 0x79, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x03, 0x44, 0x61, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x4c, 0x47, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x4c, 0x47, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x4c, 0x6f, 0x74, 0x74, 0x65,
	0x72, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x65, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x53,
	0x69, 0x67, 0x6e, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x41,
	0x64, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09,
	0x41, 0x64, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22,
	0xc5, 0x01, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x4c, 0x6f, 0x74, 0x74, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4d, 0x73,
	0x67, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x61, 0x6e,
	0x6b, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x42,
	0x61, 0x6e, 0x6b, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x64, 0x64,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x41, 0x64,
	0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x07, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a,
	0x07, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x47, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x47, 0x22, 0x47, 0x0a, 0x11, 0x4c, 0x6f, 0x61, 0x64, 0x48,
	0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x08,
	0x43, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x70, 0x47, 0x61, 0x6d, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x08, 0x43, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x22, 0x2c, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x75, 0x72, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0xda,
	0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x75, 0x72, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a,
	0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x4d, 0x73, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x07, 0x54, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x54, 0x75,
	0x72, 0x6e, 0x43, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x08, 0x54, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x73,
	0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x08, 0x54, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x22, 0x6e, 0x0a, 0x0a, 0x54,
	0x75, 0x72, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x75, 0x72,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x54, 0x75, 0x72,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x06, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x86, 0x01, 0x0a, 0x0e,
	0x54, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26,
	0x0a, 0x0e, 0x54, 0x75, 0x72, 0x6e, 0x53, 0x69, 0x6c, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0e, 0x54, 0x75, 0x72, 0x6e, 0x53, 0x69, 0x6c, 0x76,
	0x65, 0x72, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x75, 0x72, 0x6e, 0x47, 0x6f,
	0x6c, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0c, 0x54, 0x75,
	0x72, 0x6e, 0x47, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x75,
	0x72, 0x6e, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x0f, 0x54, 0x75, 0x72, 0x6e, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64,
	0x43, 0x6f, 0x73, 0x74, 0x22, 0x2f, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x43, 0x4c, 0x54, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x97, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x43, 0x4c, 0x54, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4d,
	0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4d, 0x73, 0x67, 0x12, 0x20, 0x0a,
	0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x43, 0x6f, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x5e, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x54, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x54, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22,
	0xa8, 0x01, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x54, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x54, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x4d, 0x73, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x52, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf7, 0x01, 0x0a, 0x10, 0x4c,
	0x75, 0x63, 0x6b, 0x79, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x34, 0x0a, 0x07, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x75, 0x63, 0x6b,
	0x79, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x07, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x65,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x57, 0x68, 0x65, 0x65,
	0x6c, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x50, 0x72,
	0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6e, 0x65, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x5a, 0x50, 0x4b, 0x48, 0x41, 0x4c, 0x4c, 0x4c, 0x75, 0x63,
	0x6b, 0x79, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x74, 0x52, 0x07, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x22, 0xac, 0x02, 0x0a, 0x10, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x57, 0x68,
	0x65, 0x65, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x0c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x0b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x07, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6f, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x1e, 0x0a, 0x0a, 0x42, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x0a, 0x42, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x09, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x22, 0xc5, 0x01, 0x0a, 0x15, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x57, 0x68, 0x65,
	0x65, 0x6c, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x08, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x50, 0x72, 0x6f,
	0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x10, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x62,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x14, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x18,
	0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x14, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x57, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x22, 0xaf, 0x01, 0x0a, 0x13,
	0x4c, 0x75, 0x63, 0x6b, 0x79, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x70, 0x69, 0x6e, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x53, 0x70, 0x69, 0x6e, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x05,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x22, 0x8c, 0x01,
	0x0a, 0x12, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x70, 0x69, 0x6e, 0x57, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x53, 0x70, 0x69, 0x6e, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x53, 0x70, 0x69, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x61, 0x6e, 0x53, 0x70, 0x69, 0x6e, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x07, 0x43, 0x61, 0x6e, 0x53, 0x70, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x2f, 0x0a, 0x13,
	0x4c, 0x75, 0x63, 0x6b, 0x79, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x44, 0x42, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x22, 0x44, 0x0a,
	0x13, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x46, 0x6f, 0x72, 0x63, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x75,
	0x63, 0x6b, 0x79, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x04, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x55, 0x0a, 0x0f, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x57, 0x68, 0x65, 0x65,
	0x6c, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x02, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x08, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x44, 0x22, 0x86, 0x01, 0x0a, 0x0e, 0x42,
	0x4a, 0x4c, 0x5f, 0x44, 0x42, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a,
	0x09, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x09, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x43,
	0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x43, 0x61, 0x72, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x06, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x45,
	0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x45, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0xf8, 0x01, 0x0a, 0x12, 0x42, 0x4a, 0x4c, 0x5f, 0x44, 0x42, 0x43, 0x61,
	0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x05, 0x63, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x65, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x4a, 0x4c, 0x5f, 0x44, 0x42, 0x43, 0x61, 0x72, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x68, 0x6f, 0x65, 0x4e, 0x6f, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x53, 0x68, 0x6f, 0x65, 0x4e, 0x6f, 0x12, 0x18, 0x0a, 0x07,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x4e,
	0x18, 0x05, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x4e, 0x12, 0x16,
	0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x06, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06,
	0x47, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x73, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x49, 0x73,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x6c,
	0x61, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0xe7,
	0x01, 0x0a, 0x0f, 0x42, 0x4a, 0x4c, 0x5f, 0x44, 0x42, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x4e, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x4e, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x55, 0x73,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x75, 0x72, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x43, 0x75, 0x72, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x05, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x07, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x75, 0x0a, 0x13, 0x42, 0x4a, 0x4c, 0x5f,
	0x44, 0x42, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x68, 0x6f, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x18, 0x0a, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x68, 0x6f,
	0x65, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x53, 0x68, 0x6f, 0x65, 0x4e,
	0x6f, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x46,
	0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22,
	0xc7, 0x04, 0x0a, 0x11, 0x42, 0x4a, 0x4c, 0x5f, 0x44, 0x42, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x12,
	0x18, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x69, 0x6e,
	0x42, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4d, 0x69, 0x6e, 0x42, 0x65,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x61, 0x78, 0x42, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x4d, 0x61, 0x78, 0x42, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x6e,
	0x6b, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x28, 0x0a,
	0x0f, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x50, 0x61,
	0x69, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x50, 0x61, 0x69, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x69, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x54, 0x69, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x53, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x53, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x42, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x42, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x6f, 0x6b, 0x65, 0x72,
	0x73, 0x50, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x50, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x50, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x68, 0x6f,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x69, 0x6e, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x75, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x4d, 0x69, 0x6e, 0x50, 0x6f, 0x6b, 0x65, 0x72,
	0x43, 0x75, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x78, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x43,
	0x75, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x4d, 0x61, 0x78, 0x50, 0x6f, 0x6b,
	0x65, 0x72, 0x43, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0xde, 0x01, 0x0a, 0x13, 0x44, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x3f, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x5a, 0x50,
	0x4b, 0x48, 0x41, 0x4c, 0x4c, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x47, 0x0a, 0x07, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x5a, 0x50, 0x4b, 0x48, 0x41, 0x4c, 0x4c, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x07, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x3d, 0x0a, 0x08, 0x55,
	0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x22, 0x77, 0x0a, 0x17, 0x44, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a,
	0x09, 0x42, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03,
	0x52, 0x09, 0x42, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x52,
	0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x0e, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xdb, 0x03, 0x0a, 0x11, 0x4c, 0x48, 0x44, 0x5f, 0x44, 0x42, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x16, 0x0a,
	0x06, 0x4d, 0x69, 0x6e, 0x42, 0x65, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x4d,
	0x69, 0x6e, 0x42, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x61, 0x78, 0x42, 0x65, 0x74, 0x18,
	0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x4d, 0x61, 0x78, 0x42, 0x65, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x0a, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x54, 0x69, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x08, 0x54, 0x69, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x61,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x53, 0x65,
	0x61, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x18, 0x08, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0b, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x65, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x42, 0x65, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x50, 0x65, 0x72,
	0x53, 0x68, 0x6f, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x50, 0x6f, 0x6b, 0x65,
	0x72, 0x73, 0x50, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x47, 0x61, 0x6d,
	0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x4d, 0x69, 0x6e, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x75, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x4d, 0x69, 0x6e, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x75, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x78, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x75, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x4d, 0x61, 0x78, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x75,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2a, 0x0a, 0x10, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x54,
	0x69, 0x67, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0f, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x10, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x54, 0x69, 0x67, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x22, 0x92, 0x03, 0x0a, 0x10, 0x42, 0x4a, 0x5f, 0x44, 0x42, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44,
	0x12, 0x18, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x69,
	0x6e, 0x42, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4d, 0x69, 0x6e, 0x42,
	0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x61, 0x78, 0x42, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x4d, 0x61, 0x78, 0x42, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65,
	0x61, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53,
	0x65, 0x61, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x65,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x42, 0x65, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x50, 0x65,
	0x72, 0x53, 0x68, 0x6f, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x50, 0x6f, 0x6b,
	0x65, 0x72, 0x73, 0x50, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x47, 0x61,
	0x6d, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x4d, 0x69, 0x6e, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x75, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x4d, 0x69, 0x6e, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x75, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x78, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x75, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x4d, 0x61, 0x78, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x43,
	0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0xfd, 0x01, 0x0a, 0x0d, 0x53, 0x42, 0x5f, 0x44, 0x42,
	0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x4e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x68, 0x6f, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x04, 0x53, 0x68, 0x6f, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x47, 0x61, 0x6d, 0x65, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x04, 0x43, 0x61, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x61, 0x72, 0x64,
	0x4e, 0x6f, 0x18, 0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f,
	0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x49, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73,
	0x4f, 0x70, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x4e, 0x18, 0x09,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x4e, 0x12, 0x18, 0x0a, 0x07,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x22, 0x42, 0x0a, 0x11, 0x53, 0x42, 0x5f, 0x44, 0x42, 0x43,
	0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x05, 0x63,
	0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x42, 0x5f, 0x44, 0x42, 0x43, 0x61, 0x72, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x22, 0xd2, 0x01, 0x0a, 0x0e, 0x53,
	0x42, 0x5f, 0x44, 0x42, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a,
	0x06, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x4e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x4e, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x75, 0x72, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x43, 0x75, 0x72, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05,
	0x47, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44,
	0x18, 0x07, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x22,
	0x46, 0x0a, 0x12, 0x53, 0x42, 0x5f, 0x44, 0x42, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x68, 0x6f,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x12,
	0x16, 0x0a, 0x06, 0x53, 0x68, 0x6f, 0x65, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x06, 0x53, 0x68, 0x6f, 0x65, 0x4e, 0x6f, 0x22, 0xb2, 0x04, 0x0a, 0x10, 0x53, 0x42, 0x5f, 0x44,
	0x42, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x16, 0x0a, 0x06, 0x4d, 0x69, 0x6e, 0x42, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x4d, 0x69, 0x6e, 0x42, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x61, 0x78, 0x42,
	0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4d, 0x61, 0x78, 0x42, 0x65, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x50, 0x61,
	0x69, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x42,
	0x61, 0x6e, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x28,
	0x0a, 0x0f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50,
	0x61, 0x69, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x69, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x54, 0x69, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x62, 0x6f,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x6f, 0x62, 0x6f, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x42, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x50, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x50, 0x65, 0x72,
	0x53, 0x68, 0x6f, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x50, 0x65, 0x72,
	0x53, 0x68, 0x6f, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x47, 0x61, 0x6d, 0x65,
	0x73, 0x50, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x69, 0x6e, 0x50,
	0x6f, 0x6b, 0x65, 0x72, 0x43, 0x75, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x4d,
	0x69, 0x6e, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x75, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x61,
	0x78, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x75, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x4d, 0x61, 0x78, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x75, 0x74, 0x22, 0xef, 0x02, 0x0a,
	0x0f, 0x47, 0x53, 0x5f, 0x42, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c, 0x6f, 0x67,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x65,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x42,
	0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x57, 0x69, 0x6e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x57, 0x69, 0x6e,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x06, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x07, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x6f, 0x18, 0x08, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x4e, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18,
	0x09, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x42, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x18, 0x0a, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x42,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0d, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x02, 0x28, 0x03,
	0x52, 0x0c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x42, 0x0c,
	0x5a, 0x0a, 0x2e, 0x2f, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
}

var (
	file_DBServerMsg_proto_rawDescOnce sync.Once
	file_DBServerMsg_proto_rawDescData = file_DBServerMsg_proto_rawDesc
)

func file_DBServerMsg_proto_rawDescGZIP() []byte {
	file_DBServerMsg_proto_rawDescOnce.Do(func() {
		file_DBServerMsg_proto_rawDescData = protoimpl.X.CompressGZIP(file_DBServerMsg_proto_rawDescData)
	})
	return file_DBServerMsg_proto_rawDescData
}

var file_DBServerMsg_proto_msgTypes = make([]protoimpl.MessageInfo, 69)
var file_DBServerMsg_proto_goTypes = []interface{}{
	(*DBServerRet)(nil),                            // 0: netproto.DBServerRet
	(*HallServerStart)(nil),                        // 1: netproto.HallServerStart
	(*HallServerStartRet)(nil),                     // 2: netproto.HallServerStartRet
	(*GameServerStart)(nil),                        // 3: netproto.GameServerStart
	(*GameServerStartRet)(nil),                     // 4: netproto.GameServerStartRet
	(*H5GameLoginStart)(nil),                       // 5: netproto.H5GameLoginStart
	(*LogoutGameRoomInfo)(nil),                     // 6: netproto.LogoutGameRoomInfo
	(*UpdateUserScore)(nil),                        // 7: netproto.UpdateUserScore
	(*BlockIP)(nil),                                // 8: netproto.BlockIP
	(*BlockIPList)(nil),                            // 9: netproto.BlockIPList
	(*DealLog)(nil),                                // 10: netproto.DealLog
	(*LogonRobot)(nil),                             // 11: netproto.LogonRobot
	(*RobotData)(nil),                              // 12: netproto.RobotData
	(*LogonRobotRet)(nil),                          // 13: netproto.LogonRobotRet
	(*LogoutRobot)(nil),                            // 14: netproto.LogoutRobot
	(*HallServerInfo)(nil),                         // 15: netproto.HallServerInfo
	(*UpdateVideoGameInfo)(nil),                    // 16: netproto.UpdateVideoGameInfo
	(*UpdateVideoGameInfoRet)(nil),                 // 17: netproto.UpdateVideoGameInfoRet
	(*GameLogDeal)(nil),                            // 18: netproto.GameLogDeal
	(*ReqUserScore)(nil),                           // 19: netproto.ReqUserScore
	(*ResUserScore)(nil),                           // 20: netproto.ResUserScore
	(*CpGameUserTransferScore)(nil),                // 21: netproto.CpGameUserTransferScore
	(*CpGameUserTransferRes)(nil),                  // 22: netproto.CpGameUserTransferRes
	(*CpCheckOderState)(nil),                       // 23: netproto.CpCheckOderState
	(*CpCheckOderStateRes)(nil),                    // 24: netproto.CpCheckOderStateRes
	(*CpGameConfig)(nil),                           // 25: netproto.CpGameConfig
	(*CpGameInfo)(nil),                             // 26: netproto.CpGameInfo
	(*SignActionConfigRet)(nil),                    // 27: netproto.SignActionConfigRet
	(*SignProConfig)(nil),                          // 28: netproto.SignProConfig
	(*LotteryPool)(nil),                            // 29: netproto.LotteryPool
	(*UpdateUserCostAmount)(nil),                   // 30: netproto.UpdateUserCostAmount
	(*LoadUserSignProReq)(nil),                     // 31: netproto.LoadUserSignProReq
	(*LoadUserSignProRet)(nil),                     // 32: netproto.LoadUserSignProRet
	(*ReceiveSignRewardReq)(nil),                   // 33: netproto.ReceiveSignRewardReq
	(*ReceiveSignRewardRes)(nil),                   // 34: netproto.ReceiveSignRewardRes
	(*AddSignLotteryRewardReq)(nil),                // 35: netproto.AddSignLotteryRewardReq
	(*AddSignLotteryRewardRes)(nil),                // 36: netproto.AddSignLotteryRewardRes
	(*LoadHallConfigRes)(nil),                      // 37: netproto.LoadHallConfigRes
	(*GetUserTurnInfoReq)(nil),                     // 38: netproto.GetUserTurnInfoReq
	(*GetUserTurnInfoRes)(nil),                     // 39: netproto.GetUserTurnInfoRes
	(*TurnConfig)(nil),                             // 40: netproto.TurnConfig
	(*TurnCostConfig)(nil),                         // 41: netproto.TurnCostConfig
	(*GetUserCCLTurnInfoReq)(nil),                  // 42: netproto.GetUserCCLTurnInfoReq
	(*GetUserCCLTurnInfoRes)(nil),                  // 43: netproto.GetUserCCLTurnInfoRes
	(*AddTurnRewardReq)(nil),                       // 44: netproto.AddTurnRewardReq
	(*AddTurnRewardRes)(nil),                       // 45: netproto.AddTurnRewardRes
	(*LuckyWheelConfig)(nil),                       // 46: netproto.LuckyWheelConfig
	(*LuckyWheelReward)(nil),                       // 47: netproto.LuckyWheelReward
	(*LuckyWheelProbability)(nil),                  // 48: netproto.LuckyWheelProbability
	(*LuckyWheelGetReward)(nil),                    // 49: netproto.LuckyWheelGetReward
	(*LuckyWheelUserData)(nil),                     // 50: netproto.LuckyWheelUserData
	(*LuckyWheelDBRequest)(nil),                    // 51: netproto.LuckyWheelDBRequest
	(*LuckyWheelForceList)(nil),                    // 52: netproto.LuckyWheelForceList
	(*LuckyWheelForce)(nil),                        // 53: netproto.LuckyWheelForce
	(*BJL_DBCardInfo)(nil),                         // 54: netproto.BJL_DBCardInfo
	(*BJL_DBCardInfoList)(nil),                     // 55: netproto.BJL_DBCardInfoList
	(*BJL_DBPokerInfo)(nil),                        // 56: netproto.BJL_DBPokerInfo
	(*BJL_DBTableShoeInfo)(nil),                    // 57: netproto.BJL_DBTableShoeInfo
	(*BJL_DBTableConfig)(nil),                      // 58: netproto.BJL_DBTableConfig
	(*DepositActivityData)(nil),                    // 59: netproto.DepositActivityData
	(*DepositActivityUserData)(nil),                // 60: netproto.DepositActivityUserData
	(*LHD_DBTableConfig)(nil),                      // 61: netproto.LHD_DBTableConfig
	(*BJ_DBTableConfig)(nil),                       // 62: netproto.BJ_DBTableConfig
	(*SB_DBCardInfo)(nil),                          // 63: netproto.SB_DBCardInfo
	(*SB_DBCardInfoList)(nil),                      // 64: netproto.SB_DBCardInfoList
	(*SB_DBPokerInfo)(nil),                         // 65: netproto.SB_DBPokerInfo
	(*SB_DBTableShoeInfo)(nil),                     // 66: netproto.SB_DBTableShoeInfo
	(*SB_DBTableConfig)(nil),                       // 67: netproto.SB_DBTableConfig
	(*GS_BetDetailLog)(nil),                        // 68: netproto.GS_BetDetailLog
	(*DZPKHALLLuckyWheelUserRewardRecordsRet)(nil), // 69: netproto.DZPKHALLLuckyWheelUserRewardRecordsRet
	(*DZPKHALLDepositActivityConfig)(nil),          // 70: netproto.DZPKHALLDepositActivityConfig
	(*DZPKHALLDepositActivityRewardConfig)(nil),    // 71: netproto.DZPKHALLDepositActivityRewardConfig
}
var file_DBServerMsg_proto_depIdxs = []int32{
	12, // 0: netproto.LogonRobotRet.UserData:type_name -> netproto.RobotData
	16, // 1: netproto.UpdateVideoGameInfoRet.uvgi:type_name -> netproto.UpdateVideoGameInfo
	26, // 2: netproto.CpGameConfig.Res:type_name -> netproto.CpGameInfo
	28, // 3: netproto.SignActionConfigRet.Con:type_name -> netproto.SignProConfig
	29, // 4: netproto.SignActionConfigRet.Pool:type_name -> netproto.LotteryPool
	28, // 5: netproto.LoadUserSignProRet.SignCon:type_name -> netproto.SignProConfig
	29, // 6: netproto.LoadUserSignProRet.Pool:type_name -> netproto.LotteryPool
	25, // 7: netproto.LoadHallConfigRes.CpConfig:type_name -> netproto.CpGameConfig
	40, // 8: netproto.GetUserTurnInfoRes.TurnCon:type_name -> netproto.TurnConfig
	41, // 9: netproto.GetUserTurnInfoRes.TurnCost:type_name -> netproto.TurnCostConfig
	47, // 10: netproto.LuckyWheelConfig.Rewards:type_name -> netproto.LuckyWheelReward
	48, // 11: netproto.LuckyWheelConfig.Probabilitys:type_name -> netproto.LuckyWheelProbability
	69, // 12: netproto.LuckyWheelConfig.records:type_name -> netproto.DZPKHALLLuckyWheelUserRewardRecordsRet
	53, // 13: netproto.LuckyWheelForceList.List:type_name -> netproto.LuckyWheelForce
	54, // 14: netproto.BJL_DBCardInfoList.cards:type_name -> netproto.BJL_DBCardInfo
	70, // 15: netproto.DepositActivityData.Config:type_name -> netproto.DZPKHALLDepositActivityConfig
	71, // 16: netproto.DepositActivityData.Rewards:type_name -> netproto.DZPKHALLDepositActivityRewardConfig
	60, // 17: netproto.DepositActivityData.UserData:type_name -> netproto.DepositActivityUserData
	63, // 18: netproto.SB_DBCardInfoList.cards:type_name -> netproto.SB_DBCardInfo
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_DBServerMsg_proto_init() }
func file_DBServerMsg_proto_init() {
	if File_DBServerMsg_proto != nil {
		return
	}
	file_HallMsg_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_DBServerMsg_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBServerRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HallServerStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HallServerStartRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameServerStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameServerStartRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*H5GameLoginStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogoutGameRoomInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockIP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockIPList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DealLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogonRobot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RobotData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogonRobotRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogoutRobot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HallServerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVideoGameInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVideoGameInfoRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameLogDeal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUserScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResUserScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CpGameUserTransferScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CpGameUserTransferRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CpCheckOderState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CpCheckOderStateRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CpGameConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CpGameInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignActionConfigRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignProConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LotteryPool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserCostAmount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadUserSignProReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadUserSignProRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiveSignRewardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiveSignRewardRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSignLotteryRewardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSignLotteryRewardRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadHallConfigRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserTurnInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserTurnInfoRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TurnConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TurnCostConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserCCLTurnInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserCCLTurnInfoRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTurnRewardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTurnRewardRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LuckyWheelConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LuckyWheelReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LuckyWheelProbability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LuckyWheelGetReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LuckyWheelUserData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LuckyWheelDBRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LuckyWheelForceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LuckyWheelForce); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BJL_DBCardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BJL_DBCardInfoList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BJL_DBPokerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BJL_DBTableShoeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BJL_DBTableConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepositActivityData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepositActivityUserData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LHD_DBTableConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BJ_DBTableConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SB_DBCardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SB_DBCardInfoList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SB_DBPokerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SB_DBTableShoeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SB_DBTableConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DBServerMsg_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GS_BetDetailLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_DBServerMsg_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   69,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_DBServerMsg_proto_goTypes,
		DependencyIndexes: file_DBServerMsg_proto_depIdxs,
		MessageInfos:      file_DBServerMsg_proto_msgTypes,
	}.Build()
	File_DBServerMsg_proto = out.File
	file_DBServerMsg_proto_rawDesc = nil
	file_DBServerMsg_proto_goTypes = nil
	file_DBServerMsg_proto_depIdxs = nil
}
