// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0-devel
// 	protoc        v3.19.1
// source: HallMsg.proto

package netproto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

//遊客登入
type GuestLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HDCode     *string `protobuf:"bytes,1,req,name=HDCode" json:"HDCode,omitempty"`          //設備碼
	HDType     *int32  `protobuf:"varint,2,req,name=HDType" json:"HDType,omitempty"`         //設備類型
	SiteID     *int32  `protobuf:"varint,3,req,name=SiteID" json:"SiteID,omitempty"`         //通路ID
	Version    *string `protobuf:"bytes,4,req,name=Version" json:"Version,omitempty"`        //客戶端版本號
	PlatformID *int32  `protobuf:"varint,5,req,name=PlatformID" json:"PlatformID,omitempty"` //平臺號
	ServerID   *int32  `protobuf:"varint,6,opt,name=ServerID" json:"ServerID,omitempty"`     //服務器ID
	WxOpenID   *string `protobuf:"bytes,7,opt,name=WxOpenID" json:"WxOpenID,omitempty"`      //客戶端微信登入
	WxUnionID  *string `protobuf:"bytes,8,opt,name=WxUnionID" json:"WxUnionID,omitempty"`    //客戶端微信登入
	BunldID    *string `protobuf:"bytes,9,opt,name=BunldID" json:"BunldID,omitempty"`        //BunldID
	Ver        *string `protobuf:"bytes,10,opt,name=Ver" json:"Ver,omitempty"`               //版本號
	Language   *string `protobuf:"bytes,11,opt,name=Language" json:"Language,omitempty"`     //zh_CN/en_US/zh_TW
	ClientIP   *string `protobuf:"bytes,12,opt,name=ClientIP" json:"ClientIP,omitempty"`     // 玩家IP
}

func (x *GuestLogin) Reset() {
	*x = GuestLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuestLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuestLogin) ProtoMessage() {}

func (x *GuestLogin) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuestLogin.ProtoReflect.Descriptor instead.
func (*GuestLogin) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{0}
}

func (x *GuestLogin) GetHDCode() string {
	if x != nil && x.HDCode != nil {
		return *x.HDCode
	}
	return ""
}

func (x *GuestLogin) GetHDType() int32 {
	if x != nil && x.HDType != nil {
		return *x.HDType
	}
	return 0
}

func (x *GuestLogin) GetSiteID() int32 {
	if x != nil && x.SiteID != nil {
		return *x.SiteID
	}
	return 0
}

func (x *GuestLogin) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *GuestLogin) GetPlatformID() int32 {
	if x != nil && x.PlatformID != nil {
		return *x.PlatformID
	}
	return 0
}

func (x *GuestLogin) GetServerID() int32 {
	if x != nil && x.ServerID != nil {
		return *x.ServerID
	}
	return 0
}

func (x *GuestLogin) GetWxOpenID() string {
	if x != nil && x.WxOpenID != nil {
		return *x.WxOpenID
	}
	return ""
}

func (x *GuestLogin) GetWxUnionID() string {
	if x != nil && x.WxUnionID != nil {
		return *x.WxUnionID
	}
	return ""
}

func (x *GuestLogin) GetBunldID() string {
	if x != nil && x.BunldID != nil {
		return *x.BunldID
	}
	return ""
}

func (x *GuestLogin) GetVer() string {
	if x != nil && x.Ver != nil {
		return *x.Ver
	}
	return ""
}

func (x *GuestLogin) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *GuestLogin) GetClientIP() string {
	if x != nil && x.ClientIP != nil {
		return *x.ClientIP
	}
	return ""
}

//用戶登入
type UserLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HDCode      *string `protobuf:"bytes,1,req,name=HDCode" json:"HDCode,omitempty"`             //設備碼
	HDType      *int32  `protobuf:"varint,2,req,name=HDType" json:"HDType,omitempty"`            //設備類型
	SiteID      *int32  `protobuf:"varint,3,req,name=SiteID" json:"SiteID,omitempty"`            //通路ID
	Version     *string `protobuf:"bytes,4,req,name=Version" json:"Version,omitempty"`           //客戶端版本號
	PlatformID  *int32  `protobuf:"varint,5,req,name=PlatformID" json:"PlatformID,omitempty"`    //平臺號
	LoginName   *string `protobuf:"bytes,6,opt,name=LoginName" json:"LoginName,omitempty"`       //用戶名
	Password    *string `protobuf:"bytes,7,opt,name=Password" json:"Password,omitempty"`         //密碼
	UserID      *int32  `protobuf:"varint,8,opt,name=UserID" json:"UserID,omitempty"`            //用戶ID
	Cer         *string `protobuf:"bytes,9,opt,name=Cer" json:"Cer,omitempty"`                   //證書
	BunldID     *string `protobuf:"bytes,10,opt,name=BunldID" json:"BunldID,omitempty"`          //BunldID
	Ver         *string `protobuf:"bytes,11,opt,name=Ver" json:"Ver,omitempty"`                  //版本號
	CountryCode *int32  `protobuf:"varint,12,opt,name=CountryCode" json:"CountryCode,omitempty"` //國際代碼
	Email       *string `protobuf:"bytes,13,opt,name=Email" json:"Email,omitempty"`              //電子郵件
	ValidType   *string `protobuf:"bytes,14,opt,name=ValidType" json:"ValidType,omitempty"`      //驗証類型
	ValidToken  *string `protobuf:"bytes,15,opt,name=ValidToken" json:"ValidToken,omitempty"`    //驗証token
	ClientIP    *string `protobuf:"bytes,16,opt,name=ClientIP" json:"ClientIP,omitempty"`        // 玩家IP
}

func (x *UserLogin) Reset() {
	*x = UserLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLogin) ProtoMessage() {}

func (x *UserLogin) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLogin.ProtoReflect.Descriptor instead.
func (*UserLogin) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{1}
}

func (x *UserLogin) GetHDCode() string {
	if x != nil && x.HDCode != nil {
		return *x.HDCode
	}
	return ""
}

func (x *UserLogin) GetHDType() int32 {
	if x != nil && x.HDType != nil {
		return *x.HDType
	}
	return 0
}

func (x *UserLogin) GetSiteID() int32 {
	if x != nil && x.SiteID != nil {
		return *x.SiteID
	}
	return 0
}

func (x *UserLogin) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *UserLogin) GetPlatformID() int32 {
	if x != nil && x.PlatformID != nil {
		return *x.PlatformID
	}
	return 0
}

func (x *UserLogin) GetLoginName() string {
	if x != nil && x.LoginName != nil {
		return *x.LoginName
	}
	return ""
}

func (x *UserLogin) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *UserLogin) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *UserLogin) GetCer() string {
	if x != nil && x.Cer != nil {
		return *x.Cer
	}
	return ""
}

func (x *UserLogin) GetBunldID() string {
	if x != nil && x.BunldID != nil {
		return *x.BunldID
	}
	return ""
}

func (x *UserLogin) GetVer() string {
	if x != nil && x.Ver != nil {
		return *x.Ver
	}
	return ""
}

func (x *UserLogin) GetCountryCode() int32 {
	if x != nil && x.CountryCode != nil {
		return *x.CountryCode
	}
	return 0
}

func (x *UserLogin) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *UserLogin) GetValidType() string {
	if x != nil && x.ValidType != nil {
		return *x.ValidType
	}
	return ""
}

func (x *UserLogin) GetValidToken() string {
	if x != nil && x.ValidToken != nil {
		return *x.ValidToken
	}
	return ""
}

func (x *UserLogin) GetClientIP() string {
	if x != nil && x.ClientIP != nil {
		return *x.ClientIP
	}
	return ""
}

//用戶登入結果
type UserLoginRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     *int32             `protobuf:"varint,1,req,name=Code" json:"Code,omitempty"`        //登入結果代碼
	Message  *string            `protobuf:"bytes,2,req,name=Message" json:"Message,omitempty"`   //提示消息
	UserID   *int32             `protobuf:"varint,3,opt,name=UserID" json:"UserID,omitempty"`    //用戶ID
	Cer      *string            `protobuf:"bytes,4,opt,name=Cer" json:"Cer,omitempty"`           //用戶證書
	HDCode   *string            `protobuf:"bytes,5,opt,name=HDCode" json:"HDCode,omitempty"`     //設備碼
	HDType   *int32             `protobuf:"varint,6,opt,name=HDType" json:"HDType,omitempty"`    //設備類型
	UserData *UserHallLogonData `protobuf:"bytes,7,opt,name=UserData" json:"UserData,omitempty"` //用戶數據
	ParamLG  *string            `protobuf:"bytes,8,opt,name=ParamLG" json:"ParamLG,omitempty"`   //錯誤附帶參數， 多參數以|分割（兼容國際化版本）
}

func (x *UserLoginRet) Reset() {
	*x = UserLoginRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLoginRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLoginRet) ProtoMessage() {}

func (x *UserLoginRet) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLoginRet.ProtoReflect.Descriptor instead.
func (*UserLoginRet) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{2}
}

func (x *UserLoginRet) GetCode() int32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *UserLoginRet) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *UserLoginRet) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *UserLoginRet) GetCer() string {
	if x != nil && x.Cer != nil {
		return *x.Cer
	}
	return ""
}

func (x *UserLoginRet) GetHDCode() string {
	if x != nil && x.HDCode != nil {
		return *x.HDCode
	}
	return ""
}

func (x *UserLoginRet) GetHDType() int32 {
	if x != nil && x.HDType != nil {
		return *x.HDType
	}
	return 0
}

func (x *UserLoginRet) GetUserData() *UserHallLogonData {
	if x != nil {
		return x.UserData
	}
	return nil
}

func (x *UserLoginRet) GetParamLG() string {
	if x != nil && x.ParamLG != nil {
		return *x.ParamLG
	}
	return ""
}

//用戶大廳登入數據
type UserHallLogonData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoginName             *string             `protobuf:"bytes,1,req,name=LoginName" json:"LoginName,omitempty"`                          //用戶名
	NickName              *string             `protobuf:"bytes,2,req,name=NickName" json:"NickName,omitempty"`                            //昵稱
	UserType              *int32              `protobuf:"varint,3,req,name=UserType" json:"UserType,omitempty"`                           //用戶類型
	Sex                   *int32              `protobuf:"varint,4,req,name=Sex" json:"Sex,omitempty"`                                     //用戶性別
	HeadID                *int32              `protobuf:"varint,5,req,name=HeadID" json:"HeadID,omitempty"`                               //頭像ID
	IsTopWindow           *bool               `protobuf:"varint,6,req,name=IsTopWindow" json:"IsTopWindow,omitempty"`                     //是否彈窗
	CashAmount            *int64              `protobuf:"varint,7,req,name=CashAmount" json:"CashAmount,omitempty"`                       //當前現金數
	BankAmount            *int64              `protobuf:"varint,8,req,name=BankAmount" json:"BankAmount,omitempty"`                       //當前銀行數
	IsGaming              *bool               `protobuf:"varint,9,req,name=IsGaming" json:"IsGaming,omitempty"`                           //是否遊戲中
	ServerAddr            *string             `protobuf:"bytes,10,opt,name=ServerAddr" json:"ServerAddr,omitempty"`                       //服務器地址
	ServerName            *string             `protobuf:"bytes,11,opt,name=ServerName" json:"ServerName,omitempty"`                       //服務器名稱
	IsKick                *bool               `protobuf:"varint,12,req,name=IsKick" json:"IsKick,omitempty"`                              //是否踢人
	IsBindGuest           *bool               `protobuf:"varint,13,req,name=IsBindGuest" json:"IsBindGuest,omitempty"`                    //是否綁定遊客
	UserLevel             *int32              `protobuf:"varint,14,req,name=UserLevel" json:"UserLevel,omitempty"`                        //用戶等級
	LevelKey              *string             `protobuf:"bytes,15,req,name=LevelKey" json:"LevelKey,omitempty"`                           //等級校驗字符串
	AnnMsg                *string             `protobuf:"bytes,16,opt,name=AnnMsg" json:"AnnMsg,omitempty"`                               //彈出公告
	ConvertRateTipMsg     *string             `protobuf:"bytes,17,opt,name=ConvertRateTipMsg" json:"ConvertRateTipMsg,omitempty"`         //支付寶兌換提示消息
	BankPwdTipMsg         *string             `protobuf:"bytes,18,opt,name=BankPwdTipMsg" json:"BankPwdTipMsg,omitempty"`                 //銀行修改密碼提示消息
	UIFlag                *string             `protobuf:"bytes,19,opt,name=UIFlag" json:"UIFlag,omitempty"`                               //UI預留標記
	PaySort               *string             `protobuf:"bytes,20,opt,name=PaySort" json:"PaySort,omitempty"`                             //充值方式開關與順序
	UpGradeMsg            *string             `protobuf:"bytes,21,opt,name=UpGradeMsg" json:"UpGradeMsg,omitempty"`                       //升級提示
	LockGameID            *int32              `protobuf:"varint,22,opt,name=LockGameID" json:"LockGameID,omitempty"`                      //是否在遊戲中
	IsBindZhifubao        *bool               `protobuf:"varint,23,req,name=IsBindZhifubao" json:"IsBindZhifubao,omitempty"`              //是否綁定支付寶
	Zhifubao              *string             `protobuf:"bytes,24,opt,name=Zhifubao" json:"Zhifubao,omitempty"`                           //支付寶賬號
	RealName              *string             `protobuf:"bytes,25,opt,name=RealName" json:"RealName,omitempty"`                           //真實姓名
	GameList              []*GameSortCateInfo `protobuf:"bytes,26,rep,name=GameList" json:"GameList,omitempty"`                           //遊戲列表
	PayAmountConfig       *string             `protobuf:"bytes,27,opt,name=PayAmountConfig" json:"PayAmountConfig,omitempty"`             //充值金額配置
	PayNotifyMsg          *string             `protobuf:"bytes,28,opt,name=PayNotifyMsg" json:"PayNotifyMsg,omitempty"`                   //充值到賬通知信息
	NotifyFlag            *string             `protobuf:"bytes,29,opt,name=NotifyFlag" json:"NotifyFlag,omitempty"`                       //通知標記0冇有通知，1有通知  第1位表示是否有新郵件 後麵位數備用
	PayTips               *string             `protobuf:"bytes,30,opt,name=PayTips" json:"PayTips,omitempty"`                             //充值提示說明
	IsBindBankCard        *bool               `protobuf:"varint,31,opt,name=IsBindBankCard" json:"IsBindBankCard,omitempty"`              //是否銀行卡
	BankCardNumber        *string             `protobuf:"bytes,32,opt,name=BankCardNumber" json:"BankCardNumber,omitempty"`               //銀行卡賬號
	BankCardName          *string             `protobuf:"bytes,33,opt,name=BankCardName" json:"BankCardName,omitempty"`                   //銀行卡戶名
	BankName              *string             `protobuf:"bytes,34,opt,name=BankName" json:"BankName,omitempty"`                           //銀行名
	BankConvertRateTipMsg *string             `protobuf:"bytes,35,opt,name=BankConvertRateTipMsg" json:"BankConvertRateTipMsg,omitempty"` //銀行卡兌換提示消息
	VGameIDS              []int32             `protobuf:"varint,36,rep,name=VGameIDS" json:"VGameIDS,omitempty"`                          //玩家玩過的所有視訊類遊戲ID（用來判斷賬號是否已註冊）
	InVGameID             *int32              `protobuf:"varint,37,opt,name=InVGameID" json:"InVGameID,omitempty"`                        //0-表示不在任何視訊類遊戲中，其他表示視訊類遊戲ID
	XiuXianAmount         *int64              `protobuf:"varint,38,opt,name=XiuXianAmount" json:"XiuXianAmount,omitempty"`                //休閒版鬥地主豆子數
	XiuXianTotalCharge    *int64              `protobuf:"varint,39,opt,name=XiuXianTotalCharge" json:"XiuXianTotalCharge,omitempty"`      //休閒版鬥地主豆子纍計總充值
	GameCategoryList      []*GameCategoryInfo `protobuf:"bytes,40,rep,name=GameCategoryList" json:"GameCategoryList,omitempty"`           //分類列表
	LianyunID             *int32              `protobuf:"varint,41,opt,name=LianyunID" json:"LianyunID,omitempty"`                        //聯運ID
	VersionList           []*SkinVersionInfo  `protobuf:"bytes,42,rep,name=VersionList" json:"VersionList,omitempty"`                     //皮版本信息
	VipLv                 *int32              `protobuf:"varint,43,opt,name=VipLv" json:"VipLv,omitempty"`                                //VIP等級
	HeadFrameID           *int32              `protobuf:"varint,44,opt,name=HeadFrameID" json:"HeadFrameID,omitempty"`                    //頭像框ID
	Language              *string             `protobuf:"bytes,45,opt,name=Language" json:"Language,omitempty"`                           //語言
	Currency              *string             `protobuf:"bytes,46,opt,name=Currency" json:"Currency,omitempty"`                           //幣值
	Denomination          *int32              `protobuf:"varint,47,opt,name=Denomination" json:"Denomination,omitempty"`                  //幣值放大倍率
	ChangeNickNameCost    *int64              `protobuf:"varint,48,req,name=ChangeNickNameCost" json:"ChangeNickNameCost,omitempty"`      //修改暱稱的費用
	FaceUrl               *string             `protobuf:"bytes,49,req,name=FaceUrl" json:"FaceUrl,omitempty"`                             //頭像位置
	ChangeFaceCost        *int64              `protobuf:"varint,50,req,name=ChangeFaceCost" json:"ChangeFaceCost,omitempty"`              //修改頭像的費用
	InviteCode            *string             `protobuf:"bytes,51,opt,name=InviteCode" json:"InviteCode,omitempty"`                       //邀請碼
	NickNameChangeCount   *int32              `protobuf:"varint,52,req,name=NickNameChangeCount" json:"NickNameChangeCount,omitempty"`    //修改暱稱次數
	FaceUrlChangeCount    *int32              `protobuf:"varint,53,req,name=FaceUrlChangeCount" json:"FaceUrlChangeCount,omitempty"`      //修改頭像位址次數
}

func (x *UserHallLogonData) Reset() {
	*x = UserHallLogonData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserHallLogonData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserHallLogonData) ProtoMessage() {}

func (x *UserHallLogonData) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserHallLogonData.ProtoReflect.Descriptor instead.
func (*UserHallLogonData) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{3}
}

func (x *UserHallLogonData) GetLoginName() string {
	if x != nil && x.LoginName != nil {
		return *x.LoginName
	}
	return ""
}

func (x *UserHallLogonData) GetNickName() string {
	if x != nil && x.NickName != nil {
		return *x.NickName
	}
	return ""
}

func (x *UserHallLogonData) GetUserType() int32 {
	if x != nil && x.UserType != nil {
		return *x.UserType
	}
	return 0
}

func (x *UserHallLogonData) GetSex() int32 {
	if x != nil && x.Sex != nil {
		return *x.Sex
	}
	return 0
}

func (x *UserHallLogonData) GetHeadID() int32 {
	if x != nil && x.HeadID != nil {
		return *x.HeadID
	}
	return 0
}

func (x *UserHallLogonData) GetIsTopWindow() bool {
	if x != nil && x.IsTopWindow != nil {
		return *x.IsTopWindow
	}
	return false
}

func (x *UserHallLogonData) GetCashAmount() int64 {
	if x != nil && x.CashAmount != nil {
		return *x.CashAmount
	}
	return 0
}

func (x *UserHallLogonData) GetBankAmount() int64 {
	if x != nil && x.BankAmount != nil {
		return *x.BankAmount
	}
	return 0
}

func (x *UserHallLogonData) GetIsGaming() bool {
	if x != nil && x.IsGaming != nil {
		return *x.IsGaming
	}
	return false
}

func (x *UserHallLogonData) GetServerAddr() string {
	if x != nil && x.ServerAddr != nil {
		return *x.ServerAddr
	}
	return ""
}

func (x *UserHallLogonData) GetServerName() string {
	if x != nil && x.ServerName != nil {
		return *x.ServerName
	}
	return ""
}

func (x *UserHallLogonData) GetIsKick() bool {
	if x != nil && x.IsKick != nil {
		return *x.IsKick
	}
	return false
}

func (x *UserHallLogonData) GetIsBindGuest() bool {
	if x != nil && x.IsBindGuest != nil {
		return *x.IsBindGuest
	}
	return false
}

func (x *UserHallLogonData) GetUserLevel() int32 {
	if x != nil && x.UserLevel != nil {
		return *x.UserLevel
	}
	return 0
}

func (x *UserHallLogonData) GetLevelKey() string {
	if x != nil && x.LevelKey != nil {
		return *x.LevelKey
	}
	return ""
}

func (x *UserHallLogonData) GetAnnMsg() string {
	if x != nil && x.AnnMsg != nil {
		return *x.AnnMsg
	}
	return ""
}

func (x *UserHallLogonData) GetConvertRateTipMsg() string {
	if x != nil && x.ConvertRateTipMsg != nil {
		return *x.ConvertRateTipMsg
	}
	return ""
}

func (x *UserHallLogonData) GetBankPwdTipMsg() string {
	if x != nil && x.BankPwdTipMsg != nil {
		return *x.BankPwdTipMsg
	}
	return ""
}

func (x *UserHallLogonData) GetUIFlag() string {
	if x != nil && x.UIFlag != nil {
		return *x.UIFlag
	}
	return ""
}

func (x *UserHallLogonData) GetPaySort() string {
	if x != nil && x.PaySort != nil {
		return *x.PaySort
	}
	return ""
}

func (x *UserHallLogonData) GetUpGradeMsg() string {
	if x != nil && x.UpGradeMsg != nil {
		return *x.UpGradeMsg
	}
	return ""
}

func (x *UserHallLogonData) GetLockGameID() int32 {
	if x != nil && x.LockGameID != nil {
		return *x.LockGameID
	}
	return 0
}

func (x *UserHallLogonData) GetIsBindZhifubao() bool {
	if x != nil && x.IsBindZhifubao != nil {
		return *x.IsBindZhifubao
	}
	return false
}

func (x *UserHallLogonData) GetZhifubao() string {
	if x != nil && x.Zhifubao != nil {
		return *x.Zhifubao
	}
	return ""
}

func (x *UserHallLogonData) GetRealName() string {
	if x != nil && x.RealName != nil {
		return *x.RealName
	}
	return ""
}

func (x *UserHallLogonData) GetGameList() []*GameSortCateInfo {
	if x != nil {
		return x.GameList
	}
	return nil
}

func (x *UserHallLogonData) GetPayAmountConfig() string {
	if x != nil && x.PayAmountConfig != nil {
		return *x.PayAmountConfig
	}
	return ""
}

func (x *UserHallLogonData) GetPayNotifyMsg() string {
	if x != nil && x.PayNotifyMsg != nil {
		return *x.PayNotifyMsg
	}
	return ""
}

func (x *UserHallLogonData) GetNotifyFlag() string {
	if x != nil && x.NotifyFlag != nil {
		return *x.NotifyFlag
	}
	return ""
}

func (x *UserHallLogonData) GetPayTips() string {
	if x != nil && x.PayTips != nil {
		return *x.PayTips
	}
	return ""
}

func (x *UserHallLogonData) GetIsBindBankCard() bool {
	if x != nil && x.IsBindBankCard != nil {
		return *x.IsBindBankCard
	}
	return false
}

func (x *UserHallLogonData) GetBankCardNumber() string {
	if x != nil && x.BankCardNumber != nil {
		return *x.BankCardNumber
	}
	return ""
}

func (x *UserHallLogonData) GetBankCardName() string {
	if x != nil && x.BankCardName != nil {
		return *x.BankCardName
	}
	return ""
}

func (x *UserHallLogonData) GetBankName() string {
	if x != nil && x.BankName != nil {
		return *x.BankName
	}
	return ""
}

func (x *UserHallLogonData) GetBankConvertRateTipMsg() string {
	if x != nil && x.BankConvertRateTipMsg != nil {
		return *x.BankConvertRateTipMsg
	}
	return ""
}

func (x *UserHallLogonData) GetVGameIDS() []int32 {
	if x != nil {
		return x.VGameIDS
	}
	return nil
}

func (x *UserHallLogonData) GetInVGameID() int32 {
	if x != nil && x.InVGameID != nil {
		return *x.InVGameID
	}
	return 0
}

func (x *UserHallLogonData) GetXiuXianAmount() int64 {
	if x != nil && x.XiuXianAmount != nil {
		return *x.XiuXianAmount
	}
	return 0
}

func (x *UserHallLogonData) GetXiuXianTotalCharge() int64 {
	if x != nil && x.XiuXianTotalCharge != nil {
		return *x.XiuXianTotalCharge
	}
	return 0
}

func (x *UserHallLogonData) GetGameCategoryList() []*GameCategoryInfo {
	if x != nil {
		return x.GameCategoryList
	}
	return nil
}

func (x *UserHallLogonData) GetLianyunID() int32 {
	if x != nil && x.LianyunID != nil {
		return *x.LianyunID
	}
	return 0
}

func (x *UserHallLogonData) GetVersionList() []*SkinVersionInfo {
	if x != nil {
		return x.VersionList
	}
	return nil
}

func (x *UserHallLogonData) GetVipLv() int32 {
	if x != nil && x.VipLv != nil {
		return *x.VipLv
	}
	return 0
}

func (x *UserHallLogonData) GetHeadFrameID() int32 {
	if x != nil && x.HeadFrameID != nil {
		return *x.HeadFrameID
	}
	return 0
}

func (x *UserHallLogonData) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *UserHallLogonData) GetCurrency() string {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return ""
}

func (x *UserHallLogonData) GetDenomination() int32 {
	if x != nil && x.Denomination != nil {
		return *x.Denomination
	}
	return 0
}

func (x *UserHallLogonData) GetChangeNickNameCost() int64 {
	if x != nil && x.ChangeNickNameCost != nil {
		return *x.ChangeNickNameCost
	}
	return 0
}

func (x *UserHallLogonData) GetFaceUrl() string {
	if x != nil && x.FaceUrl != nil {
		return *x.FaceUrl
	}
	return ""
}

func (x *UserHallLogonData) GetChangeFaceCost() int64 {
	if x != nil && x.ChangeFaceCost != nil {
		return *x.ChangeFaceCost
	}
	return 0
}

func (x *UserHallLogonData) GetInviteCode() string {
	if x != nil && x.InviteCode != nil {
		return *x.InviteCode
	}
	return ""
}

func (x *UserHallLogonData) GetNickNameChangeCount() int32 {
	if x != nil && x.NickNameChangeCount != nil {
		return *x.NickNameChangeCount
	}
	return 0
}

func (x *UserHallLogonData) GetFaceUrlChangeCount() int32 {
	if x != nil && x.FaceUrlChangeCount != nil {
		return *x.FaceUrlChangeCount
	}
	return 0
}

//遊戲列表+分類+排序
type GameSortCateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameID     *int32  `protobuf:"varint,1,req,name=GameID" json:"GameID,omitempty"`        //遊戲ID
	CategoryID *string `protobuf:"bytes,2,opt,name=CategoryID" json:"CategoryID,omitempty"` //所屬分類
	Label      *int32  `protobuf:"varint,3,req,name=Label" json:"Label,omitempty"`          //標簽
}

func (x *GameSortCateInfo) Reset() {
	*x = GameSortCateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameSortCateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameSortCateInfo) ProtoMessage() {}

func (x *GameSortCateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameSortCateInfo.ProtoReflect.Descriptor instead.
func (*GameSortCateInfo) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{4}
}

func (x *GameSortCateInfo) GetGameID() int32 {
	if x != nil && x.GameID != nil {
		return *x.GameID
	}
	return 0
}

func (x *GameSortCateInfo) GetCategoryID() string {
	if x != nil && x.CategoryID != nil {
		return *x.CategoryID
	}
	return ""
}

func (x *GameSortCateInfo) GetLabel() int32 {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return 0
}

type GameCategoryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryID *int32  `protobuf:"varint,1,req,name=CategoryID" json:"CategoryID,omitempty"` //分類ID
	Name       *string `protobuf:"bytes,2,req,name=Name" json:"Name,omitempty"`              //分類名稱
}

func (x *GameCategoryInfo) Reset() {
	*x = GameCategoryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameCategoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameCategoryInfo) ProtoMessage() {}

func (x *GameCategoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameCategoryInfo.ProtoReflect.Descriptor instead.
func (*GameCategoryInfo) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{5}
}

func (x *GameCategoryInfo) GetCategoryID() int32 {
	if x != nil && x.CategoryID != nil {
		return *x.CategoryID
	}
	return 0
}

func (x *GameCategoryInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type SkinVersionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID       *int32  `protobuf:"varint,1,req,name=ID" json:"ID,omitempty"`            //ID
	BunldID  *string `protobuf:"bytes,2,req,name=BunldID" json:"BunldID,omitempty"`   //包ID
	Ver      *string `protobuf:"bytes,3,req,name=Ver" json:"Ver,omitempty"`           //資源版本
	Path     *string `protobuf:"bytes,4,req,name=Path" json:"Path,omitempty"`         //全路徑
	Ver1     *string `protobuf:"bytes,5,req,name=Ver1" json:"Ver1,omitempty"`         //資源版本1
	Platform *string `protobuf:"bytes,6,opt,name=Platform" json:"Platform,omitempty"` //平臺
	Channel  *string `protobuf:"bytes,7,opt,name=Channel" json:"Channel,omitempty"`   //支援更新的通路
	SkinVer  *string `protobuf:"bytes,8,req,name=SkinVer" json:"SkinVer,omitempty"`   //皮版本
	LimitIP  *string `protobuf:"bytes,9,opt,name=LimitIP" json:"LimitIP,omitempty"`   //限製IP
}

func (x *SkinVersionInfo) Reset() {
	*x = SkinVersionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkinVersionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkinVersionInfo) ProtoMessage() {}

func (x *SkinVersionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkinVersionInfo.ProtoReflect.Descriptor instead.
func (*SkinVersionInfo) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{6}
}

func (x *SkinVersionInfo) GetID() int32 {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return 0
}

func (x *SkinVersionInfo) GetBunldID() string {
	if x != nil && x.BunldID != nil {
		return *x.BunldID
	}
	return ""
}

func (x *SkinVersionInfo) GetVer() string {
	if x != nil && x.Ver != nil {
		return *x.Ver
	}
	return ""
}

func (x *SkinVersionInfo) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *SkinVersionInfo) GetVer1() string {
	if x != nil && x.Ver1 != nil {
		return *x.Ver1
	}
	return ""
}

func (x *SkinVersionInfo) GetPlatform() string {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return ""
}

func (x *SkinVersionInfo) GetChannel() string {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return ""
}

func (x *SkinVersionInfo) GetSkinVer() string {
	if x != nil && x.SkinVer != nil {
		return *x.SkinVer
	}
	return ""
}

func (x *SkinVersionInfo) GetLimitIP() string {
	if x != nil && x.LimitIP != nil {
		return *x.LimitIP
	}
	return ""
}

//用戶登出
type UserLogout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID *int32  `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"` //用戶ID
	Cer    *string `protobuf:"bytes,2,req,name=Cer" json:"Cer,omitempty"`        //證書
}

func (x *UserLogout) Reset() {
	*x = UserLogout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLogout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLogout) ProtoMessage() {}

func (x *UserLogout) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLogout.ProtoReflect.Descriptor instead.
func (*UserLogout) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{7}
}

func (x *UserLogout) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *UserLogout) GetCer() string {
	if x != nil && x.Cer != nil {
		return *x.Cer
	}
	return ""
}

//平臺版本信息
//註意版本號字符串可能為空。這時服務器可能是在出錯的情況下。 客戶端應該提示錯誤並退出
type HallVerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AndroidVersion *string `protobuf:"bytes,1,req,name=AndroidVersion" json:"AndroidVersion,omitempty"`
	IOSVersion     *string `protobuf:"bytes,2,req,name=IOSVersion" json:"IOSVersion,omitempty"`
}

func (x *HallVerInfo) Reset() {
	*x = HallVerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HallVerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HallVerInfo) ProtoMessage() {}

func (x *HallVerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HallVerInfo.ProtoReflect.Descriptor instead.
func (*HallVerInfo) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{8}
}

func (x *HallVerInfo) GetAndroidVersion() string {
	if x != nil && x.AndroidVersion != nil {
		return *x.AndroidVersion
	}
	return ""
}

func (x *HallVerInfo) GetIOSVersion() string {
	if x != nil && x.IOSVersion != nil {
		return *x.IOSVersion
	}
	return ""
}

//所有服務器信息
type AllGameServerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerList []*GameServerInfo `protobuf:"bytes,1,rep,name=ServerList" json:"ServerList,omitempty"`
}

func (x *AllGameServerInfo) Reset() {
	*x = AllGameServerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllGameServerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllGameServerInfo) ProtoMessage() {}

func (x *AllGameServerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllGameServerInfo.ProtoReflect.Descriptor instead.
func (*AllGameServerInfo) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{9}
}

func (x *AllGameServerInfo) GetServerList() []*GameServerInfo {
	if x != nil {
		return x.ServerList
	}
	return nil
}

//遊戲服務器列表
type GameServerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameID         *int32  `protobuf:"varint,1,req,name=GameID" json:"GameID,omitempty"`                //遊戲ID
	GameName       *string `protobuf:"bytes,2,req,name=GameName" json:"GameName,omitempty"`             //遊戲名稱
	LoginMoney     *int32  `protobuf:"varint,3,req,name=LoginMoney" json:"LoginMoney,omitempty"`        //入場金幣數
	Flag           *string `protobuf:"bytes,4,req,name=Flag" json:"Flag,omitempty"`                     //標記
	Status         *string `protobuf:"bytes,5,req,name=Status" json:"Status,omitempty"`                 //狀態
	BaseScore      *int32  `protobuf:"varint,6,req,name=BaseScore" json:"BaseScore,omitempty"`          //底分
	AndroidVersion *string `protobuf:"bytes,7,opt,name=AndroidVersion" json:"AndroidVersion,omitempty"` //遊戲ANDROID版本號
	IOSVersion     *string `protobuf:"bytes,8,opt,name=IOSVersion" json:"IOSVersion,omitempty"`         //遊戲IOS版本號
	NoSelRoom      *int32  `protobuf:"varint,9,opt,name=NoSelRoom" json:"NoSelRoom,omitempty"`          //跳過選房間直接進入遊戲，0不跳過，1跳過
	ServerStatus   *int32  `protobuf:"varint,10,opt,name=ServerStatus" json:"ServerStatus,omitempty"`   //服務器狀態，運行中，停服等
	RoomDesc       *string `protobuf:"bytes,11,opt,name=RoomDesc" json:"RoomDesc,omitempty"`            //房間描述，紅包掃雷遊戲專用：10包1倍 7包1.5倍 5包2倍
}

func (x *GameServerInfo) Reset() {
	*x = GameServerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameServerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameServerInfo) ProtoMessage() {}

func (x *GameServerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameServerInfo.ProtoReflect.Descriptor instead.
func (*GameServerInfo) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{10}
}

func (x *GameServerInfo) GetGameID() int32 {
	if x != nil && x.GameID != nil {
		return *x.GameID
	}
	return 0
}

func (x *GameServerInfo) GetGameName() string {
	if x != nil && x.GameName != nil {
		return *x.GameName
	}
	return ""
}

func (x *GameServerInfo) GetLoginMoney() int32 {
	if x != nil && x.LoginMoney != nil {
		return *x.LoginMoney
	}
	return 0
}

func (x *GameServerInfo) GetFlag() string {
	if x != nil && x.Flag != nil {
		return *x.Flag
	}
	return ""
}

func (x *GameServerInfo) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *GameServerInfo) GetBaseScore() int32 {
	if x != nil && x.BaseScore != nil {
		return *x.BaseScore
	}
	return 0
}

func (x *GameServerInfo) GetAndroidVersion() string {
	if x != nil && x.AndroidVersion != nil {
		return *x.AndroidVersion
	}
	return ""
}

func (x *GameServerInfo) GetIOSVersion() string {
	if x != nil && x.IOSVersion != nil {
		return *x.IOSVersion
	}
	return ""
}

func (x *GameServerInfo) GetNoSelRoom() int32 {
	if x != nil && x.NoSelRoom != nil {
		return *x.NoSelRoom
	}
	return 0
}

func (x *GameServerInfo) GetServerStatus() int32 {
	if x != nil && x.ServerStatus != nil {
		return *x.ServerStatus
	}
	return 0
}

func (x *GameServerInfo) GetRoomDesc() string {
	if x != nil && x.RoomDesc != nil {
		return *x.RoomDesc
	}
	return ""
}

//請求遊戲服務器地址
type RequestGameServerAddrInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerFlag *string `protobuf:"bytes,1,req,name=ServerFlag" json:"ServerFlag,omitempty"` //服務器標記
	GameID     *int32  `protobuf:"varint,2,req,name=GameID" json:"GameID,omitempty"`        //遊戲ID
	IsLianyun  *bool   `protobuf:"varint,3,opt,name=IsLianyun" json:"IsLianyun,omitempty"`  //是否聯運
	LianyunID  *int32  `protobuf:"varint,4,opt,name=LianyunID" json:"LianyunID,omitempty"`  //聯運ID
}

func (x *RequestGameServerAddrInfo) Reset() {
	*x = RequestGameServerAddrInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestGameServerAddrInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestGameServerAddrInfo) ProtoMessage() {}

func (x *RequestGameServerAddrInfo) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestGameServerAddrInfo.ProtoReflect.Descriptor instead.
func (*RequestGameServerAddrInfo) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{11}
}

func (x *RequestGameServerAddrInfo) GetServerFlag() string {
	if x != nil && x.ServerFlag != nil {
		return *x.ServerFlag
	}
	return ""
}

func (x *RequestGameServerAddrInfo) GetGameID() int32 {
	if x != nil && x.GameID != nil {
		return *x.GameID
	}
	return 0
}

func (x *RequestGameServerAddrInfo) GetIsLianyun() bool {
	if x != nil && x.IsLianyun != nil {
		return *x.IsLianyun
	}
	return false
}

func (x *RequestGameServerAddrInfo) GetLianyunID() int32 {
	if x != nil && x.LianyunID != nil {
		return *x.LianyunID
	}
	return 0
}

//遊戲服務器地址信息
type GameServerAddr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerID  *int32  `protobuf:"varint,1,req,name=ServerID" json:"ServerID,omitempty"`  //服務器ID
	IPAddress *string `protobuf:"bytes,2,req,name=IPAddress" json:"IPAddress,omitempty"` //服務器地址
	Port      *int32  `protobuf:"varint,3,req,name=Port" json:"Port,omitempty"`          //服務器端口
}

func (x *GameServerAddr) Reset() {
	*x = GameServerAddr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameServerAddr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameServerAddr) ProtoMessage() {}

func (x *GameServerAddr) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameServerAddr.ProtoReflect.Descriptor instead.
func (*GameServerAddr) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{12}
}

func (x *GameServerAddr) GetServerID() int32 {
	if x != nil && x.ServerID != nil {
		return *x.ServerID
	}
	return 0
}

func (x *GameServerAddr) GetIPAddress() string {
	if x != nil && x.IPAddress != nil {
		return *x.IPAddress
	}
	return ""
}

func (x *GameServerAddr) GetPort() int32 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

//綁定支付寶
type ZhifubaoInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Zhifubao  *string `protobuf:"bytes,1,req,name=Zhifubao" json:"Zhifubao,omitempty"`    //支付寶
	RealName  *string `protobuf:"bytes,2,req,name=RealName" json:"RealName,omitempty"`    //實名
	NeedVcode *int32  `protobuf:"varint,3,opt,name=NeedVcode" json:"NeedVcode,omitempty"` //是否需要簡訊驗證碼,1需要,0不需要
	Vcode     *string `protobuf:"bytes,4,opt,name=Vcode" json:"Vcode,omitempty"`          //簡訊驗證碼
}

func (x *ZhifubaoInfo) Reset() {
	*x = ZhifubaoInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZhifubaoInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZhifubaoInfo) ProtoMessage() {}

func (x *ZhifubaoInfo) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZhifubaoInfo.ProtoReflect.Descriptor instead.
func (*ZhifubaoInfo) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{13}
}

func (x *ZhifubaoInfo) GetZhifubao() string {
	if x != nil && x.Zhifubao != nil {
		return *x.Zhifubao
	}
	return ""
}

func (x *ZhifubaoInfo) GetRealName() string {
	if x != nil && x.RealName != nil {
		return *x.RealName
	}
	return ""
}

func (x *ZhifubaoInfo) GetNeedVcode() int32 {
	if x != nil && x.NeedVcode != nil {
		return *x.NeedVcode
	}
	return 0
}

func (x *ZhifubaoInfo) GetVcode() string {
	if x != nil && x.Vcode != nil {
		return *x.Vcode
	}
	return ""
}

//修改密碼
type ModifyPassword struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OldPwd      *string `protobuf:"bytes,1,req,name=OldPwd" json:"OldPwd,omitempty"`           //舊密碼
	NewPassword *string `protobuf:"bytes,2,req,name=NewPassword" json:"NewPassword,omitempty"` //新密碼
}

func (x *ModifyPassword) Reset() {
	*x = ModifyPassword{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyPassword) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyPassword) ProtoMessage() {}

func (x *ModifyPassword) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyPassword.ProtoReflect.Descriptor instead.
func (*ModifyPassword) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{14}
}

func (x *ModifyPassword) GetOldPwd() string {
	if x != nil && x.OldPwd != nil {
		return *x.OldPwd
	}
	return ""
}

func (x *ModifyPassword) GetNewPassword() string {
	if x != nil && x.NewPassword != nil {
		return *x.NewPassword
	}
	return ""
}

//發送驗證碼
type SendPhoneVCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tel         *string `protobuf:"bytes,1,opt,name=Tel" json:"Tel,omitempty"`                  //用戶手機號碼
	CodeType    *int32  `protobuf:"varint,2,req,name=CodeType" json:"CodeType,omitempty"`       //驗證碼類型	 1 註冊 2 找回密碼 3 找回銀行密碼 4 解綁支付寶/銀行卡 5綁定支付寶/銀行卡
	PlatformID  *int32  `protobuf:"varint,3,opt,name=PlatformID" json:"PlatformID,omitempty"`   //平臺ID
	CountryCode *int32  `protobuf:"varint,4,opt,name=CountryCode" json:"CountryCode,omitempty"` //國際代碼
}

func (x *SendPhoneVCode) Reset() {
	*x = SendPhoneVCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendPhoneVCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendPhoneVCode) ProtoMessage() {}

func (x *SendPhoneVCode) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendPhoneVCode.ProtoReflect.Descriptor instead.
func (*SendPhoneVCode) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{15}
}

func (x *SendPhoneVCode) GetTel() string {
	if x != nil && x.Tel != nil {
		return *x.Tel
	}
	return ""
}

func (x *SendPhoneVCode) GetCodeType() int32 {
	if x != nil && x.CodeType != nil {
		return *x.CodeType
	}
	return 0
}

func (x *SendPhoneVCode) GetPlatformID() int32 {
	if x != nil && x.PlatformID != nil {
		return *x.PlatformID
	}
	return 0
}

func (x *SendPhoneVCode) GetCountryCode() int32 {
	if x != nil && x.CountryCode != nil {
		return *x.CountryCode
	}
	return 0
}

//發送驗證碼結果
type SendPhoneVCodeRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      *int32  `protobuf:"varint,1,req,name=Code" json:"Code,omitempty"`
	Message   *string `protobuf:"bytes,2,req,name=Message" json:"Message,omitempty"`
	CountDown *int32  `protobuf:"varint,3,req,name=CountDown" json:"CountDown,omitempty"`
	ParamLG   *string `protobuf:"bytes,4,opt,name=ParamLG" json:"ParamLG,omitempty"` //錯誤附帶參數， 多參數以|分割（兼容國際化版本）
}

func (x *SendPhoneVCodeRet) Reset() {
	*x = SendPhoneVCodeRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendPhoneVCodeRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendPhoneVCodeRet) ProtoMessage() {}

func (x *SendPhoneVCodeRet) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendPhoneVCodeRet.ProtoReflect.Descriptor instead.
func (*SendPhoneVCodeRet) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{16}
}

func (x *SendPhoneVCodeRet) GetCode() int32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *SendPhoneVCodeRet) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *SendPhoneVCodeRet) GetCountDown() int32 {
	if x != nil && x.CountDown != nil {
		return *x.CountDown
	}
	return 0
}

func (x *SendPhoneVCodeRet) GetParamLG() string {
	if x != nil && x.ParamLG != nil {
		return *x.ParamLG
	}
	return ""
}

//修改頭像
type ModifyFace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FaceID      *int32 `protobuf:"varint,1,req,name=FaceID" json:"FaceID,omitempty"`           //頭像ID
	FaceFrameID *int32 `protobuf:"varint,2,opt,name=FaceFrameID" json:"FaceFrameID,omitempty"` //頭像框ID
}

func (x *ModifyFace) Reset() {
	*x = ModifyFace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyFace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyFace) ProtoMessage() {}

func (x *ModifyFace) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyFace.ProtoReflect.Descriptor instead.
func (*ModifyFace) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{17}
}

func (x *ModifyFace) GetFaceID() int32 {
	if x != nil && x.FaceID != nil {
		return *x.FaceID
	}
	return 0
}

func (x *ModifyFace) GetFaceFrameID() int32 {
	if x != nil && x.FaceFrameID != nil {
		return *x.FaceFrameID
	}
	return 0
}

//存取款
type MoneyDeposit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount        *int64  `protobuf:"varint,1,req,name=Amount" json:"Amount,omitempty"`
	MoneyPassword *string `protobuf:"bytes,2,opt,name=MoneyPassword" json:"MoneyPassword,omitempty"`
	OP            *int32  `protobuf:"varint,3,req,name=OP" json:"OP,omitempty"` //0 存款 1 取款
}

func (x *MoneyDeposit) Reset() {
	*x = MoneyDeposit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneyDeposit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneyDeposit) ProtoMessage() {}

func (x *MoneyDeposit) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneyDeposit.ProtoReflect.Descriptor instead.
func (*MoneyDeposit) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{18}
}

func (x *MoneyDeposit) GetAmount() int64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *MoneyDeposit) GetMoneyPassword() string {
	if x != nil && x.MoneyPassword != nil {
		return *x.MoneyPassword
	}
	return ""
}

func (x *MoneyDeposit) GetOP() int32 {
	if x != nil && x.OP != nil {
		return *x.OP
	}
	return 0
}

//存取款結果
type MoneyDepositRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount       *int64  `protobuf:"varint,1,req,name=Amount" json:"Amount,omitempty"`
	OP           *int32  `protobuf:"varint,2,req,name=OP" json:"OP,omitempty"` //0 存款 1 取款
	Code         *int32  `protobuf:"varint,3,req,name=Code" json:"Code,omitempty"`
	Message      *string `protobuf:"bytes,4,req,name=Message" json:"Message,omitempty"`
	CurrentMoney *int64  `protobuf:"varint,5,req,name=CurrentMoney" json:"CurrentMoney,omitempty"`
	CurrentBank  *int64  `protobuf:"varint,6,req,name=CurrentBank" json:"CurrentBank,omitempty"`
	ParamLG      *string `protobuf:"bytes,7,opt,name=ParamLG" json:"ParamLG,omitempty"` //錯誤附帶參數， 多參數以|分割（兼容國際化版本）
}

func (x *MoneyDepositRet) Reset() {
	*x = MoneyDepositRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneyDepositRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneyDepositRet) ProtoMessage() {}

func (x *MoneyDepositRet) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneyDepositRet.ProtoReflect.Descriptor instead.
func (*MoneyDepositRet) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{19}
}

func (x *MoneyDepositRet) GetAmount() int64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *MoneyDepositRet) GetOP() int32 {
	if x != nil && x.OP != nil {
		return *x.OP
	}
	return 0
}

func (x *MoneyDepositRet) GetCode() int32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *MoneyDepositRet) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *MoneyDepositRet) GetCurrentMoney() int64 {
	if x != nil && x.CurrentMoney != nil {
		return *x.CurrentMoney
	}
	return 0
}

func (x *MoneyDepositRet) GetCurrentBank() int64 {
	if x != nil && x.CurrentBank != nil {
		return *x.CurrentBank
	}
	return 0
}

func (x *MoneyDepositRet) GetParamLG() string {
	if x != nil && x.ParamLG != nil {
		return *x.ParamLG
	}
	return ""
}

//綁定遊客賬號
type BindGuestAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tel         *string `protobuf:"bytes,1,req,name=Tel" json:"Tel,omitempty"`                  //手機號碼
	VCode       *string `protobuf:"bytes,2,req,name=VCode" json:"VCode,omitempty"`              //驗證碼
	Password    *string `protobuf:"bytes,3,req,name=Password" json:"Password,omitempty"`        //密碼
	AgentUserID *string `protobuf:"bytes,4,opt,name=AgentUserID" json:"AgentUserID,omitempty"`  //代理用戶ID
	CountryCode *int32  `protobuf:"varint,5,opt,name=CountryCode" json:"CountryCode,omitempty"` //國際代碼
	Email       *string `protobuf:"bytes,6,opt,name=Email" json:"Email,omitempty"`              //電子郵件
	ValidType   *string `protobuf:"bytes,7,opt,name=ValidType" json:"ValidType,omitempty"`      //驗証類型
	ValidToken  *string `protobuf:"bytes,8,opt,name=ValidToken" json:"ValidToken,omitempty"`    //驗証token
}

func (x *BindGuestAccount) Reset() {
	*x = BindGuestAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindGuestAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindGuestAccount) ProtoMessage() {}

func (x *BindGuestAccount) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindGuestAccount.ProtoReflect.Descriptor instead.
func (*BindGuestAccount) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{20}
}

func (x *BindGuestAccount) GetTel() string {
	if x != nil && x.Tel != nil {
		return *x.Tel
	}
	return ""
}

func (x *BindGuestAccount) GetVCode() string {
	if x != nil && x.VCode != nil {
		return *x.VCode
	}
	return ""
}

func (x *BindGuestAccount) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *BindGuestAccount) GetAgentUserID() string {
	if x != nil && x.AgentUserID != nil {
		return *x.AgentUserID
	}
	return ""
}

func (x *BindGuestAccount) GetCountryCode() int32 {
	if x != nil && x.CountryCode != nil {
		return *x.CountryCode
	}
	return 0
}

func (x *BindGuestAccount) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *BindGuestAccount) GetValidType() string {
	if x != nil && x.ValidType != nil {
		return *x.ValidType
	}
	return ""
}

func (x *BindGuestAccount) GetValidToken() string {
	if x != nil && x.ValidToken != nil {
		return *x.ValidToken
	}
	return ""
}

//請求用戶大廳信息
type RequestUserHallInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SiteID *int32 `protobuf:"varint,1,req,name=SiteID" json:"SiteID,omitempty"` //通路ID
}

func (x *RequestUserHallInfo) Reset() {
	*x = RequestUserHallInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestUserHallInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestUserHallInfo) ProtoMessage() {}

func (x *RequestUserHallInfo) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestUserHallInfo.ProtoReflect.Descriptor instead.
func (*RequestUserHallInfo) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{21}
}

func (x *RequestUserHallInfo) GetSiteID() int32 {
	if x != nil && x.SiteID != nil {
		return *x.SiteID
	}
	return 0
}

//找回賬號密碼信息
type FindSetPwdByPhone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tel         *string `protobuf:"bytes,1,req,name=Tel" json:"Tel,omitempty"`                  //手機號碼
	VCode       *string `protobuf:"bytes,2,req,name=VCode" json:"VCode,omitempty"`              //驗證碼
	Password    *string `protobuf:"bytes,3,req,name=Password" json:"Password,omitempty"`        //密碼
	CountryCode *int32  `protobuf:"varint,4,opt,name=CountryCode" json:"CountryCode,omitempty"` //國際代碼
}

func (x *FindSetPwdByPhone) Reset() {
	*x = FindSetPwdByPhone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindSetPwdByPhone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindSetPwdByPhone) ProtoMessage() {}

func (x *FindSetPwdByPhone) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindSetPwdByPhone.ProtoReflect.Descriptor instead.
func (*FindSetPwdByPhone) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{22}
}

func (x *FindSetPwdByPhone) GetTel() string {
	if x != nil && x.Tel != nil {
		return *x.Tel
	}
	return ""
}

func (x *FindSetPwdByPhone) GetVCode() string {
	if x != nil && x.VCode != nil {
		return *x.VCode
	}
	return ""
}

func (x *FindSetPwdByPhone) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *FindSetPwdByPhone) GetCountryCode() int32 {
	if x != nil && x.CountryCode != nil {
		return *x.CountryCode
	}
	return 0
}

//修改銀行密碼
type ModifyBankPassword struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OldPwd      *string `protobuf:"bytes,1,req,name=OldPwd" json:"OldPwd,omitempty"`           //舊密碼
	NewPassword *string `protobuf:"bytes,2,req,name=NewPassword" json:"NewPassword,omitempty"` //新密碼
}

func (x *ModifyBankPassword) Reset() {
	*x = ModifyBankPassword{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyBankPassword) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyBankPassword) ProtoMessage() {}

func (x *ModifyBankPassword) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyBankPassword.ProtoReflect.Descriptor instead.
func (*ModifyBankPassword) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{23}
}

func (x *ModifyBankPassword) GetOldPwd() string {
	if x != nil && x.OldPwd != nil {
		return *x.OldPwd
	}
	return ""
}

func (x *ModifyBankPassword) GetNewPassword() string {
	if x != nil && x.NewPassword != nil {
		return *x.NewPassword
	}
	return ""
}

//找回銀行密碼信息
type FindSetBankPwdByPhone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VCode    *string `protobuf:"bytes,1,req,name=VCode" json:"VCode,omitempty"`       //驗證碼
	Password *string `protobuf:"bytes,2,req,name=Password" json:"Password,omitempty"` //密碼
}

func (x *FindSetBankPwdByPhone) Reset() {
	*x = FindSetBankPwdByPhone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindSetBankPwdByPhone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindSetBankPwdByPhone) ProtoMessage() {}

func (x *FindSetBankPwdByPhone) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindSetBankPwdByPhone.ProtoReflect.Descriptor instead.
func (*FindSetBankPwdByPhone) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{24}
}

func (x *FindSetBankPwdByPhone) GetVCode() string {
	if x != nil && x.VCode != nil {
		return *x.VCode
	}
	return ""
}

func (x *FindSetBankPwdByPhone) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

//郵件詳情
type MailDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID       *int32  `protobuf:"varint,1,req,name=ID" json:"ID,omitempty"`            //郵件ID
	Title    *string `protobuf:"bytes,2,req,name=Title" json:"Title,omitempty"`       //郵件標題
	Content  *string `protobuf:"bytes,3,req,name=Content" json:"Content,omitempty"`   //郵件內容
	IsRead   *bool   `protobuf:"varint,4,req,name=IsRead" json:"IsRead,omitempty"`    //是否已讀
	SendTime *string `protobuf:"bytes,5,req,name=SendTime" json:"SendTime,omitempty"` //發送時間
}

func (x *MailDetail) Reset() {
	*x = MailDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MailDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MailDetail) ProtoMessage() {}

func (x *MailDetail) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MailDetail.ProtoReflect.Descriptor instead.
func (*MailDetail) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{25}
}

func (x *MailDetail) GetID() int32 {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return 0
}

func (x *MailDetail) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *MailDetail) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *MailDetail) GetIsRead() bool {
	if x != nil && x.IsRead != nil {
		return *x.IsRead
	}
	return false
}

func (x *MailDetail) GetSendTime() string {
	if x != nil && x.SendTime != nil {
		return *x.SendTime
	}
	return ""
}

//獲取郵件列表
type MailList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MailList []*MailDetail `protobuf:"bytes,1,rep,name=MailList" json:"MailList,omitempty"` //郵件列表
}

func (x *MailList) Reset() {
	*x = MailList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MailList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MailList) ProtoMessage() {}

func (x *MailList) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MailList.ProtoReflect.Descriptor instead.
func (*MailList) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{26}
}

func (x *MailList) GetMailList() []*MailDetail {
	if x != nil {
		return x.MailList
	}
	return nil
}

//獲取郵件詳情
type RequestMailDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID *int32 `protobuf:"varint,1,req,name=ID" json:"ID,omitempty"` //郵件ID
}

func (x *RequestMailDetail) Reset() {
	*x = RequestMailDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestMailDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestMailDetail) ProtoMessage() {}

func (x *RequestMailDetail) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestMailDetail.ProtoReflect.Descriptor instead.
func (*RequestMailDetail) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{27}
}

func (x *RequestMailDetail) GetID() int32 {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return 0
}

//發送聯係客服問題
type ContactService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg *string `protobuf:"bytes,1,req,name=Msg" json:"Msg,omitempty"`
}

func (x *ContactService) Reset() {
	*x = ContactService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactService) ProtoMessage() {}

func (x *ContactService) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactService.ProtoReflect.Descriptor instead.
func (*ContactService) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{28}
}

func (x *ContactService) GetMsg() string {
	if x != nil && x.Msg != nil {
		return *x.Msg
	}
	return ""
}

//代理詳情
type AgentDeatil struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *string `protobuf:"bytes,1,req,name=Name" json:"Name,omitempty"` //代理名稱
	WXNo *string `protobuf:"bytes,2,req,name=WXNo" json:"WXNo,omitempty"` //徽信號
	QQ   *string `protobuf:"bytes,3,req,name=QQ" json:"QQ,omitempty"`     //QQ號
}

func (x *AgentDeatil) Reset() {
	*x = AgentDeatil{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentDeatil) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentDeatil) ProtoMessage() {}

func (x *AgentDeatil) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentDeatil.ProtoReflect.Descriptor instead.
func (*AgentDeatil) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{29}
}

func (x *AgentDeatil) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *AgentDeatil) GetWXNo() string {
	if x != nil && x.WXNo != nil {
		return *x.WXNo
	}
	return ""
}

func (x *AgentDeatil) GetQQ() string {
	if x != nil && x.QQ != nil {
		return *x.QQ
	}
	return ""
}

//代理列表
type AgentList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentList []*AgentDeatil `protobuf:"bytes,1,rep,name=AgentList" json:"AgentList,omitempty"` //代理列表
}

func (x *AgentList) Reset() {
	*x = AgentList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentList) ProtoMessage() {}

func (x *AgentList) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentList.ProtoReflect.Descriptor instead.
func (*AgentList) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{30}
}

func (x *AgentList) GetAgentList() []*AgentDeatil {
	if x != nil {
		return x.AgentList
	}
	return nil
}

//舉報代理信息
type ReportAgent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AreaID    *int32  `protobuf:"varint,1,req,name=AreaID" json:"AreaID,omitempty"`      //通路ID
	AgentName *string `protobuf:"bytes,2,req,name=AgentName" json:"AgentName,omitempty"` //代理名稱
	Content   *string `protobuf:"bytes,3,req,name=Content" json:"Content,omitempty"`     //舉報內容
}

func (x *ReportAgent) Reset() {
	*x = ReportAgent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportAgent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportAgent) ProtoMessage() {}

func (x *ReportAgent) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportAgent.ProtoReflect.Descriptor instead.
func (*ReportAgent) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{31}
}

func (x *ReportAgent) GetAreaID() int32 {
	if x != nil && x.AreaID != nil {
		return *x.AreaID
	}
	return 0
}

func (x *ReportAgent) GetAgentName() string {
	if x != nil && x.AgentName != nil {
		return *x.AgentName
	}
	return ""
}

func (x *ReportAgent) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

//請求代理信息
type RequestAgentList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AreaID *int32 `protobuf:"varint,2,req,name=AreaID" json:"AreaID,omitempty"` //通路ID
}

func (x *RequestAgentList) Reset() {
	*x = RequestAgentList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestAgentList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestAgentList) ProtoMessage() {}

func (x *RequestAgentList) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestAgentList.ProtoReflect.Descriptor instead.
func (*RequestAgentList) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{32}
}

func (x *RequestAgentList) GetAreaID() int32 {
	if x != nil && x.AreaID != nil {
		return *x.AreaID
	}
	return 0
}

//代理招商
type ApplyAgent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AreaID *int32  `protobuf:"varint,1,req,name=AreaID" json:"AreaID,omitempty"` //通路ID
	Name   *string `protobuf:"bytes,2,req,name=Name" json:"Name,omitempty"`      //姓名
	Tel    *string `protobuf:"bytes,3,req,name=Tel" json:"Tel,omitempty"`        //電話
	QQ     *string `protobuf:"bytes,4,req,name=QQ" json:"QQ,omitempty"`          //QQ號碼
	WXNo   *string `protobuf:"bytes,5,req,name=WXNo" json:"WXNo,omitempty"`      //WX號
	Memo   *string `protobuf:"bytes,6,req,name=Memo" json:"Memo,omitempty"`      //說明
}

func (x *ApplyAgent) Reset() {
	*x = ApplyAgent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyAgent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyAgent) ProtoMessage() {}

func (x *ApplyAgent) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyAgent.ProtoReflect.Descriptor instead.
func (*ApplyAgent) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{33}
}

func (x *ApplyAgent) GetAreaID() int32 {
	if x != nil && x.AreaID != nil {
		return *x.AreaID
	}
	return 0
}

func (x *ApplyAgent) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ApplyAgent) GetTel() string {
	if x != nil && x.Tel != nil {
		return *x.Tel
	}
	return ""
}

func (x *ApplyAgent) GetQQ() string {
	if x != nil && x.QQ != nil {
		return *x.QQ
	}
	return ""
}

func (x *ApplyAgent) GetWXNo() string {
	if x != nil && x.WXNo != nil {
		return *x.WXNo
	}
	return ""
}

func (x *ApplyAgent) GetMemo() string {
	if x != nil && x.Memo != nil {
		return *x.Memo
	}
	return ""
}

//兌換金幣信息
type ConvertMoney struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount  *int64 `protobuf:"varint,1,req,name=Amount" json:"Amount,omitempty"`   //兌換數量,單位分
	Cvttype *int32 `protobuf:"varint,2,opt,name=cvttype" json:"cvttype,omitempty"` //兌換途徑1支付寶2銀行卡
}

func (x *ConvertMoney) Reset() {
	*x = ConvertMoney{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvertMoney) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvertMoney) ProtoMessage() {}

func (x *ConvertMoney) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvertMoney.ProtoReflect.Descriptor instead.
func (*ConvertMoney) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{34}
}

func (x *ConvertMoney) GetAmount() int64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *ConvertMoney) GetCvttype() int32 {
	if x != nil && x.Cvttype != nil {
		return *x.Cvttype
	}
	return 0
}

//創建充值訂單請求信息
type CreatePayOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PayTypeID *int32 `protobuf:"varint,1,req,name=PayTypeID" json:"PayTypeID,omitempty"` //充值類型 1.支付寶 2.微信 3.銀聯 4.QQ錢包
	Amount    *int64 `protobuf:"varint,2,req,name=Amount" json:"Amount,omitempty"`       //充值數量,單位分
}

func (x *CreatePayOrder) Reset() {
	*x = CreatePayOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePayOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePayOrder) ProtoMessage() {}

func (x *CreatePayOrder) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePayOrder.ProtoReflect.Descriptor instead.
func (*CreatePayOrder) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{35}
}

func (x *CreatePayOrder) GetPayTypeID() int32 {
	if x != nil && x.PayTypeID != nil {
		return *x.PayTypeID
	}
	return 0
}

func (x *CreatePayOrder) GetAmount() int64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

//創建充值訂單返回信息
type CreatePayOrderRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    *int32  `protobuf:"varint,1,req,name=code" json:"code,omitempty"`       //訂單創建結果
	Message *string `protobuf:"bytes,2,req,name=message" json:"message,omitempty"`  //返回消息
	OrderID *int32  `protobuf:"varint,3,req,name=OrderID" json:"OrderID,omitempty"` //訂單編號
	ParamLG *string `protobuf:"bytes,4,opt,name=ParamLG" json:"ParamLG,omitempty"`  //錯誤附帶參數， 多參數以|分割（兼容國際化版本）
}

func (x *CreatePayOrderRet) Reset() {
	*x = CreatePayOrderRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePayOrderRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePayOrderRet) ProtoMessage() {}

func (x *CreatePayOrderRet) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePayOrderRet.ProtoReflect.Descriptor instead.
func (*CreatePayOrderRet) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{36}
}

func (x *CreatePayOrderRet) GetCode() int32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *CreatePayOrderRet) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *CreatePayOrderRet) GetOrderID() int32 {
	if x != nil && x.OrderID != nil {
		return *x.OrderID
	}
	return 0
}

func (x *CreatePayOrderRet) GetParamLG() string {
	if x != nil && x.ParamLG != nil {
		return *x.ParamLG
	}
	return ""
}

//獲取FAQ信息
type GetFAQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlatformID *int32 `protobuf:"varint,1,req,name=PlatformID" json:"PlatformID,omitempty"` //平臺ID
}

func (x *GetFAQ) Reset() {
	*x = GetFAQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFAQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFAQ) ProtoMessage() {}

func (x *GetFAQ) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFAQ.ProtoReflect.Descriptor instead.
func (*GetFAQ) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{37}
}

func (x *GetFAQ) GetPlatformID() int32 {
	if x != nil && x.PlatformID != nil {
		return *x.PlatformID
	}
	return 0
}

//FAQ信息
type FAQDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content *string `protobuf:"bytes,1,req,name=Content" json:"Content,omitempty"` //FAQ內容
}

func (x *FAQDetail) Reset() {
	*x = FAQDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FAQDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FAQDetail) ProtoMessage() {}

func (x *FAQDetail) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FAQDetail.ProtoReflect.Descriptor instead.
func (*FAQDetail) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{38}
}

func (x *FAQDetail) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

//綁定銀行卡
type BankCardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BankCardNumber *string `protobuf:"bytes,1,req,name=BankCardNumber" json:"BankCardNumber,omitempty"` //銀行卡賬號
	BankCardName   *string `protobuf:"bytes,2,req,name=BankCardName" json:"BankCardName,omitempty"`     //銀行卡戶名
	BankName       *string `protobuf:"bytes,3,opt,name=BankName" json:"BankName,omitempty"`             //銀行
	NeedVcode      *int32  `protobuf:"varint,4,opt,name=NeedVcode" json:"NeedVcode,omitempty"`          //是否需要簡訊驗證碼,1需要,0不需要
	Vcode          *string `protobuf:"bytes,5,opt,name=Vcode" json:"Vcode,omitempty"`                   //簡訊驗證碼
}

func (x *BankCardInfo) Reset() {
	*x = BankCardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BankCardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BankCardInfo) ProtoMessage() {}

func (x *BankCardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BankCardInfo.ProtoReflect.Descriptor instead.
func (*BankCardInfo) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{39}
}

func (x *BankCardInfo) GetBankCardNumber() string {
	if x != nil && x.BankCardNumber != nil {
		return *x.BankCardNumber
	}
	return ""
}

func (x *BankCardInfo) GetBankCardName() string {
	if x != nil && x.BankCardName != nil {
		return *x.BankCardName
	}
	return ""
}

func (x *BankCardInfo) GetBankName() string {
	if x != nil && x.BankName != nil {
		return *x.BankName
	}
	return ""
}

func (x *BankCardInfo) GetNeedVcode() int32 {
	if x != nil && x.NeedVcode != nil {
		return *x.NeedVcode
	}
	return 0
}

func (x *BankCardInfo) GetVcode() string {
	if x != nil && x.Vcode != nil {
		return *x.Vcode
	}
	return ""
}

//解綁支付寶/銀行卡
type UnbindConvertType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tel         *string `protobuf:"bytes,1,req,name=Tel" json:"Tel,omitempty"`                  //手機號碼
	VCode       *string `protobuf:"bytes,2,req,name=VCode" json:"VCode,omitempty"`              //驗證碼
	Cvttype     *int32  `protobuf:"varint,3,req,name=cvttype" json:"cvttype,omitempty"`         //兌換途徑1支付寶2銀行卡
	CountryCode *int32  `protobuf:"varint,4,opt,name=CountryCode" json:"CountryCode,omitempty"` //國際代碼
}

func (x *UnbindConvertType) Reset() {
	*x = UnbindConvertType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnbindConvertType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnbindConvertType) ProtoMessage() {}

func (x *UnbindConvertType) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnbindConvertType.ProtoReflect.Descriptor instead.
func (*UnbindConvertType) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{40}
}

func (x *UnbindConvertType) GetTel() string {
	if x != nil && x.Tel != nil {
		return *x.Tel
	}
	return ""
}

func (x *UnbindConvertType) GetVCode() string {
	if x != nil && x.VCode != nil {
		return *x.VCode
	}
	return ""
}

func (x *UnbindConvertType) GetCvttype() int32 {
	if x != nil && x.Cvttype != nil {
		return *x.Cvttype
	}
	return 0
}

func (x *UnbindConvertType) GetCountryCode() int32 {
	if x != nil && x.CountryCode != nil {
		return *x.CountryCode
	}
	return 0
}

//請求第三方接口
type ThirdAPIParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  *string `protobuf:"bytes,1,req,name=Name" json:"Name,omitempty"`
	Value *string `protobuf:"bytes,2,req,name=Value" json:"Value,omitempty"`
}

func (x *ThirdAPIParam) Reset() {
	*x = ThirdAPIParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThirdAPIParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThirdAPIParam) ProtoMessage() {}

func (x *ThirdAPIParam) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThirdAPIParam.ProtoReflect.Descriptor instead.
func (*ThirdAPIParam) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{41}
}

func (x *ThirdAPIParam) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ThirdAPIParam) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type ThirdAPIReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqNames []string         `protobuf:"bytes,1,rep,name=ReqNames" json:"ReqNames,omitempty"` //請求url路徑，拚接成url
	Params   []*ThirdAPIParam `protobuf:"bytes,2,rep,name=Params" json:"Params,omitempty"`     //參數列表
}

func (x *ThirdAPIReq) Reset() {
	*x = ThirdAPIReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThirdAPIReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThirdAPIReq) ProtoMessage() {}

func (x *ThirdAPIReq) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThirdAPIReq.ProtoReflect.Descriptor instead.
func (*ThirdAPIReq) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{42}
}

func (x *ThirdAPIReq) GetReqNames() []string {
	if x != nil {
		return x.ReqNames
	}
	return nil
}

func (x *ThirdAPIReq) GetParams() []*ThirdAPIParam {
	if x != nil {
		return x.Params
	}
	return nil
}

type ThirdAPIResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    *int32  `protobuf:"varint,1,req,name=Code" json:"Code,omitempty"`      //請求結果
	Message *string `protobuf:"bytes,2,opt,name=Message" json:"Message,omitempty"` //返回消息
	RetJson *string `protobuf:"bytes,3,opt,name=RetJson" json:"RetJson,omitempty"` //接口返回json字符串
}

func (x *ThirdAPIResp) Reset() {
	*x = ThirdAPIResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThirdAPIResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThirdAPIResp) ProtoMessage() {}

func (x *ThirdAPIResp) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThirdAPIResp.ProtoReflect.Descriptor instead.
func (*ThirdAPIResp) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{43}
}

func (x *ThirdAPIResp) GetCode() int32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *ThirdAPIResp) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *ThirdAPIResp) GetRetJson() string {
	if x != nil && x.RetJson != nil {
		return *x.RetJson
	}
	return ""
}

//視訊類遊戲接口
type VideoGameAPIReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VGameID *int32 `protobuf:"varint,1,req,name=VGameID" json:"VGameID,omitempty"` //視訊類遊戲ID
}

func (x *VideoGameAPIReq) Reset() {
	*x = VideoGameAPIReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoGameAPIReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoGameAPIReq) ProtoMessage() {}

func (x *VideoGameAPIReq) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoGameAPIReq.ProtoReflect.Descriptor instead.
func (*VideoGameAPIReq) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{44}
}

func (x *VideoGameAPIReq) GetVGameID() int32 {
	if x != nil && x.VGameID != nil {
		return *x.VGameID
	}
	return 0
}

type VideoGameAPIRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VGameID *int32  `protobuf:"varint,1,req,name=VGameID" json:"VGameID,omitempty"` //視訊類遊戲ID
	Status  *int32  `protobuf:"varint,2,req,name=Status" json:"Status,omitempty"`   //收包狀態：0-成功，其他-失敗
	Result  *string `protobuf:"bytes,3,opt,name=Result" json:"Result,omitempty"`    //status=0表示授權碼，其他表示失敗原因
}

func (x *VideoGameAPIRet) Reset() {
	*x = VideoGameAPIRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoGameAPIRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoGameAPIRet) ProtoMessage() {}

func (x *VideoGameAPIRet) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoGameAPIRet.ProtoReflect.Descriptor instead.
func (*VideoGameAPIRet) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{45}
}

func (x *VideoGameAPIRet) GetVGameID() int32 {
	if x != nil && x.VGameID != nil {
		return *x.VGameID
	}
	return 0
}

func (x *VideoGameAPIRet) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *VideoGameAPIRet) GetResult() string {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return ""
}

type ActivityInfoRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code             *int32            `protobuf:"varint,1,req,name=Code" json:"Code,omitempty"` //1獲取成功 0獲取失敗
	Message          *string           `protobuf:"bytes,2,opt,name=Message" json:"Message,omitempty"`
	UserActivityInfo *UserActivityInfo `protobuf:"bytes,3,opt,name=UserActivityInfo" json:"UserActivityInfo,omitempty"` //當前玩家的參與信息
	ActivityBaseInfo *ActivityBaseInfo `protobuf:"bytes,4,req,name=ActivityBaseInfo" json:"ActivityBaseInfo,omitempty"` //活動基礎信息和配置信息
	ParamLG          *string           `protobuf:"bytes,5,opt,name=ParamLG" json:"ParamLG,omitempty"`                   //錯誤附帶參數， 多參數以|分割（兼容國際化版本）
}

func (x *ActivityInfoRet) Reset() {
	*x = ActivityInfoRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityInfoRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityInfoRet) ProtoMessage() {}

func (x *ActivityInfoRet) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityInfoRet.ProtoReflect.Descriptor instead.
func (*ActivityInfoRet) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{46}
}

func (x *ActivityInfoRet) GetCode() int32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *ActivityInfoRet) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *ActivityInfoRet) GetUserActivityInfo() *UserActivityInfo {
	if x != nil {
		return x.UserActivityInfo
	}
	return nil
}

func (x *ActivityInfoRet) GetActivityBaseInfo() *ActivityBaseInfo {
	if x != nil {
		return x.ActivityBaseInfo
	}
	return nil
}

func (x *ActivityInfoRet) GetParamLG() string {
	if x != nil && x.ParamLG != nil {
		return *x.ParamLG
	}
	return ""
}

type UserActivityInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID        *int32 `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`
	TotalEnroll   *int64 `protobuf:"varint,2,req,name=TotalEnroll" json:"TotalEnroll,omitempty"`     //當前活動總參與人數
	CurrentAmount *int64 `protobuf:"varint,3,req,name=CurrentAmount" json:"CurrentAmount,omitempty"` //當前纍計得幣數，單位：分
	TotalAmount   *int64 `protobuf:"varint,4,req,name=TotalAmount" json:"TotalAmount,omitempty"`     //完成活動目標總共需要的得幣數，單位：分
	Status        *int32 `protobuf:"varint,5,req,name=Status" json:"Status,omitempty"`               //玩家參與狀態 0未參與 1進行中 2已達標 3已領取獎勵 -1已永久喪失參與資格
}

func (x *UserActivityInfo) Reset() {
	*x = UserActivityInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserActivityInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserActivityInfo) ProtoMessage() {}

func (x *UserActivityInfo) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserActivityInfo.ProtoReflect.Descriptor instead.
func (*UserActivityInfo) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{47}
}

func (x *UserActivityInfo) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *UserActivityInfo) GetTotalEnroll() int64 {
	if x != nil && x.TotalEnroll != nil {
		return *x.TotalEnroll
	}
	return 0
}

func (x *UserActivityInfo) GetCurrentAmount() int64 {
	if x != nil && x.CurrentAmount != nil {
		return *x.CurrentAmount
	}
	return 0
}

func (x *UserActivityInfo) GetTotalAmount() int64 {
	if x != nil && x.TotalAmount != nil {
		return *x.TotalAmount
	}
	return 0
}

func (x *UserActivityInfo) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

type ActivityBaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityID         *int32            `protobuf:"varint,1,req,name=ActivityID" json:"ActivityID,omitempty"`
	ActivityName       *string           `protobuf:"bytes,2,req,name=ActivityName" json:"ActivityName,omitempty"`
	ActivityContent    *string           `protobuf:"bytes,3,req,name=ActivityContent" json:"ActivityContent,omitempty"`
	ActivityConfig     []*ActivityConfig `protobuf:"bytes,4,rep,name=ActivityConfig" json:"ActivityConfig,omitempty"`
	ActivityStatus     *int32            `protobuf:"varint,5,req,name=ActivityStatus" json:"ActivityStatus,omitempty"`        //活動狀態：0未開啓 1開啓中 2已結束
	ActivityBeginTime  *string           `protobuf:"bytes,6,opt,name=ActivityBeginTime" json:"ActivityBeginTime,omitempty"`   //活動開始時間
	ActivityEndTime    *string           `protobuf:"bytes,7,opt,name=ActivityEndTime" json:"ActivityEndTime,omitempty"`       //活動結束時間
	ActivityTipContent *string           `protobuf:"bytes,8,opt,name=ActivityTipContent" json:"ActivityTipContent,omitempty"` //廣告中的彈出提示內容
	Extend             *string           `protobuf:"bytes,9,opt,name=Extend" json:"Extend,omitempty"`                         //後臺活動信息擴展字段
}

func (x *ActivityBaseInfo) Reset() {
	*x = ActivityBaseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityBaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityBaseInfo) ProtoMessage() {}

func (x *ActivityBaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityBaseInfo.ProtoReflect.Descriptor instead.
func (*ActivityBaseInfo) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{48}
}

func (x *ActivityBaseInfo) GetActivityID() int32 {
	if x != nil && x.ActivityID != nil {
		return *x.ActivityID
	}
	return 0
}

func (x *ActivityBaseInfo) GetActivityName() string {
	if x != nil && x.ActivityName != nil {
		return *x.ActivityName
	}
	return ""
}

func (x *ActivityBaseInfo) GetActivityContent() string {
	if x != nil && x.ActivityContent != nil {
		return *x.ActivityContent
	}
	return ""
}

func (x *ActivityBaseInfo) GetActivityConfig() []*ActivityConfig {
	if x != nil {
		return x.ActivityConfig
	}
	return nil
}

func (x *ActivityBaseInfo) GetActivityStatus() int32 {
	if x != nil && x.ActivityStatus != nil {
		return *x.ActivityStatus
	}
	return 0
}

func (x *ActivityBaseInfo) GetActivityBeginTime() string {
	if x != nil && x.ActivityBeginTime != nil {
		return *x.ActivityBeginTime
	}
	return ""
}

func (x *ActivityBaseInfo) GetActivityEndTime() string {
	if x != nil && x.ActivityEndTime != nil {
		return *x.ActivityEndTime
	}
	return ""
}

func (x *ActivityBaseInfo) GetActivityTipContent() string {
	if x != nil && x.ActivityTipContent != nil {
		return *x.ActivityTipContent
	}
	return ""
}

func (x *ActivityBaseInfo) GetExtend() string {
	if x != nil && x.Extend != nil {
		return *x.Extend
	}
	return ""
}

type ActivityConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParamName  *string `protobuf:"bytes,1,req,name=ParamName" json:"ParamName,omitempty"`
	ParamValue *string `protobuf:"bytes,2,req,name=ParamValue" json:"ParamValue,omitempty"`
	ParamDesc  *string `protobuf:"bytes,3,opt,name=ParamDesc" json:"ParamDesc,omitempty"`
}

func (x *ActivityConfig) Reset() {
	*x = ActivityConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityConfig) ProtoMessage() {}

func (x *ActivityConfig) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityConfig.ProtoReflect.Descriptor instead.
func (*ActivityConfig) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{49}
}

func (x *ActivityConfig) GetParamName() string {
	if x != nil && x.ParamName != nil {
		return *x.ParamName
	}
	return ""
}

func (x *ActivityConfig) GetParamValue() string {
	if x != nil && x.ParamValue != nil {
		return *x.ParamValue
	}
	return ""
}

func (x *ActivityConfig) GetParamDesc() string {
	if x != nil && x.ParamDesc != nil {
		return *x.ParamDesc
	}
	return ""
}

type AdvanceInfoRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code            *int32           `protobuf:"varint,1,req,name=Code" json:"Code,omitempty"` //1獲取成功 0獲取失敗
	Message         *string          `protobuf:"bytes,2,opt,name=Message" json:"Message,omitempty"`
	YesterdayAmount *int32           `protobuf:"varint,3,opt,name=YesterdayAmount" json:"YesterdayAmount,omitempty"` //昨天纍計贏金幣
	NowadayAmount   *int32           `protobuf:"varint,4,opt,name=NowadayAmount" json:"NowadayAmount,omitempty"`     //今日纍計贏金幣
	YesterdayReward *int32           `protobuf:"varint,5,opt,name=YesterdayReward" json:"YesterdayReward,omitempty"` //昨日獎勵
	TomorrowAmount  *int32           `protobuf:"varint,6,opt,name=TomorrowAmount" json:"TomorrowAmount,omitempty"`   //明日可領取獎勵
	AdvanceConfig   []*AdvanceConfig `protobuf:"bytes,7,rep,name=AdvanceConfig" json:"AdvanceConfig,omitempty"`      //晉級信息
	ParamLG         *string          `protobuf:"bytes,8,opt,name=ParamLG" json:"ParamLG,omitempty"`                  //錯誤附帶參數， 多參數以|分割（兼容國際化版本）
}

func (x *AdvanceInfoRet) Reset() {
	*x = AdvanceInfoRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdvanceInfoRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvanceInfoRet) ProtoMessage() {}

func (x *AdvanceInfoRet) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvanceInfoRet.ProtoReflect.Descriptor instead.
func (*AdvanceInfoRet) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{50}
}

func (x *AdvanceInfoRet) GetCode() int32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *AdvanceInfoRet) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *AdvanceInfoRet) GetYesterdayAmount() int32 {
	if x != nil && x.YesterdayAmount != nil {
		return *x.YesterdayAmount
	}
	return 0
}

func (x *AdvanceInfoRet) GetNowadayAmount() int32 {
	if x != nil && x.NowadayAmount != nil {
		return *x.NowadayAmount
	}
	return 0
}

func (x *AdvanceInfoRet) GetYesterdayReward() int32 {
	if x != nil && x.YesterdayReward != nil {
		return *x.YesterdayReward
	}
	return 0
}

func (x *AdvanceInfoRet) GetTomorrowAmount() int32 {
	if x != nil && x.TomorrowAmount != nil {
		return *x.TomorrowAmount
	}
	return 0
}

func (x *AdvanceInfoRet) GetAdvanceConfig() []*AdvanceConfig {
	if x != nil {
		return x.AdvanceConfig
	}
	return nil
}

func (x *AdvanceInfoRet) GetParamLG() string {
	if x != nil && x.ParamLG != nil {
		return *x.ParamLG
	}
	return ""
}

type AdvanceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdvanceID    *int32 `protobuf:"varint,1,req,name=AdvanceID" json:"AdvanceID,omitempty"`       //激情闖關ID
	TotalAmount  *int32 `protobuf:"varint,2,req,name=TotalAmount" json:"TotalAmount,omitempty"`   //一天需纍計贏金幣
	RewardAmount *int32 `protobuf:"varint,3,req,name=RewardAmount" json:"RewardAmount,omitempty"` //獎勵金幣
	Status       *int32 `protobuf:"varint,4,req,name=Status" json:"Status,omitempty"`             //任務狀態 1進行中 2已達標 3已領取獎勵
}

func (x *AdvanceConfig) Reset() {
	*x = AdvanceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdvanceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvanceConfig) ProtoMessage() {}

func (x *AdvanceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvanceConfig.ProtoReflect.Descriptor instead.
func (*AdvanceConfig) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{51}
}

func (x *AdvanceConfig) GetAdvanceID() int32 {
	if x != nil && x.AdvanceID != nil {
		return *x.AdvanceID
	}
	return 0
}

func (x *AdvanceConfig) GetTotalAmount() int32 {
	if x != nil && x.TotalAmount != nil {
		return *x.TotalAmount
	}
	return 0
}

func (x *AdvanceConfig) GetRewardAmount() int32 {
	if x != nil && x.RewardAmount != nil {
		return *x.RewardAmount
	}
	return 0
}

func (x *AdvanceConfig) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

type RechargeActivityRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code            *int32            `protobuf:"varint,1,req,name=Code" json:"Code,omitempty"` //1獲取成功 0獲取失敗
	Message         *string           `protobuf:"bytes,2,opt,name=Message" json:"Message,omitempty"`
	ActivityEndTime *string           `protobuf:"bytes,3,opt,name=ActivityEndTime" json:"ActivityEndTime,omitempty"` //活動結束時間
	MaxAmount       *int32            `protobuf:"varint,4,opt,name=MaxAmount" json:"MaxAmount,omitempty"`            //贏額進度最大值
	CurAmount       *int32            `protobuf:"varint,5,opt,name=CurAmount" json:"CurAmount,omitempty"`            //贏額進度當前值
	RecAmount       *int32            `protobuf:"varint,6,opt,name=RecAmount" json:"RecAmount,omitempty"`            //已領取金額
	AvailableAmoun  *int32            `protobuf:"varint,7,opt,name=AvailableAmoun" json:"AvailableAmoun,omitempty"`  //可領取金額
	RechargeConfig  []*RechargeConfig `protobuf:"bytes,8,rep,name=RechargeConfig" json:"RechargeConfig,omitempty"`   //充值返利信息
	ParamLG         *string           `protobuf:"bytes,9,opt,name=ParamLG" json:"ParamLG,omitempty"`                 //錯誤附帶參數， 多參數以|分割（兼容國際化版本）
}

func (x *RechargeActivityRet) Reset() {
	*x = RechargeActivityRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RechargeActivityRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RechargeActivityRet) ProtoMessage() {}

func (x *RechargeActivityRet) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RechargeActivityRet.ProtoReflect.Descriptor instead.
func (*RechargeActivityRet) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{52}
}

func (x *RechargeActivityRet) GetCode() int32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *RechargeActivityRet) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *RechargeActivityRet) GetActivityEndTime() string {
	if x != nil && x.ActivityEndTime != nil {
		return *x.ActivityEndTime
	}
	return ""
}

func (x *RechargeActivityRet) GetMaxAmount() int32 {
	if x != nil && x.MaxAmount != nil {
		return *x.MaxAmount
	}
	return 0
}

func (x *RechargeActivityRet) GetCurAmount() int32 {
	if x != nil && x.CurAmount != nil {
		return *x.CurAmount
	}
	return 0
}

func (x *RechargeActivityRet) GetRecAmount() int32 {
	if x != nil && x.RecAmount != nil {
		return *x.RecAmount
	}
	return 0
}

func (x *RechargeActivityRet) GetAvailableAmoun() int32 {
	if x != nil && x.AvailableAmoun != nil {
		return *x.AvailableAmoun
	}
	return 0
}

func (x *RechargeActivityRet) GetRechargeConfig() []*RechargeConfig {
	if x != nil {
		return x.RechargeConfig
	}
	return nil
}

func (x *RechargeActivityRet) GetParamLG() string {
	if x != nil && x.ParamLG != nil {
		return *x.ParamLG
	}
	return ""
}

type RechargeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RechargeID     *int32 `protobuf:"varint,1,req,name=RechargeID" json:"RechargeID,omitempty"`         //充值Id
	RechargeAmount *int32 `protobuf:"varint,2,req,name=RechargeAmount" json:"RechargeAmount,omitempty"` //充值金額
	WinAmount      *int32 `protobuf:"varint,3,req,name=WinAmount" json:"WinAmount,omitempty"`           //贏的金額
	RewardAmount   *int32 `protobuf:"varint,4,req,name=RewardAmount" json:"RewardAmount,omitempty"`     //獎勵金額
}

func (x *RechargeConfig) Reset() {
	*x = RechargeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RechargeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RechargeConfig) ProtoMessage() {}

func (x *RechargeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RechargeConfig.ProtoReflect.Descriptor instead.
func (*RechargeConfig) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{53}
}

func (x *RechargeConfig) GetRechargeID() int32 {
	if x != nil && x.RechargeID != nil {
		return *x.RechargeID
	}
	return 0
}

func (x *RechargeConfig) GetRechargeAmount() int32 {
	if x != nil && x.RechargeAmount != nil {
		return *x.RechargeAmount
	}
	return 0
}

func (x *RechargeConfig) GetWinAmount() int32 {
	if x != nil && x.WinAmount != nil {
		return *x.WinAmount
	}
	return 0
}

func (x *RechargeConfig) GetRewardAmount() int32 {
	if x != nil && x.RewardAmount != nil {
		return *x.RewardAmount
	}
	return 0
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//簽到活動(登入有禮)
type DailySingActionLoadRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Day          *int32      `protobuf:"varint,1,opt,name=Day" json:"Day,omitempty"`                   //當前第幾天簽到
	EndTimeStamp *int32      `protobuf:"varint,2,opt,name=EndTimeStamp" json:"EndTimeStamp,omitempty"` //活動到期時間(時間戳)
	ReachSign    []*SignInfo `protobuf:"bytes,3,rep,name=ReachSign" json:"ReachSign,omitempty"`        //簽到進度信息
	LotteryPool  []*PoolInfo `protobuf:"bytes,4,rep,name=LotteryPool" json:"LotteryPool,omitempty"`    //抽獎獎池
	LotteryCount *int32      `protobuf:"varint,5,opt,name=LotteryCount" json:"LotteryCount,omitempty"` //剩餘抽獎次數
	Code         *int32      `protobuf:"varint,6,req,name=Code" json:"Code,omitempty"`                 //返回碼
	Msg          *string     `protobuf:"bytes,7,opt,name=Msg" json:"Msg,omitempty"`                    //錯誤描述
	ActiveDes    *string     `protobuf:"bytes,8,opt,name=ActiveDes" json:"ActiveDes,omitempty"`        //活動描述
}

func (x *DailySingActionLoadRes) Reset() {
	*x = DailySingActionLoadRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DailySingActionLoadRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailySingActionLoadRes) ProtoMessage() {}

func (x *DailySingActionLoadRes) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailySingActionLoadRes.ProtoReflect.Descriptor instead.
func (*DailySingActionLoadRes) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{54}
}

func (x *DailySingActionLoadRes) GetDay() int32 {
	if x != nil && x.Day != nil {
		return *x.Day
	}
	return 0
}

func (x *DailySingActionLoadRes) GetEndTimeStamp() int32 {
	if x != nil && x.EndTimeStamp != nil {
		return *x.EndTimeStamp
	}
	return 0
}

func (x *DailySingActionLoadRes) GetReachSign() []*SignInfo {
	if x != nil {
		return x.ReachSign
	}
	return nil
}

func (x *DailySingActionLoadRes) GetLotteryPool() []*PoolInfo {
	if x != nil {
		return x.LotteryPool
	}
	return nil
}

func (x *DailySingActionLoadRes) GetLotteryCount() int32 {
	if x != nil && x.LotteryCount != nil {
		return *x.LotteryCount
	}
	return 0
}

func (x *DailySingActionLoadRes) GetCode() int32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *DailySingActionLoadRes) GetMsg() string {
	if x != nil && x.Msg != nil {
		return *x.Msg
	}
	return ""
}

func (x *DailySingActionLoadRes) GetActiveDes() string {
	if x != nil && x.ActiveDes != nil {
		return *x.ActiveDes
	}
	return ""
}

//抽獎獎池信息
type PoolInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index       *int32 `protobuf:"varint,1,req,name=Index" json:"Index,omitempty"`             //索引
	RewardMoney *int64 `protobuf:"varint,2,req,name=RewardMoney" json:"RewardMoney,omitempty"` //獎勵金幣
}

func (x *PoolInfo) Reset() {
	*x = PoolInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoolInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolInfo) ProtoMessage() {}

func (x *PoolInfo) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolInfo.ProtoReflect.Descriptor instead.
func (*PoolInfo) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{55}
}

func (x *PoolInfo) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *PoolInfo) GetRewardMoney() int64 {
	if x != nil && x.RewardMoney != nil {
		return *x.RewardMoney
	}
	return 0
}

//簽到進度信息
type SignInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//第幾天
	Day *int32 `protobuf:"varint,1,req,name=Day" json:"Day,omitempty"`
	//獎勵金幣
	RewardMoney *int32 `protobuf:"varint,2,req,name=RewardMoney" json:"RewardMoney,omitempty"`
	//今日流水(金幣）
	CostAmount *int64 `protobuf:"varint,3,req,name=CostAmount" json:"CostAmount,omitempty"`
	//目標流水
	ConfigAmount *int64 `protobuf:"varint,4,req,name=ConfigAmount" json:"ConfigAmount,omitempty"`
	//是否達成  0-未達成  1-已達成（未領取）  2-已領取
	State *DailyLoginGiftState `protobuf:"varint,5,req,name=State,enum=netproto.DailyLoginGiftState" json:"State,omitempty"`
}

func (x *SignInfo) Reset() {
	*x = SignInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignInfo) ProtoMessage() {}

func (x *SignInfo) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignInfo.ProtoReflect.Descriptor instead.
func (*SignInfo) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{56}
}

func (x *SignInfo) GetDay() int32 {
	if x != nil && x.Day != nil {
		return *x.Day
	}
	return 0
}

func (x *SignInfo) GetRewardMoney() int32 {
	if x != nil && x.RewardMoney != nil {
		return *x.RewardMoney
	}
	return 0
}

func (x *SignInfo) GetCostAmount() int64 {
	if x != nil && x.CostAmount != nil {
		return *x.CostAmount
	}
	return 0
}

func (x *SignInfo) GetConfigAmount() int64 {
	if x != nil && x.ConfigAmount != nil {
		return *x.ConfigAmount
	}
	return 0
}

func (x *SignInfo) GetState() DailyLoginGiftState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return DailyLoginGiftState_Gift_None
}

//領取每日簽到獎勵
type DailySignReceiveRewardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Day *int32 `protobuf:"varint,1,req,name=Day" json:"Day,omitempty"` //領取第幾天的獎勵
}

func (x *DailySignReceiveRewardReq) Reset() {
	*x = DailySignReceiveRewardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DailySignReceiveRewardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailySignReceiveRewardReq) ProtoMessage() {}

func (x *DailySignReceiveRewardReq) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailySignReceiveRewardReq.ProtoReflect.Descriptor instead.
func (*DailySignReceiveRewardReq) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{57}
}

func (x *DailySignReceiveRewardReq) GetDay() int32 {
	if x != nil && x.Day != nil {
		return *x.Day
	}
	return 0
}

//領取簽到獎勵返回
type DailySignReceiveRewardRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Day    *int32      `protobuf:"varint,1,req,name=Day" json:"Day,omitempty"`      //請求領取第幾天的獎勵
	Code   *int32      `protobuf:"varint,2,req,name=Code" json:"Code,omitempty"`    //返回碼
	Msg    *string     `protobuf:"bytes,3,opt,name=Msg" json:"Msg,omitempty"`       //返回錯誤碼
	Reward *SignReward `protobuf:"bytes,4,opt,name=Reward" json:"Reward,omitempty"` //獎勵信息
}

func (x *DailySignReceiveRewardRes) Reset() {
	*x = DailySignReceiveRewardRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DailySignReceiveRewardRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailySignReceiveRewardRes) ProtoMessage() {}

func (x *DailySignReceiveRewardRes) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailySignReceiveRewardRes.ProtoReflect.Descriptor instead.
func (*DailySignReceiveRewardRes) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{58}
}

func (x *DailySignReceiveRewardRes) GetDay() int32 {
	if x != nil && x.Day != nil {
		return *x.Day
	}
	return 0
}

func (x *DailySignReceiveRewardRes) GetCode() int32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *DailySignReceiveRewardRes) GetMsg() string {
	if x != nil && x.Msg != nil {
		return *x.Msg
	}
	return ""
}

func (x *DailySignReceiveRewardRes) GetReward() *SignReward {
	if x != nil {
		return x.Reward
	}
	return nil
}

//簽到獎勵
type SignReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardAmount *int64  `protobuf:"varint,1,req,name=RewardAmount" json:"RewardAmount,omitempty"` //獎勵金幣
	BankAmount   *int64  `protobuf:"varint,2,req,name=BankAmount" json:"BankAmount,omitempty"`     //領取後保險箱的金幣值
	Index        *int32  `protobuf:"varint,3,opt,name=Index" json:"Index,omitempty"`               //抽獎獎池索引
	Reward       []*Item `protobuf:"bytes,4,rep,name=Reward" json:"Reward,omitempty"`              //額外獲得的獎品
}

func (x *SignReward) Reset() {
	*x = SignReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignReward) ProtoMessage() {}

func (x *SignReward) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignReward.ProtoReflect.Descriptor instead.
func (*SignReward) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{59}
}

func (x *SignReward) GetRewardAmount() int64 {
	if x != nil && x.RewardAmount != nil {
		return *x.RewardAmount
	}
	return 0
}

func (x *SignReward) GetBankAmount() int64 {
	if x != nil && x.BankAmount != nil {
		return *x.BankAmount
	}
	return 0
}

func (x *SignReward) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *SignReward) GetReward() []*Item {
	if x != nil {
		return x.Reward
	}
	return nil
}

//簽到抽獎返回
type DailySignLotteryRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code   *int32      `protobuf:"varint,1,req,name=Code" json:"Code,omitempty"`    //返回碼
	Msg    *string     `protobuf:"bytes,2,opt,name=Msg" json:"Msg,omitempty"`       //返回錯誤碼
	Reward *SignReward `protobuf:"bytes,3,opt,name=Reward" json:"Reward,omitempty"` //獎勵信息
}

func (x *DailySignLotteryRes) Reset() {
	*x = DailySignLotteryRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DailySignLotteryRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailySignLotteryRes) ProtoMessage() {}

func (x *DailySignLotteryRes) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailySignLotteryRes.ProtoReflect.Descriptor instead.
func (*DailySignLotteryRes) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{60}
}

func (x *DailySignLotteryRes) GetCode() int32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *DailySignLotteryRes) GetMsg() string {
	if x != nil && x.Msg != nil {
		return *x.Msg
	}
	return ""
}

func (x *DailySignLotteryRes) GetReward() *SignReward {
	if x != nil {
		return x.Reward
	}
	return nil
}

type ReliefConfigRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reward          *int32  `protobuf:"varint,1,req,name=Reward" json:"Reward,omitempty"`                   //獎勵
	LessThanMoney   *int32  `protobuf:"varint,2,req,name=LessThanMoney" json:"LessThanMoney,omitempty"`     //少於金幣可領取
	MaxCollectTimes *int32  `protobuf:"varint,3,req,name=MaxCollectTimes" json:"MaxCollectTimes,omitempty"` //每日最大領取次數
	DayCollectTimes *int32  `protobuf:"varint,4,req,name=DayCollectTimes" json:"DayCollectTimes,omitempty"` //今日已領次數
	Desc            *string `protobuf:"bytes,5,opt,name=Desc" json:"Desc,omitempty"`                        //說明
}

func (x *ReliefConfigRet) Reset() {
	*x = ReliefConfigRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReliefConfigRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReliefConfigRet) ProtoMessage() {}

func (x *ReliefConfigRet) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReliefConfigRet.ProtoReflect.Descriptor instead.
func (*ReliefConfigRet) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{61}
}

func (x *ReliefConfigRet) GetReward() int32 {
	if x != nil && x.Reward != nil {
		return *x.Reward
	}
	return 0
}

func (x *ReliefConfigRet) GetLessThanMoney() int32 {
	if x != nil && x.LessThanMoney != nil {
		return *x.LessThanMoney
	}
	return 0
}

func (x *ReliefConfigRet) GetMaxCollectTimes() int32 {
	if x != nil && x.MaxCollectTimes != nil {
		return *x.MaxCollectTimes
	}
	return 0
}

func (x *ReliefConfigRet) GetDayCollectTimes() int32 {
	if x != nil && x.DayCollectTimes != nil {
		return *x.DayCollectTimes
	}
	return 0
}

func (x *ReliefConfigRet) GetDesc() string {
	if x != nil && x.Desc != nil {
		return *x.Desc
	}
	return ""
}

type ReliefCollectRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code            *int32  `protobuf:"varint,1,req,name=Code" json:"Code,omitempty"`                       //1獲取成功 0獲取失敗
	Message         *string `protobuf:"bytes,2,opt,name=Message" json:"Message,omitempty"`                  //失敗提示
	Reward          *int32  `protobuf:"varint,3,opt,name=Reward" json:"Reward,omitempty"`                   //獎勵
	DayCollectTimes *int32  `protobuf:"varint,4,opt,name=DayCollectTimes" json:"DayCollectTimes,omitempty"` //今日已領次數
	ParamLG         *string `protobuf:"bytes,5,opt,name=ParamLG" json:"ParamLG,omitempty"`                  //錯誤附帶參數， 多參數以|分割（兼容國際化版本）
}

func (x *ReliefCollectRet) Reset() {
	*x = ReliefCollectRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReliefCollectRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReliefCollectRet) ProtoMessage() {}

func (x *ReliefCollectRet) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReliefCollectRet.ProtoReflect.Descriptor instead.
func (*ReliefCollectRet) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{62}
}

func (x *ReliefCollectRet) GetCode() int32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *ReliefCollectRet) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *ReliefCollectRet) GetReward() int32 {
	if x != nil && x.Reward != nil {
		return *x.Reward
	}
	return 0
}

func (x *ReliefCollectRet) GetDayCollectTimes() int32 {
	if x != nil && x.DayCollectTimes != nil {
		return *x.DayCollectTimes
	}
	return 0
}

func (x *ReliefCollectRet) GetParamLG() string {
	if x != nil && x.ParamLG != nil {
		return *x.ParamLG
	}
	return ""
}

type UpdLanguage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID   *int32  `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`    //用戶ID
	Language *string `protobuf:"bytes,2,req,name=Language" json:"Language,omitempty"` //語言（zh_CN, zh_TW, en_US）
}

func (x *UpdLanguage) Reset() {
	*x = UpdLanguage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdLanguage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdLanguage) ProtoMessage() {}

func (x *UpdLanguage) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdLanguage.ProtoReflect.Descriptor instead.
func (*UpdLanguage) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{63}
}

func (x *UpdLanguage) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *UpdLanguage) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

//德撲娛樂城-第三方綁定登入
type DZPKHALLBindAccountLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HDCode     *string `protobuf:"bytes,1,req,name=HDCode" json:"HDCode,omitempty"`          //設備碼
	HDType     *int32  `protobuf:"varint,2,req,name=HDType" json:"HDType,omitempty"`         //設備類型
	SiteID     *int32  `protobuf:"varint,3,req,name=SiteID" json:"SiteID,omitempty"`         //通路ID
	Version    *string `protobuf:"bytes,4,req,name=Version" json:"Version,omitempty"`        //客戶端版本號
	PlatformID *int32  `protobuf:"varint,5,req,name=PlatformID" json:"PlatformID,omitempty"` //平臺號
	ServerID   *int32  `protobuf:"varint,6,opt,name=ServerID" json:"ServerID,omitempty"`     //服務器ID
	WxOpenID   *string `protobuf:"bytes,7,opt,name=WxOpenID" json:"WxOpenID,omitempty"`      //客戶端微信登入
	WxUnionID  *string `protobuf:"bytes,8,opt,name=WxUnionID" json:"WxUnionID,omitempty"`    //客戶端微信登入
	BunldID    *string `protobuf:"bytes,9,opt,name=BunldID" json:"BunldID,omitempty"`        //BunldID
	Ver        *string `protobuf:"bytes,10,opt,name=Ver" json:"Ver,omitempty"`               //版本號
	Language   *string `protobuf:"bytes,11,opt,name=Language" json:"Language,omitempty"`     //zh_CN/en_US/zh_TW
	Email      *string `protobuf:"bytes,12,opt,name=Email" json:"Email,omitempty"`           //電子郵件
	ValidType  *string `protobuf:"bytes,13,opt,name=ValidType" json:"ValidType,omitempty"`   //驗証類型
	ValidToken *string `protobuf:"bytes,14,opt,name=ValidToken" json:"ValidToken,omitempty"` //驗証token
}

func (x *DZPKHALLBindAccountLogin) Reset() {
	*x = DZPKHALLBindAccountLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DZPKHALLBindAccountLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DZPKHALLBindAccountLogin) ProtoMessage() {}

func (x *DZPKHALLBindAccountLogin) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DZPKHALLBindAccountLogin.ProtoReflect.Descriptor instead.
func (*DZPKHALLBindAccountLogin) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{64}
}

func (x *DZPKHALLBindAccountLogin) GetHDCode() string {
	if x != nil && x.HDCode != nil {
		return *x.HDCode
	}
	return ""
}

func (x *DZPKHALLBindAccountLogin) GetHDType() int32 {
	if x != nil && x.HDType != nil {
		return *x.HDType
	}
	return 0
}

func (x *DZPKHALLBindAccountLogin) GetSiteID() int32 {
	if x != nil && x.SiteID != nil {
		return *x.SiteID
	}
	return 0
}

func (x *DZPKHALLBindAccountLogin) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *DZPKHALLBindAccountLogin) GetPlatformID() int32 {
	if x != nil && x.PlatformID != nil {
		return *x.PlatformID
	}
	return 0
}

func (x *DZPKHALLBindAccountLogin) GetServerID() int32 {
	if x != nil && x.ServerID != nil {
		return *x.ServerID
	}
	return 0
}

func (x *DZPKHALLBindAccountLogin) GetWxOpenID() string {
	if x != nil && x.WxOpenID != nil {
		return *x.WxOpenID
	}
	return ""
}

func (x *DZPKHALLBindAccountLogin) GetWxUnionID() string {
	if x != nil && x.WxUnionID != nil {
		return *x.WxUnionID
	}
	return ""
}

func (x *DZPKHALLBindAccountLogin) GetBunldID() string {
	if x != nil && x.BunldID != nil {
		return *x.BunldID
	}
	return ""
}

func (x *DZPKHALLBindAccountLogin) GetVer() string {
	if x != nil && x.Ver != nil {
		return *x.Ver
	}
	return ""
}

func (x *DZPKHALLBindAccountLogin) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *DZPKHALLBindAccountLogin) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *DZPKHALLBindAccountLogin) GetValidType() string {
	if x != nil && x.ValidType != nil {
		return *x.ValidType
	}
	return ""
}

func (x *DZPKHALLBindAccountLogin) GetValidToken() string {
	if x != nil && x.ValidToken != nil {
		return *x.ValidToken
	}
	return ""
}

//德撲娛樂城-取得玩家加密錢包位址
type DZPKHALLWalletAddressGet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID                 *int32  `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`
	Code                   *int32  `protobuf:"varint,2,req,name=Code" json:"Code,omitempty"`                                     //狀態
	WalletAddress          *string `protobuf:"bytes,3,opt,name=WalletAddress" json:"WalletAddress,omitempty"`                    //位址
	Amount                 *int64  `protobuf:"varint,4,opt,name=Amount" json:"Amount,omitempty"`                                 //總餘額(實際儲值+係統贈送)
	WithdrawAmount         *int64  `protobuf:"varint,5,opt,name=WithdrawAmount" json:"WithdrawAmount,omitempty"`                 //可提領的金額
	PendingAmount          *int64  `protobuf:"varint,6,opt,name=PendingAmount" json:"PendingAmount,omitempty"`                   //處理中的金額
	WithdrawFee            *int32  `protobuf:"varint,7,opt,name=WithdrawFee" json:"WithdrawFee,omitempty"`                       //提領費用
	MinWithdrawAmount      *int64  `protobuf:"varint,8,opt,name=MinWithdrawAmount" json:"MinWithdrawAmount,omitempty"`           //最小提領金額
	DailyMaxWithdrawAmount *int64  `protobuf:"varint,9,opt,name=DailyMaxWithdrawAmount" json:"DailyMaxWithdrawAmount,omitempty"` //單日累積最高提領金額
}

func (x *DZPKHALLWalletAddressGet) Reset() {
	*x = DZPKHALLWalletAddressGet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DZPKHALLWalletAddressGet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DZPKHALLWalletAddressGet) ProtoMessage() {}

func (x *DZPKHALLWalletAddressGet) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DZPKHALLWalletAddressGet.ProtoReflect.Descriptor instead.
func (*DZPKHALLWalletAddressGet) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{65}
}

func (x *DZPKHALLWalletAddressGet) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *DZPKHALLWalletAddressGet) GetCode() int32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *DZPKHALLWalletAddressGet) GetWalletAddress() string {
	if x != nil && x.WalletAddress != nil {
		return *x.WalletAddress
	}
	return ""
}

func (x *DZPKHALLWalletAddressGet) GetAmount() int64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *DZPKHALLWalletAddressGet) GetWithdrawAmount() int64 {
	if x != nil && x.WithdrawAmount != nil {
		return *x.WithdrawAmount
	}
	return 0
}

func (x *DZPKHALLWalletAddressGet) GetPendingAmount() int64 {
	if x != nil && x.PendingAmount != nil {
		return *x.PendingAmount
	}
	return 0
}

func (x *DZPKHALLWalletAddressGet) GetWithdrawFee() int32 {
	if x != nil && x.WithdrawFee != nil {
		return *x.WithdrawFee
	}
	return 0
}

func (x *DZPKHALLWalletAddressGet) GetMinWithdrawAmount() int64 {
	if x != nil && x.MinWithdrawAmount != nil {
		return *x.MinWithdrawAmount
	}
	return 0
}

func (x *DZPKHALLWalletAddressGet) GetDailyMaxWithdrawAmount() int64 {
	if x != nil && x.DailyMaxWithdrawAmount != nil {
		return *x.DailyMaxWithdrawAmount
	}
	return 0
}

//德撲娛樂城-提領
type DZPKHALLWalletWithdrawReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID        *int32  `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`
	WalletAddress *string `protobuf:"bytes,2,req,name=WalletAddress" json:"WalletAddress,omitempty"` //提領至此錢包位址
	Amount        *int64  `protobuf:"varint,3,req,name=Amount" json:"Amount,omitempty"`              //提領金額
}

func (x *DZPKHALLWalletWithdrawReq) Reset() {
	*x = DZPKHALLWalletWithdrawReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DZPKHALLWalletWithdrawReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DZPKHALLWalletWithdrawReq) ProtoMessage() {}

func (x *DZPKHALLWalletWithdrawReq) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DZPKHALLWalletWithdrawReq.ProtoReflect.Descriptor instead.
func (*DZPKHALLWalletWithdrawReq) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{66}
}

func (x *DZPKHALLWalletWithdrawReq) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *DZPKHALLWalletWithdrawReq) GetWalletAddress() string {
	if x != nil && x.WalletAddress != nil {
		return *x.WalletAddress
	}
	return ""
}

func (x *DZPKHALLWalletWithdrawReq) GetAmount() int64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

//德撲娛樂城-提領返回
type DZPKHALLWalletWithdrawRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           *int32 `protobuf:"varint,1,req,name=Code" json:"Code,omitempty"`                     //狀態
	Amount         *int64 `protobuf:"varint,2,req,name=Amount" json:"Amount,omitempty"`                 //現在擁有的金額
	WithdrawAmount *int64 `protobuf:"varint,3,req,name=WithdrawAmount" json:"WithdrawAmount,omitempty"` //可提領的金額
	PendingAmount  *int64 `protobuf:"varint,4,req,name=PendingAmount" json:"PendingAmount,omitempty"`   //處理中的金額
}

func (x *DZPKHALLWalletWithdrawRet) Reset() {
	*x = DZPKHALLWalletWithdrawRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DZPKHALLWalletWithdrawRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DZPKHALLWalletWithdrawRet) ProtoMessage() {}

func (x *DZPKHALLWalletWithdrawRet) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DZPKHALLWalletWithdrawRet.ProtoReflect.Descriptor instead.
func (*DZPKHALLWalletWithdrawRet) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{67}
}

func (x *DZPKHALLWalletWithdrawRet) GetCode() int32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *DZPKHALLWalletWithdrawRet) GetAmount() int64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *DZPKHALLWalletWithdrawRet) GetWithdrawAmount() int64 {
	if x != nil && x.WithdrawAmount != nil {
		return *x.WithdrawAmount
	}
	return 0
}

func (x *DZPKHALLWalletWithdrawRet) GetPendingAmount() int64 {
	if x != nil && x.PendingAmount != nil {
		return *x.PendingAmount
	}
	return 0
}

//德撲娛樂城-更改暱稱
type DZPKHALLChangeNickName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NickName *string `protobuf:"bytes,1,req,name=NickName" json:"NickName,omitempty"` //要改的暱稱
}

func (x *DZPKHALLChangeNickName) Reset() {
	*x = DZPKHALLChangeNickName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DZPKHALLChangeNickName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DZPKHALLChangeNickName) ProtoMessage() {}

func (x *DZPKHALLChangeNickName) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DZPKHALLChangeNickName.ProtoReflect.Descriptor instead.
func (*DZPKHALLChangeNickName) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{68}
}

func (x *DZPKHALLChangeNickName) GetNickName() string {
	if x != nil && x.NickName != nil {
		return *x.NickName
	}
	return ""
}

//德撲娛樂城-更改暱稱結果
type DZPKHALLChangeNickNameRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code            *int32  `protobuf:"varint,1,req,name=Code" json:"Code,omitempty"`                      //返回碼
	Message         *string `protobuf:"bytes,2,opt,name=Message" json:"Message,omitempty"`                 //返回錯誤碼
	CurrentMoney    *int64  `protobuf:"varint,3,req,name=CurrentMoney" json:"CurrentMoney,omitempty"`      //現在擁有的金額
	CurrentNickName *string `protobuf:"bytes,4,req,name=CurrentNickName" json:"CurrentNickName,omitempty"` //現在的暱稱
	NextCost        *int32  `protobuf:"varint,5,req,name=NextCost" json:"NextCost,omitempty"`              //下次修改費用
}

func (x *DZPKHALLChangeNickNameRet) Reset() {
	*x = DZPKHALLChangeNickNameRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DZPKHALLChangeNickNameRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DZPKHALLChangeNickNameRet) ProtoMessage() {}

func (x *DZPKHALLChangeNickNameRet) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DZPKHALLChangeNickNameRet.ProtoReflect.Descriptor instead.
func (*DZPKHALLChangeNickNameRet) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{69}
}

func (x *DZPKHALLChangeNickNameRet) GetCode() int32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *DZPKHALLChangeNickNameRet) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *DZPKHALLChangeNickNameRet) GetCurrentMoney() int64 {
	if x != nil && x.CurrentMoney != nil {
		return *x.CurrentMoney
	}
	return 0
}

func (x *DZPKHALLChangeNickNameRet) GetCurrentNickName() string {
	if x != nil && x.CurrentNickName != nil {
		return *x.CurrentNickName
	}
	return ""
}

func (x *DZPKHALLChangeNickNameRet) GetNextCost() int32 {
	if x != nil && x.NextCost != nil {
		return *x.NextCost
	}
	return 0
}

type DZPKHALLLuckyWheelSpinRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code         *int32 `protobuf:"varint,1,req,name=Code" json:"Code,omitempty"`
	RewardAmount *int32 `protobuf:"varint,2,opt,name=RewardAmount" json:"RewardAmount,omitempty"`
	RewardType   *int32 `protobuf:"varint,3,opt,name=RewardType" json:"RewardType,omitempty"`
	CurrentMoney *int64 `protobuf:"varint,4,opt,name=CurrentMoney" json:"CurrentMoney,omitempty"` //現在擁有的金額
}

func (x *DZPKHALLLuckyWheelSpinRet) Reset() {
	*x = DZPKHALLLuckyWheelSpinRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DZPKHALLLuckyWheelSpinRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DZPKHALLLuckyWheelSpinRet) ProtoMessage() {}

func (x *DZPKHALLLuckyWheelSpinRet) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DZPKHALLLuckyWheelSpinRet.ProtoReflect.Descriptor instead.
func (*DZPKHALLLuckyWheelSpinRet) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{70}
}

func (x *DZPKHALLLuckyWheelSpinRet) GetCode() int32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *DZPKHALLLuckyWheelSpinRet) GetRewardAmount() int32 {
	if x != nil && x.RewardAmount != nil {
		return *x.RewardAmount
	}
	return 0
}

func (x *DZPKHALLLuckyWheelSpinRet) GetRewardType() int32 {
	if x != nil && x.RewardType != nil {
		return *x.RewardType
	}
	return 0
}

func (x *DZPKHALLLuckyWheelSpinRet) GetCurrentMoney() int64 {
	if x != nil && x.CurrentMoney != nil {
		return *x.CurrentMoney
	}
	return 0
}

type DZPKHALLLuckyWheelUserDataRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code       *int32                       `protobuf:"varint,1,req,name=Code" json:"Code,omitempty"`
	CanSpin    *int32                       `protobuf:"varint,2,req,name=CanSpin" json:"CanSpin,omitempty"`
	ServerTime *string                      `protobuf:"bytes,3,req,name=ServerTime" json:"ServerTime,omitempty"`
	ResetTime  *string                      `protobuf:"bytes,4,req,name=ResetTime" json:"ResetTime,omitempty"`
	RewardList []*DZPKHALLLuckyWheelRewards `protobuf:"bytes,5,rep,name=RewardList" json:"RewardList,omitempty"`
}

func (x *DZPKHALLLuckyWheelUserDataRet) Reset() {
	*x = DZPKHALLLuckyWheelUserDataRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DZPKHALLLuckyWheelUserDataRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DZPKHALLLuckyWheelUserDataRet) ProtoMessage() {}

func (x *DZPKHALLLuckyWheelUserDataRet) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DZPKHALLLuckyWheelUserDataRet.ProtoReflect.Descriptor instead.
func (*DZPKHALLLuckyWheelUserDataRet) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{71}
}

func (x *DZPKHALLLuckyWheelUserDataRet) GetCode() int32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *DZPKHALLLuckyWheelUserDataRet) GetCanSpin() int32 {
	if x != nil && x.CanSpin != nil {
		return *x.CanSpin
	}
	return 0
}

func (x *DZPKHALLLuckyWheelUserDataRet) GetServerTime() string {
	if x != nil && x.ServerTime != nil {
		return *x.ServerTime
	}
	return ""
}

func (x *DZPKHALLLuckyWheelUserDataRet) GetResetTime() string {
	if x != nil && x.ResetTime != nil {
		return *x.ResetTime
	}
	return ""
}

func (x *DZPKHALLLuckyWheelUserDataRet) GetRewardList() []*DZPKHALLLuckyWheelRewards {
	if x != nil {
		return x.RewardList
	}
	return nil
}

type DZPKHALLLuckyWheelRewards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardType   *int32  `protobuf:"varint,1,req,name=RewardType" json:"RewardType,omitempty"`
	RewardAmount *int32  `protobuf:"varint,2,req,name=RewardAmount" json:"RewardAmount,omitempty"`
	PosIndex     *string `protobuf:"bytes,3,req,name=PosIndex" json:"PosIndex,omitempty"`
	BulletType   *int32  `protobuf:"varint,4,req,name=BulletType" json:"BulletType,omitempty"`
}

func (x *DZPKHALLLuckyWheelRewards) Reset() {
	*x = DZPKHALLLuckyWheelRewards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DZPKHALLLuckyWheelRewards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DZPKHALLLuckyWheelRewards) ProtoMessage() {}

func (x *DZPKHALLLuckyWheelRewards) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DZPKHALLLuckyWheelRewards.ProtoReflect.Descriptor instead.
func (*DZPKHALLLuckyWheelRewards) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{72}
}

func (x *DZPKHALLLuckyWheelRewards) GetRewardType() int32 {
	if x != nil && x.RewardType != nil {
		return *x.RewardType
	}
	return 0
}

func (x *DZPKHALLLuckyWheelRewards) GetRewardAmount() int32 {
	if x != nil && x.RewardAmount != nil {
		return *x.RewardAmount
	}
	return 0
}

func (x *DZPKHALLLuckyWheelRewards) GetPosIndex() string {
	if x != nil && x.PosIndex != nil {
		return *x.PosIndex
	}
	return ""
}

func (x *DZPKHALLLuckyWheelRewards) GetBulletType() int32 {
	if x != nil && x.BulletType != nil {
		return *x.BulletType
	}
	return 0
}

type DZPKHALLLuckyWheelUserRewardRecordsRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardList []*DZPKHALLLuckyWheelUserRewardRecord `protobuf:"bytes,1,rep,name=RewardList" json:"RewardList,omitempty"`
}

func (x *DZPKHALLLuckyWheelUserRewardRecordsRet) Reset() {
	*x = DZPKHALLLuckyWheelUserRewardRecordsRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DZPKHALLLuckyWheelUserRewardRecordsRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DZPKHALLLuckyWheelUserRewardRecordsRet) ProtoMessage() {}

func (x *DZPKHALLLuckyWheelUserRewardRecordsRet) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DZPKHALLLuckyWheelUserRewardRecordsRet.ProtoReflect.Descriptor instead.
func (*DZPKHALLLuckyWheelUserRewardRecordsRet) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{73}
}

func (x *DZPKHALLLuckyWheelUserRewardRecordsRet) GetRewardList() []*DZPKHALLLuckyWheelUserRewardRecord {
	if x != nil {
		return x.RewardList
	}
	return nil
}

type DZPKHALLLuckyWheelUserRewardRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardType   *int32  `protobuf:"varint,1,req,name=RewardType" json:"RewardType,omitempty"`
	RewardAmount *int32  `protobuf:"varint,2,req,name=RewardAmount" json:"RewardAmount,omitempty"`
	NickName     *string `protobuf:"bytes,3,req,name=NickName" json:"NickName,omitempty"`
	BulletType   *int32  `protobuf:"varint,4,req,name=BulletType" json:"BulletType,omitempty"`
}

func (x *DZPKHALLLuckyWheelUserRewardRecord) Reset() {
	*x = DZPKHALLLuckyWheelUserRewardRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DZPKHALLLuckyWheelUserRewardRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DZPKHALLLuckyWheelUserRewardRecord) ProtoMessage() {}

func (x *DZPKHALLLuckyWheelUserRewardRecord) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DZPKHALLLuckyWheelUserRewardRecord.ProtoReflect.Descriptor instead.
func (*DZPKHALLLuckyWheelUserRewardRecord) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{74}
}

func (x *DZPKHALLLuckyWheelUserRewardRecord) GetRewardType() int32 {
	if x != nil && x.RewardType != nil {
		return *x.RewardType
	}
	return 0
}

func (x *DZPKHALLLuckyWheelUserRewardRecord) GetRewardAmount() int32 {
	if x != nil && x.RewardAmount != nil {
		return *x.RewardAmount
	}
	return 0
}

func (x *DZPKHALLLuckyWheelUserRewardRecord) GetNickName() string {
	if x != nil && x.NickName != nil {
		return *x.NickName
	}
	return ""
}

func (x *DZPKHALLLuckyWheelUserRewardRecord) GetBulletType() int32 {
	if x != nil && x.BulletType != nil {
		return *x.BulletType
	}
	return 0
}

//德撲娛樂城-更改頭像
type DZPKHALLChangeFace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FaceUrl *string `protobuf:"bytes,1,req,name=FaceUrl" json:"FaceUrl,omitempty"` //要改的暱稱
}

func (x *DZPKHALLChangeFace) Reset() {
	*x = DZPKHALLChangeFace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DZPKHALLChangeFace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DZPKHALLChangeFace) ProtoMessage() {}

func (x *DZPKHALLChangeFace) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DZPKHALLChangeFace.ProtoReflect.Descriptor instead.
func (*DZPKHALLChangeFace) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{75}
}

func (x *DZPKHALLChangeFace) GetFaceUrl() string {
	if x != nil && x.FaceUrl != nil {
		return *x.FaceUrl
	}
	return ""
}

//德撲娛樂城-更改頭像結果
type DZPKHALLChangeFaceRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           *int32  `protobuf:"varint,1,req,name=Code" json:"Code,omitempty"`                    //返回碼
	Message        *string `protobuf:"bytes,2,opt,name=Message" json:"Message,omitempty"`               //返回錯誤碼
	CurrentMoney   *int64  `protobuf:"varint,3,req,name=CurrentMoney" json:"CurrentMoney,omitempty"`    //現在擁有的金額
	CurrentFaceUrl *string `protobuf:"bytes,4,req,name=CurrentFaceUrl" json:"CurrentFaceUrl,omitempty"` //現在的頭像位置
	NextCost       *int32  `protobuf:"varint,5,req,name=NextCost" json:"NextCost,omitempty"`            //下次修改費用
}

func (x *DZPKHALLChangeFaceRet) Reset() {
	*x = DZPKHALLChangeFaceRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DZPKHALLChangeFaceRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DZPKHALLChangeFaceRet) ProtoMessage() {}

func (x *DZPKHALLChangeFaceRet) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DZPKHALLChangeFaceRet.ProtoReflect.Descriptor instead.
func (*DZPKHALLChangeFaceRet) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{76}
}

func (x *DZPKHALLChangeFaceRet) GetCode() int32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *DZPKHALLChangeFaceRet) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *DZPKHALLChangeFaceRet) GetCurrentMoney() int64 {
	if x != nil && x.CurrentMoney != nil {
		return *x.CurrentMoney
	}
	return 0
}

func (x *DZPKHALLChangeFaceRet) GetCurrentFaceUrl() string {
	if x != nil && x.CurrentFaceUrl != nil {
		return *x.CurrentFaceUrl
	}
	return ""
}

func (x *DZPKHALLChangeFaceRet) GetNextCost() int32 {
	if x != nil && x.NextCost != nil {
		return *x.NextCost
	}
	return 0
}

/////// 積分賽 ///////////////////////////////////////////////////////////////////////
type DZPKHALLPointsRaceActivityConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 活動ID
	ID *int32 `protobuf:"varint,1,req,name=ID" json:"ID,omitempty"`
	// 活動名稱
	Name *string `protobuf:"bytes,2,req,name=Name" json:"Name,omitempty"`
	// 活動開關
	Flag *bool `protobuf:"varint,3,req,name=Flag" json:"Flag,omitempty"`
	// 活動開始時間
	StartTime *int64 `protobuf:"varint,4,req,name=StartTime" json:"StartTime,omitempty"`
	// 活動結束時間
	EndTime *int64 `protobuf:"varint,5,req,name=EndTime" json:"EndTime,omitempty"`
	// 儲值開始時間
	DepositStartTime *int64 `protobuf:"varint,6,req,name=DepositStartTime" json:"DepositStartTime,omitempty"`
	// 儲值結束時間
	DepositEndTime *int64 `protobuf:"varint,7,req,name=DepositEndTime" json:"DepositEndTime,omitempty"`
	// 是否開啟下注積分計算
	BetFlag *bool `protobuf:"varint,8,req,name=BetFlag" json:"BetFlag,omitempty"`
	// 是否開啟儲值積分計算
	DepositFlag *bool `protobuf:"varint,9,req,name=DepositFlag" json:"DepositFlag,omitempty"`
	// 是否開啟贏分積分計算
	WinscoreFlag *bool `protobuf:"varint,10,req,name=WinscoreFlag" json:"WinscoreFlag,omitempty"`
	// 連接狀態
	Status *int32 `protobuf:"varint,11,req,name=Status" json:"Status,omitempty"`
	// 網址位置。依照status判斷是否使用此連結
	URL *string `protobuf:"bytes,12,req,name=URL" json:"URL,omitempty"`
	// 活動描述
	Description *string `protobuf:"bytes,13,req,name=Description" json:"Description,omitempty"`
	// 獎勵說明
	RewardMemo *string `protobuf:"bytes,14,req,name=RewardMemo" json:"RewardMemo,omitempty"`
	// 排行結束名次
	RankEnd      *int32                            `protobuf:"varint,15,req,name=RankEnd" json:"RankEnd,omitempty"`
	RewardConfig []*DZPKHALLPointsRaceRewardConfig `protobuf:"bytes,16,rep,name=RewardConfig" json:"RewardConfig,omitempty"`
}

func (x *DZPKHALLPointsRaceActivityConfig) Reset() {
	*x = DZPKHALLPointsRaceActivityConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DZPKHALLPointsRaceActivityConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DZPKHALLPointsRaceActivityConfig) ProtoMessage() {}

func (x *DZPKHALLPointsRaceActivityConfig) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DZPKHALLPointsRaceActivityConfig.ProtoReflect.Descriptor instead.
func (*DZPKHALLPointsRaceActivityConfig) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{77}
}

func (x *DZPKHALLPointsRaceActivityConfig) GetID() int32 {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return 0
}

func (x *DZPKHALLPointsRaceActivityConfig) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *DZPKHALLPointsRaceActivityConfig) GetFlag() bool {
	if x != nil && x.Flag != nil {
		return *x.Flag
	}
	return false
}

func (x *DZPKHALLPointsRaceActivityConfig) GetStartTime() int64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *DZPKHALLPointsRaceActivityConfig) GetEndTime() int64 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

func (x *DZPKHALLPointsRaceActivityConfig) GetDepositStartTime() int64 {
	if x != nil && x.DepositStartTime != nil {
		return *x.DepositStartTime
	}
	return 0
}

func (x *DZPKHALLPointsRaceActivityConfig) GetDepositEndTime() int64 {
	if x != nil && x.DepositEndTime != nil {
		return *x.DepositEndTime
	}
	return 0
}

func (x *DZPKHALLPointsRaceActivityConfig) GetBetFlag() bool {
	if x != nil && x.BetFlag != nil {
		return *x.BetFlag
	}
	return false
}

func (x *DZPKHALLPointsRaceActivityConfig) GetDepositFlag() bool {
	if x != nil && x.DepositFlag != nil {
		return *x.DepositFlag
	}
	return false
}

func (x *DZPKHALLPointsRaceActivityConfig) GetWinscoreFlag() bool {
	if x != nil && x.WinscoreFlag != nil {
		return *x.WinscoreFlag
	}
	return false
}

func (x *DZPKHALLPointsRaceActivityConfig) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *DZPKHALLPointsRaceActivityConfig) GetURL() string {
	if x != nil && x.URL != nil {
		return *x.URL
	}
	return ""
}

func (x *DZPKHALLPointsRaceActivityConfig) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *DZPKHALLPointsRaceActivityConfig) GetRewardMemo() string {
	if x != nil && x.RewardMemo != nil {
		return *x.RewardMemo
	}
	return ""
}

func (x *DZPKHALLPointsRaceActivityConfig) GetRankEnd() int32 {
	if x != nil && x.RankEnd != nil {
		return *x.RankEnd
	}
	return 0
}

func (x *DZPKHALLPointsRaceActivityConfig) GetRewardConfig() []*DZPKHALLPointsRaceRewardConfig {
	if x != nil {
		return x.RewardConfig
	}
	return nil
}

type DZPKHALLPointsRaceRewardConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 名次區間 開始
	RankBegin *int32 `protobuf:"varint,1,req,name=RankBegin" json:"RankBegin,omitempty"`
	// 名次區間 結束
	RankEnd *int32 `protobuf:"varint,2,req,name=RankEnd" json:"RankEnd,omitempty"`
	// 獎勵
	Reward []*Item `protobuf:"bytes,3,rep,name=Reward" json:"Reward,omitempty"`
	// 積分下限
	MinPoints *int32 `protobuf:"varint,4,req,name=MinPoints" json:"MinPoints,omitempty"`
	// 贏分下限
	MinWin *int32 `protobuf:"varint,5,req,name=MinWin" json:"MinWin,omitempty"`
	// 押注下限
	MinBet *int32 `protobuf:"varint,6,req,name=MinBet" json:"MinBet,omitempty"`
	// 儲值下限
	MinTopup *int32 `protobuf:"varint,7,req,name=MinTopup" json:"MinTopup,omitempty"`
}

func (x *DZPKHALLPointsRaceRewardConfig) Reset() {
	*x = DZPKHALLPointsRaceRewardConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DZPKHALLPointsRaceRewardConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DZPKHALLPointsRaceRewardConfig) ProtoMessage() {}

func (x *DZPKHALLPointsRaceRewardConfig) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DZPKHALLPointsRaceRewardConfig.ProtoReflect.Descriptor instead.
func (*DZPKHALLPointsRaceRewardConfig) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{78}
}

func (x *DZPKHALLPointsRaceRewardConfig) GetRankBegin() int32 {
	if x != nil && x.RankBegin != nil {
		return *x.RankBegin
	}
	return 0
}

func (x *DZPKHALLPointsRaceRewardConfig) GetRankEnd() int32 {
	if x != nil && x.RankEnd != nil {
		return *x.RankEnd
	}
	return 0
}

func (x *DZPKHALLPointsRaceRewardConfig) GetReward() []*Item {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *DZPKHALLPointsRaceRewardConfig) GetMinPoints() int32 {
	if x != nil && x.MinPoints != nil {
		return *x.MinPoints
	}
	return 0
}

func (x *DZPKHALLPointsRaceRewardConfig) GetMinWin() int32 {
	if x != nil && x.MinWin != nil {
		return *x.MinWin
	}
	return 0
}

func (x *DZPKHALLPointsRaceRewardConfig) GetMinBet() int32 {
	if x != nil && x.MinBet != nil {
		return *x.MinBet
	}
	return 0
}

func (x *DZPKHALLPointsRaceRewardConfig) GetMinTopup() int32 {
	if x != nil && x.MinTopup != nil {
		return *x.MinTopup
	}
	return 0
}

// 取得排行榜資訊
type DZPKHALLPointRaceReqRanking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 玩家ID
	UserID     *int32 `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`
	RankStart  *int32 `protobuf:"varint,2,req,name=RankStart" json:"RankStart,omitempty"`
	RankEnd    *int32 `protobuf:"varint,3,req,name=RankEnd" json:"RankEnd,omitempty"`
	ActivityID *int32 `protobuf:"varint,4,req,name=ActivityID" json:"ActivityID,omitempty"`
}

func (x *DZPKHALLPointRaceReqRanking) Reset() {
	*x = DZPKHALLPointRaceReqRanking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DZPKHALLPointRaceReqRanking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DZPKHALLPointRaceReqRanking) ProtoMessage() {}

func (x *DZPKHALLPointRaceReqRanking) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DZPKHALLPointRaceReqRanking.ProtoReflect.Descriptor instead.
func (*DZPKHALLPointRaceReqRanking) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{79}
}

func (x *DZPKHALLPointRaceReqRanking) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *DZPKHALLPointRaceReqRanking) GetRankStart() int32 {
	if x != nil && x.RankStart != nil {
		return *x.RankStart
	}
	return 0
}

func (x *DZPKHALLPointRaceReqRanking) GetRankEnd() int32 {
	if x != nil && x.RankEnd != nil {
		return *x.RankEnd
	}
	return 0
}

func (x *DZPKHALLPointRaceReqRanking) GetActivityID() int32 {
	if x != nil && x.ActivityID != nil {
		return *x.ActivityID
	}
	return 0
}

// 排行榜清單
type DZPKHALLPointsRaceRankList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 玩家目前Rank
	UserRank  *DZPKHALLPointsRaceRank `protobuf:"bytes,1,req,name=UserRank" json:"UserRank,omitempty"`
	RankStart *int32                  `protobuf:"varint,2,req,name=RankStart" json:"RankStart,omitempty"`
	RankEnd   *int32                  `protobuf:"varint,3,req,name=RankEnd" json:"RankEnd,omitempty"`
	// 排行榜清單
	RankList []*DZPKHALLPointsRaceRank `protobuf:"bytes,4,rep,name=RankList" json:"RankList,omitempty"`
	// 最後一次更新時間
	LastUpdateTime *int64 `protobuf:"varint,5,req,name=LastUpdateTime" json:"LastUpdateTime,omitempty"`
}

func (x *DZPKHALLPointsRaceRankList) Reset() {
	*x = DZPKHALLPointsRaceRankList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DZPKHALLPointsRaceRankList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DZPKHALLPointsRaceRankList) ProtoMessage() {}

func (x *DZPKHALLPointsRaceRankList) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DZPKHALLPointsRaceRankList.ProtoReflect.Descriptor instead.
func (*DZPKHALLPointsRaceRankList) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{80}
}

func (x *DZPKHALLPointsRaceRankList) GetUserRank() *DZPKHALLPointsRaceRank {
	if x != nil {
		return x.UserRank
	}
	return nil
}

func (x *DZPKHALLPointsRaceRankList) GetRankStart() int32 {
	if x != nil && x.RankStart != nil {
		return *x.RankStart
	}
	return 0
}

func (x *DZPKHALLPointsRaceRankList) GetRankEnd() int32 {
	if x != nil && x.RankEnd != nil {
		return *x.RankEnd
	}
	return 0
}

func (x *DZPKHALLPointsRaceRankList) GetRankList() []*DZPKHALLPointsRaceRank {
	if x != nil {
		return x.RankList
	}
	return nil
}

func (x *DZPKHALLPointsRaceRankList) GetLastUpdateTime() int64 {
	if x != nil && x.LastUpdateTime != nil {
		return *x.LastUpdateTime
	}
	return 0
}

// 排行榜資料
type DZPKHALLPointsRaceRank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID   *int32  `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`
	UserName *string `protobuf:"bytes,2,req,name=UserName" json:"UserName,omitempty"`
	// 名次
	Rank *int32 `protobuf:"varint,3,req,name=Rank" json:"Rank,omitempty"`
	// 積分
	Points *int32 `protobuf:"varint,4,req,name=Points" json:"Points,omitempty"`
	// 儲值
	DepositValue *int32 `protobuf:"varint,5,opt,name=DepositValue" json:"DepositValue,omitempty"`
	// 下注
	BetValue *int32 `protobuf:"varint,6,opt,name=BetValue" json:"BetValue,omitempty"`
	// 贏分
	WinscoreValue *int32 `protobuf:"varint,7,opt,name=WinscoreValue" json:"WinscoreValue,omitempty"`
	FaceID        *int32 `protobuf:"varint,8,opt,name=FaceID" json:"FaceID,omitempty"`
	MaxRank       *int32 `protobuf:"varint,9,opt,name=MaxRank" json:"MaxRank,omitempty"`
}

func (x *DZPKHALLPointsRaceRank) Reset() {
	*x = DZPKHALLPointsRaceRank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DZPKHALLPointsRaceRank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DZPKHALLPointsRaceRank) ProtoMessage() {}

func (x *DZPKHALLPointsRaceRank) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DZPKHALLPointsRaceRank.ProtoReflect.Descriptor instead.
func (*DZPKHALLPointsRaceRank) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{81}
}

func (x *DZPKHALLPointsRaceRank) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *DZPKHALLPointsRaceRank) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *DZPKHALLPointsRaceRank) GetRank() int32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *DZPKHALLPointsRaceRank) GetPoints() int32 {
	if x != nil && x.Points != nil {
		return *x.Points
	}
	return 0
}

func (x *DZPKHALLPointsRaceRank) GetDepositValue() int32 {
	if x != nil && x.DepositValue != nil {
		return *x.DepositValue
	}
	return 0
}

func (x *DZPKHALLPointsRaceRank) GetBetValue() int32 {
	if x != nil && x.BetValue != nil {
		return *x.BetValue
	}
	return 0
}

func (x *DZPKHALLPointsRaceRank) GetWinscoreValue() int32 {
	if x != nil && x.WinscoreValue != nil {
		return *x.WinscoreValue
	}
	return 0
}

func (x *DZPKHALLPointsRaceRank) GetFaceID() int32 {
	if x != nil && x.FaceID != nil {
		return *x.FaceID
	}
	return 0
}

func (x *DZPKHALLPointsRaceRank) GetMaxRank() int32 {
	if x != nil && x.MaxRank != nil {
		return *x.MaxRank
	}
	return 0
}

// 領取積分賽獎勵
type DZPKHALLPointsRaceReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank   *int32  `protobuf:"varint,1,req,name=Rank" json:"Rank,omitempty"`
	Reward []*Item `protobuf:"bytes,2,rep,name=Reward" json:"Reward,omitempty"`
}

func (x *DZPKHALLPointsRaceReward) Reset() {
	*x = DZPKHALLPointsRaceReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DZPKHALLPointsRaceReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DZPKHALLPointsRaceReward) ProtoMessage() {}

func (x *DZPKHALLPointsRaceReward) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DZPKHALLPointsRaceReward.ProtoReflect.Descriptor instead.
func (*DZPKHALLPointsRaceReward) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{82}
}

func (x *DZPKHALLPointsRaceReward) GetRank() int32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *DZPKHALLPointsRaceReward) GetReward() []*Item {
	if x != nil {
		return x.Reward
	}
	return nil
}

// 儲值活動資料
type DZPKHALLDepositActivityData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config   *DZPKHALLDepositActivityConfig         `protobuf:"bytes,1,req,name=Config" json:"Config,omitempty"`
	Rewards  []*DZPKHALLDepositActivityRewardConfig `protobuf:"bytes,2,rep,name=Rewards" json:"Rewards,omitempty"`
	UserData *DZPKHALLDepositActivityUser           `protobuf:"bytes,3,req,name=UserData" json:"UserData,omitempty"`
}

func (x *DZPKHALLDepositActivityData) Reset() {
	*x = DZPKHALLDepositActivityData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DZPKHALLDepositActivityData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DZPKHALLDepositActivityData) ProtoMessage() {}

func (x *DZPKHALLDepositActivityData) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DZPKHALLDepositActivityData.ProtoReflect.Descriptor instead.
func (*DZPKHALLDepositActivityData) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{83}
}

func (x *DZPKHALLDepositActivityData) GetConfig() *DZPKHALLDepositActivityConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *DZPKHALLDepositActivityData) GetRewards() []*DZPKHALLDepositActivityRewardConfig {
	if x != nil {
		return x.Rewards
	}
	return nil
}

func (x *DZPKHALLDepositActivityData) GetUserData() *DZPKHALLDepositActivityUser {
	if x != nil {
		return x.UserData
	}
	return nil
}

// 儲值活動設定-獎項表
type DZPKHALLDepositActivityConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeginTime *string `protobuf:"bytes,1,req,name=BeginTime" json:"BeginTime,omitempty"`
	EndTime   *string `protobuf:"bytes,2,req,name=EndTime" json:"EndTime,omitempty"`
}

func (x *DZPKHALLDepositActivityConfig) Reset() {
	*x = DZPKHALLDepositActivityConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DZPKHALLDepositActivityConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DZPKHALLDepositActivityConfig) ProtoMessage() {}

func (x *DZPKHALLDepositActivityConfig) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DZPKHALLDepositActivityConfig.ProtoReflect.Descriptor instead.
func (*DZPKHALLDepositActivityConfig) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{84}
}

func (x *DZPKHALLDepositActivityConfig) GetBeginTime() string {
	if x != nil && x.BeginTime != nil {
		return *x.BeginTime
	}
	return ""
}

func (x *DZPKHALLDepositActivityConfig) GetEndTime() string {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return ""
}

// 儲值活動設定-獎項表
type DZPKHALLDepositActivityRewardConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID             *int32 `protobuf:"varint,1,req,name=ID" json:"ID,omitempty"`
	RewardAmount   *int32 `protobuf:"varint,2,req,name=RewardAmount" json:"RewardAmount,omitempty"`
	BetAmount      *int32 `protobuf:"varint,3,req,name=BetAmount" json:"BetAmount,omitempty"`
	RechargeAmount *int32 `protobuf:"varint,4,req,name=RechargeAmount" json:"RechargeAmount,omitempty"`
}

func (x *DZPKHALLDepositActivityRewardConfig) Reset() {
	*x = DZPKHALLDepositActivityRewardConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DZPKHALLDepositActivityRewardConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DZPKHALLDepositActivityRewardConfig) ProtoMessage() {}

func (x *DZPKHALLDepositActivityRewardConfig) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DZPKHALLDepositActivityRewardConfig.ProtoReflect.Descriptor instead.
func (*DZPKHALLDepositActivityRewardConfig) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{85}
}

func (x *DZPKHALLDepositActivityRewardConfig) GetID() int32 {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return 0
}

func (x *DZPKHALLDepositActivityRewardConfig) GetRewardAmount() int32 {
	if x != nil && x.RewardAmount != nil {
		return *x.RewardAmount
	}
	return 0
}

func (x *DZPKHALLDepositActivityRewardConfig) GetBetAmount() int32 {
	if x != nil && x.BetAmount != nil {
		return *x.BetAmount
	}
	return 0
}

func (x *DZPKHALLDepositActivityRewardConfig) GetRechargeAmount() int32 {
	if x != nil && x.RechargeAmount != nil {
		return *x.RechargeAmount
	}
	return 0
}

// 儲值活動設定-玩家狀態
type DZPKHALLDepositActivityUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetAmount      *int64 `protobuf:"varint,1,req,name=BetAmount" json:"BetAmount,omitempty"`
	RechargeAmount *int64 `protobuf:"varint,2,req,name=RechargeAmount" json:"RechargeAmount,omitempty"`
}

func (x *DZPKHALLDepositActivityUser) Reset() {
	*x = DZPKHALLDepositActivityUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DZPKHALLDepositActivityUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DZPKHALLDepositActivityUser) ProtoMessage() {}

func (x *DZPKHALLDepositActivityUser) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DZPKHALLDepositActivityUser.ProtoReflect.Descriptor instead.
func (*DZPKHALLDepositActivityUser) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{86}
}

func (x *DZPKHALLDepositActivityUser) GetBetAmount() int64 {
	if x != nil && x.BetAmount != nil {
		return *x.BetAmount
	}
	return 0
}

func (x *DZPKHALLDepositActivityUser) GetRechargeAmount() int64 {
	if x != nil && x.RechargeAmount != nil {
		return *x.RechargeAmount
	}
	return 0
}

type UserLoginList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users []*UserLoginRet `protobuf:"bytes,1,rep,name=Users" json:"Users,omitempty"`
}

func (x *UserLoginList) Reset() {
	*x = UserLoginList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLoginList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLoginList) ProtoMessage() {}

func (x *UserLoginList) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLoginList.ProtoReflect.Descriptor instead.
func (*UserLoginList) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{87}
}

func (x *UserLoginList) GetUsers() []*UserLoginRet {
	if x != nil {
		return x.Users
	}
	return nil
}

//用戶登入
type UserLoginSms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HDCode      *string `protobuf:"bytes,1,req,name=HDCode" json:"HDCode,omitempty"`             //設備碼
	HDType      *int32  `protobuf:"varint,2,req,name=HDType" json:"HDType,omitempty"`            //設備類型
	SiteID      *int32  `protobuf:"varint,3,req,name=SiteID" json:"SiteID,omitempty"`            //通路ID
	Version     *string `protobuf:"bytes,4,req,name=Version" json:"Version,omitempty"`           //客戶端版本號
	PlatformID  *int32  `protobuf:"varint,5,req,name=PlatformID" json:"PlatformID,omitempty"`    //平臺號
	LoginName   *string `protobuf:"bytes,6,req,name=LoginName" json:"LoginName,omitempty"`       //用戶名
	Password    *string `protobuf:"bytes,7,req,name=Password" json:"Password,omitempty"`         //密碼
	BunldID     *string `protobuf:"bytes,8,req,name=BunldID" json:"BunldID,omitempty"`           //BunldID
	Ver         *string `protobuf:"bytes,9,req,name=Ver" json:"Ver,omitempty"`                   //版本號
	CountryCode *int32  `protobuf:"varint,10,req,name=CountryCode" json:"CountryCode,omitempty"` //國際代碼
	VCode       *string `protobuf:"bytes,11,req,name=VCode" json:"VCode,omitempty"`              //簡訊驗證碼
	ClientIP    *string `protobuf:"bytes,16,opt,name=ClientIP" json:"ClientIP,omitempty"`        // 玩家IP
}

func (x *UserLoginSms) Reset() {
	*x = UserLoginSms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLoginSms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLoginSms) ProtoMessage() {}

func (x *UserLoginSms) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLoginSms.ProtoReflect.Descriptor instead.
func (*UserLoginSms) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{88}
}

func (x *UserLoginSms) GetHDCode() string {
	if x != nil && x.HDCode != nil {
		return *x.HDCode
	}
	return ""
}

func (x *UserLoginSms) GetHDType() int32 {
	if x != nil && x.HDType != nil {
		return *x.HDType
	}
	return 0
}

func (x *UserLoginSms) GetSiteID() int32 {
	if x != nil && x.SiteID != nil {
		return *x.SiteID
	}
	return 0
}

func (x *UserLoginSms) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *UserLoginSms) GetPlatformID() int32 {
	if x != nil && x.PlatformID != nil {
		return *x.PlatformID
	}
	return 0
}

func (x *UserLoginSms) GetLoginName() string {
	if x != nil && x.LoginName != nil {
		return *x.LoginName
	}
	return ""
}

func (x *UserLoginSms) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *UserLoginSms) GetBunldID() string {
	if x != nil && x.BunldID != nil {
		return *x.BunldID
	}
	return ""
}

func (x *UserLoginSms) GetVer() string {
	if x != nil && x.Ver != nil {
		return *x.Ver
	}
	return ""
}

func (x *UserLoginSms) GetCountryCode() int32 {
	if x != nil && x.CountryCode != nil {
		return *x.CountryCode
	}
	return 0
}

func (x *UserLoginSms) GetVCode() string {
	if x != nil && x.VCode != nil {
		return *x.VCode
	}
	return ""
}

func (x *UserLoginSms) GetClientIP() string {
	if x != nil && x.ClientIP != nil {
		return *x.ClientIP
	}
	return ""
}

type CleanUserGameList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID  *int32 `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`
	Channel *int32 `protobuf:"varint,2,req,name=Channel" json:"Channel,omitempty"`
}

func (x *CleanUserGameList) Reset() {
	*x = CleanUserGameList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CleanUserGameList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanUserGameList) ProtoMessage() {}

func (x *CleanUserGameList) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanUserGameList.ProtoReflect.Descriptor instead.
func (*CleanUserGameList) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{89}
}

func (x *CleanUserGameList) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *CleanUserGameList) GetChannel() int32 {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return 0
}

type GetUserGameList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID  *int32 `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`
	Channel *int32 `protobuf:"varint,2,req,name=Channel" json:"Channel,omitempty"`
}

func (x *GetUserGameList) Reset() {
	*x = GetUserGameList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserGameList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserGameList) ProtoMessage() {}

func (x *GetUserGameList) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserGameList.ProtoReflect.Descriptor instead.
func (*GetUserGameList) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{90}
}

func (x *GetUserGameList) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *GetUserGameList) GetChannel() int32 {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return 0
}

type GetUserGameListRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID   *int32              `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`
	GameList []*UserGameListInfo `protobuf:"bytes,2,rep,name=GameList" json:"GameList,omitempty"`
}

func (x *GetUserGameListRet) Reset() {
	*x = GetUserGameListRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserGameListRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserGameListRet) ProtoMessage() {}

func (x *GetUserGameListRet) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserGameListRet.ProtoReflect.Descriptor instead.
func (*GetUserGameListRet) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{91}
}

func (x *GetUserGameListRet) GetUserID() int32 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *GetUserGameListRet) GetGameList() []*UserGameListInfo {
	if x != nil {
		return x.GameList
	}
	return nil
}

type UserGameListInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameID    *int32 `protobuf:"varint,1,req,name=GameID" json:"GameID,omitempty"`
	LoginTime *int64 `protobuf:"varint,2,req,name=LoginTime" json:"LoginTime,omitempty"`
}

func (x *UserGameListInfo) Reset() {
	*x = UserGameListInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HallMsg_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserGameListInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserGameListInfo) ProtoMessage() {}

func (x *UserGameListInfo) ProtoReflect() protoreflect.Message {
	mi := &file_HallMsg_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserGameListInfo.ProtoReflect.Descriptor instead.
func (*UserGameListInfo) Descriptor() ([]byte, []int) {
	return file_HallMsg_proto_rawDescGZIP(), []int{92}
}

func (x *UserGameListInfo) GetGameID() int32 {
	if x != nil && x.GameID != nil {
		return *x.GameID
	}
	return 0
}

func (x *UserGameListInfo) GetLoginTime() int64 {
	if x != nil && x.LoginTime != nil {
		return *x.LoginTime
	}
	return 0
}

var File_HallMsg_proto protoreflect.FileDescriptor

var file_HallMsg_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x48, 0x61, 0x6c, 0x6c, 0x4d, 0x73, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x08, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x48, 0x61, 0x6c, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x73, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc8, 0x02, 0x0a, 0x0a, 0x47, 0x75, 0x65, 0x73, 0x74,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x44, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x48, 0x44, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x48, 0x44, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x48,
	0x44, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x69, 0x74, 0x65, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x53, 0x69, 0x74, 0x65, 0x49, 0x44, 0x12, 0x18, 0x0a,
	0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x49, 0x44, 0x18, 0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x57, 0x78, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x44, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x57, 0x78, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x09, 0x57, 0x78, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x57, 0x78, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x18, 0x0a,
	0x07, 0x42, 0x75, 0x6e, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x42, 0x75, 0x6e, 0x6c, 0x64, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x56, 0x65, 0x72, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x56, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x50, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x50, 0x22, 0xaf, 0x03, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x48, 0x44, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x06, 0x48, 0x44, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x44, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x48, 0x44, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x53, 0x69, 0x74, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x06, 0x53, 0x69, 0x74, 0x65, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x44, 0x18,
	0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49,
	0x44, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x43, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x43, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x75, 0x6e, 0x6c, 0x64, 0x49, 0x44,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x42, 0x75, 0x6e, 0x6c, 0x64, 0x49, 0x44, 0x12,
	0x10, 0x0a, 0x03, 0x56, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x56, 0x65,
	0x72, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x50, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x50, 0x22, 0xe9, 0x01, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x52, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x43, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x43, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x48, 0x44, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x48, 0x44,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x44, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x48, 0x44, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x08,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x48, 0x61,
	0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x47,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x47, 0x22,
	0xc4, 0x0e, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x48, 0x61, 0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x53,
	0x65, 0x78, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x53, 0x65, 0x78, 0x12, 0x16, 0x0a,
	0x06, 0x48, 0x65, 0x61, 0x64, 0x49, 0x44, 0x18, 0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x48,
	0x65, 0x61, 0x64, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73, 0x54, 0x6f, 0x70, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x18, 0x06, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0b, 0x49, 0x73, 0x54, 0x6f,
	0x70, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x61, 0x73, 0x68, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x61, 0x73,
	0x68, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x61, 0x6e, 0x6b, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0a, 0x42, 0x61, 0x6e,
	0x6b, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x47, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x02, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x47, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41,
	0x64, 0x64, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x4b, 0x69, 0x63, 0x6b, 0x18, 0x0c, 0x20,
	0x02, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x4b, 0x69, 0x63, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x49,
	0x73, 0x42, 0x69, 0x6e, 0x64, 0x47, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x02, 0x28, 0x08,
	0x52, 0x0b, 0x49, 0x73, 0x42, 0x69, 0x6e, 0x64, 0x47, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0e, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x09, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x4b, 0x65, 0x79, 0x18, 0x0f, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6e, 0x6e, 0x4d, 0x73,
	0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x6e, 0x6e, 0x4d, 0x73, 0x67, 0x12,
	0x2c, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x52, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x70, 0x4d, 0x73, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x74, 0x52, 0x61, 0x74, 0x65, 0x54, 0x69, 0x70, 0x4d, 0x73, 0x67, 0x12, 0x24, 0x0a,
	0x0d, 0x42, 0x61, 0x6e, 0x6b, 0x50, 0x77, 0x64, 0x54, 0x69, 0x70, 0x4d, 0x73, 0x67, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x42, 0x61, 0x6e, 0x6b, 0x50, 0x77, 0x64, 0x54, 0x69, 0x70,
	0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x49, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x49, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x50,
	0x61, 0x79, 0x53, 0x6f, 0x72, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x61,
	0x79, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x70, 0x47, 0x72, 0x61, 0x64, 0x65,
	0x4d, 0x73, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x55, 0x70, 0x47, 0x72, 0x61,
	0x64, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x6f, 0x63, 0x6b, 0x47, 0x61, 0x6d,
	0x65, 0x49, 0x44, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4c, 0x6f, 0x63, 0x6b, 0x47,
	0x61, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x49, 0x73, 0x42, 0x69, 0x6e, 0x64, 0x5a,
	0x68, 0x69, 0x66, 0x75, 0x62, 0x61, 0x6f, 0x18, 0x17, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0e, 0x49,
	0x73, 0x42, 0x69, 0x6e, 0x64, 0x5a, 0x68, 0x69, 0x66, 0x75, 0x62, 0x61, 0x6f, 0x12, 0x1a, 0x0a,
	0x08, 0x5a, 0x68, 0x69, 0x66, 0x75, 0x62, 0x61, 0x6f, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x5a, 0x68, 0x69, 0x66, 0x75, 0x62, 0x61, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x61,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x61,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a,
	0x0f, 0x50, 0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x50, 0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x61, 0x79, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x4d, 0x73, 0x67, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x50,
	0x61, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x50,
	0x61, 0x79, 0x54, 0x69, 0x70, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x61,
	0x79, 0x54, 0x69, 0x70, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x49, 0x73, 0x42, 0x69, 0x6e, 0x64, 0x42,
	0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x49,
	0x73, 0x42, 0x69, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x12, 0x26, 0x0a,
	0x0e, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x61, 0x6e,
	0x6b, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x61, 0x6e,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x61, 0x6e,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x74, 0x52, 0x61, 0x74, 0x65, 0x54, 0x69, 0x70, 0x4d, 0x73, 0x67, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x74, 0x52, 0x61, 0x74, 0x65, 0x54, 0x69, 0x70, 0x4d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x56,
	0x47, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x53, 0x18, 0x24, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x56,
	0x47, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x53, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x56, 0x47, 0x61,
	0x6d, 0x65, 0x49, 0x44, 0x18, 0x25, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x49, 0x6e, 0x56, 0x47,
	0x61, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x58, 0x69, 0x75, 0x58, 0x69, 0x61, 0x6e,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x58, 0x69,
	0x75, 0x58, 0x69, 0x61, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x58,
	0x69, 0x75, 0x58, 0x69, 0x61, 0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x58, 0x69, 0x75, 0x58, 0x69, 0x61, 0x6e,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x10, 0x47,
	0x61, 0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x28, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x10, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x69, 0x61, 0x6e, 0x79, 0x75, 0x6e, 0x49, 0x44,
	0x18, 0x29, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4c, 0x69, 0x61, 0x6e, 0x79, 0x75, 0x6e, 0x49,
	0x44, 0x12, 0x3b, 0x0a, 0x0b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x2a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x6b, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x56, 0x69, 0x70, 0x4c, 0x76, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x56,
	0x69, 0x70, 0x4c, 0x76, 0x12, 0x20, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x49, 0x44, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x2e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x22,
	0x0a, 0x0c, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2f,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x69, 0x63, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x30, 0x20, 0x02, 0x28, 0x03, 0x52, 0x12,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x6f,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x61, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x31, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x07, 0x46, 0x61, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x26, 0x0a, 0x0e,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x32,
	0x20, 0x02, 0x28, 0x03, 0x52, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x61, 0x63, 0x65,
	0x43, 0x6f, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x34, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x13, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x46, 0x61, 0x63, 0x65, 0x55, 0x72,
	0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x35, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x12, 0x46, 0x61, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x60, 0x0a, 0x10, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x6f,
	0x72, 0x74, 0x43, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61,
	0x6d, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65,
	0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x46, 0x0a, 0x10, 0x47, 0x61, 0x6d, 0x65,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x0a, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0xdf, 0x01, 0x0a, 0x0f, 0x53, 0x6b, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x75, 0x6e, 0x6c, 0x64, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x42, 0x75, 0x6e, 0x6c, 0x64, 0x49, 0x44, 0x12, 0x10,
	0x0a, 0x03, 0x56, 0x65, 0x72, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x03, 0x56, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x56, 0x65, 0x72, 0x31, 0x18, 0x05, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x04, 0x56, 0x65, 0x72, 0x31, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x18,
	0x0a, 0x07, 0x53, 0x6b, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x18, 0x08, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x07, 0x53, 0x6b, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x49, 0x50, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x49, 0x50, 0x22, 0x36, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x43, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x03, 0x43, 0x65, 0x72, 0x22, 0x55, 0x0a, 0x0b, 0x48, 0x61,
	0x6c, 0x6c, 0x56, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x6e, 0x64,
	0x72, 0x6f, 0x69, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x0e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x4f, 0x53, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x4f, 0x53, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x4d, 0x0a, 0x11, 0x41, 0x6c, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x65, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0xd4, 0x02, 0x0a, 0x0e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x47,
	0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x47,
	0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x18,
	0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x61, 0x73, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x06, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x42, 0x61, 0x73, 0x65, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x41, 0x6e, 0x64, 0x72, 0x6f,
	0x69, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x4f, 0x53,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49,
	0x4f, 0x53, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x6f, 0x53,
	0x65, 0x6c, 0x52, 0x6f, 0x6f, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4e, 0x6f,
	0x53, 0x65, 0x6c, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x52,
	0x6f, 0x6f, 0x6d, 0x44, 0x65, 0x73, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52,
	0x6f, 0x6f, 0x6d, 0x44, 0x65, 0x73, 0x63, 0x22, 0x8f, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46,
	0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a,
	0x09, 0x49, 0x73, 0x4c, 0x69, 0x61, 0x6e, 0x79, 0x75, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x49, 0x73, 0x4c, 0x69, 0x61, 0x6e, 0x79, 0x75, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x4c,
	0x69, 0x61, 0x6e, 0x79, 0x75, 0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x4c, 0x69, 0x61, 0x6e, 0x79, 0x75, 0x6e, 0x49, 0x44, 0x22, 0x5e, 0x0a, 0x0e, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x49, 0x50, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x7a, 0x0a, 0x0c, 0x5a, 0x68, 0x69,
	0x66, 0x75, 0x62, 0x61, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x5a, 0x68, 0x69,
	0x66, 0x75, 0x62, 0x61, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x5a, 0x68, 0x69,
	0x66, 0x75, 0x62, 0x61, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x65, 0x65, 0x64, 0x56, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4e, 0x65, 0x65, 0x64, 0x56, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x56, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x56, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x4a, 0x0a, 0x0e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x6c, 0x64, 0x50, 0x77,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x4f, 0x6c, 0x64, 0x50, 0x77, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x4e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x4e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x22, 0x80, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x56,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x54, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x79, 0x0a, 0x11, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x56, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x44, 0x6f, 0x77, 0x6e, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x47,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x47, 0x22,
	0x46, 0x0a, 0x0a, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x46, 0x61, 0x63, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x46, 0x61, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x46,
	0x61, 0x63, 0x65, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x61, 0x63, 0x65, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x46, 0x61, 0x63, 0x65,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x22, 0x5c, 0x0a, 0x0c, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x24, 0x0a, 0x0d, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x4f, 0x50, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x02, 0x4f, 0x50, 0x22, 0xc7, 0x01, 0x0a, 0x0f, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x4f, 0x50, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x4f,
	0x50, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18,
	0x05, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x61,
	0x6e, 0x6b, 0x18, 0x06, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x42, 0x61, 0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x47,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x47, 0x22,
	0xee, 0x01, 0x0a, 0x10, 0x42, 0x69, 0x6e, 0x64, 0x47, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x03, 0x54, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x56, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x2d, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x48,
	0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x69, 0x74, 0x65, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x53, 0x69, 0x74, 0x65, 0x49, 0x44, 0x22,
	0x79, 0x0a, 0x11, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x50, 0x77, 0x64, 0x42, 0x79, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x03, 0x54, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x56, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x4e, 0x0a, 0x12, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x4f, 0x6c, 0x64, 0x50, 0x77, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x06, 0x4f, 0x6c, 0x64, 0x50, 0x77, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x4e, 0x65, 0x77, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x4e,
	0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x49, 0x0a, 0x15, 0x46, 0x69,
	0x6e, 0x64, 0x53, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x50, 0x77, 0x64, 0x42, 0x79, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x05, 0x56, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x80, 0x01, 0x0a, 0x0a, 0x4d, 0x61, 0x69, 0x6c, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x52, 0x65, 0x61, 0x64, 0x18, 0x04,
	0x20, 0x02, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x52, 0x65, 0x61, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x53, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08,
	0x53, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x3c, 0x0a, 0x08, 0x4d, 0x61, 0x69, 0x6c,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x08, 0x4d, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x61, 0x69, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x08, 0x4d, 0x61,
	0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x23, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4d, 0x61, 0x69, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x49, 0x44, 0x22, 0x22, 0x0a, 0x0e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x4d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x03, 0x4d, 0x73, 0x67, 0x22,
	0x45, 0x0a, 0x0b, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x61, 0x74, 0x69, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x57, 0x58, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x04, 0x57, 0x58, 0x4e, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x51, 0x51, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x02, 0x51, 0x51, 0x22, 0x40, 0x0a, 0x09, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x61, 0x74, 0x69, 0x6c, 0x52, 0x09, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x5d, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x72, 0x65, 0x61, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x41, 0x72, 0x65, 0x61, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x09, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x09, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x2a, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x41,
	0x72, 0x65, 0x61, 0x49, 0x44, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x41, 0x72, 0x65,
	0x61, 0x49, 0x44, 0x22, 0x82, 0x01, 0x0a, 0x0a, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x72, 0x65, 0x61, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x06, 0x41, 0x72, 0x65, 0x61, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x54, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x03, 0x54, 0x65, 0x6c,
	0x12, 0x0e, 0x0a, 0x02, 0x51, 0x51, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x02, 0x51, 0x51,
	0x12, 0x12, 0x0a, 0x04, 0x57, 0x58, 0x4e, 0x6f, 0x18, 0x05, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04,
	0x57, 0x58, 0x4e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x65, 0x6d, 0x6f, 0x18, 0x06, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x04, 0x4d, 0x65, 0x6d, 0x6f, 0x22, 0x40, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x76, 0x74, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x63, 0x76, 0x74, 0x74, 0x79, 0x70, 0x65, 0x22, 0x46, 0x0a, 0x0e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x50, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x09, 0x50, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x75, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x18, 0x0a, 0x07, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x47, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x47, 0x22, 0x28, 0x0a, 0x06, 0x47, 0x65, 0x74,
	0x46, 0x41, 0x51, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x49, 0x44, 0x22, 0x25, 0x0a, 0x09, 0x46, 0x41, 0x51, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xaa, 0x01, 0x0a, 0x0c, 0x42,
	0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x42,
	0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x0e, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x43,
	0x61, 0x72, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x65, 0x65, 0x64, 0x56, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4e, 0x65, 0x65, 0x64, 0x56, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x56, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x77, 0x0a, 0x11, 0x55, 0x6e, 0x62, 0x69, 0x6e,
	0x64, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x54, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x03, 0x54, 0x65, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x56, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x56,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x76, 0x74, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x63, 0x76, 0x74, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0x39, 0x0a, 0x0d, 0x54, 0x68, 0x69, 0x72, 0x64, 0x41, 0x50, 0x49, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5a, 0x0a, 0x0b, 0x54,
	0x68, 0x69, 0x72, 0x64, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65,
	0x71, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65,
	0x71, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x68, 0x69, 0x72, 0x64, 0x41, 0x50, 0x49, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52,
	0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x56, 0x0a, 0x0c, 0x54, 0x68, 0x69, 0x72, 0x64,
	0x41, 0x50, 0x49, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x74, 0x4a, 0x73, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x52, 0x65, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x22,
	0x2b, 0x0a, 0x0f, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x50, 0x49, 0x52,
	0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x07, 0x56, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x22, 0x5b, 0x0a, 0x0f,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x50, 0x49, 0x52, 0x65, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x56, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x07, 0x56, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xe9, 0x01, 0x0a, 0x0f, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x10, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x10, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x46, 0x0a, 0x10, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42,
	0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x4c, 0x47, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x4c, 0x47, 0x22, 0xac, 0x01, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x6e, 0x72, 0x6f, 0x6c,
	0x6c, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x6e,
	0x72, 0x6f, 0x6c, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0d, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x8a, 0x03, 0x0a, 0x10, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x0c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x2c, 0x0a, 0x11, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x65, 0x67,
	0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x69, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54,
	0x69, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x64, 0x22, 0x6c, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x44, 0x65, 0x73, 0x63, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x44, 0x65, 0x73, 0x63, 0x22,
	0xb9, 0x02, 0x0a, 0x0e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x59, 0x65, 0x73, 0x74, 0x65, 0x72, 0x64, 0x61, 0x79, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x59, 0x65, 0x73, 0x74, 0x65,
	0x72, 0x64, 0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x4e, 0x6f,
	0x77, 0x61, 0x64, 0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x4e, 0x6f, 0x77, 0x61, 0x64, 0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x28, 0x0a, 0x0f, 0x59, 0x65, 0x73, 0x74, 0x65, 0x72, 0x64, 0x61, 0x79, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x59, 0x65, 0x73, 0x74, 0x65,
	0x72, 0x64, 0x61, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x6f,
	0x6d, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x54, 0x6f, 0x6d, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0d, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0d, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x47, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x47, 0x22, 0x8b, 0x01, 0x0a, 0x0d,
	0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1c, 0x0a,
	0x09, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x09, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x0c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xcb, 0x02, 0x0a, 0x13, 0x52, 0x65,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x61, 0x78,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4d, 0x61,
	0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x75, 0x72, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x75, 0x72, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x63, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x63, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x12, 0x40, 0x0a, 0x0e, 0x52,
	0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x52,
	0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a,
	0x07, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x47, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x47, 0x22, 0x9a, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a,
	0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x0e, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x57, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x57, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9e, 0x02, 0x0a, 0x16, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x69,
	0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x44, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x44, 0x61,
	0x79, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x30, 0x0a, 0x09, 0x52, 0x65, 0x61, 0x63, 0x68, 0x53, 0x69,
	0x67, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x52, 0x65,
	0x61, 0x63, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x34, 0x0a, 0x0b, 0x4c, 0x6f, 0x74, 0x74, 0x65,
	0x72, 0x79, 0x50, 0x6f, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e,
	0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0b, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x22, 0x0a,
	0x0c, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x4d, 0x73, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x44, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x44, 0x65, 0x73, 0x22, 0x42, 0x0a, 0x08, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0b, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x22, 0xb7, 0x01, 0x0a, 0x08, 0x53, 0x69,
	0x67, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x44, 0x61, 0x79, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x03, 0x44, 0x61, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0b, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f,
	0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0a,
	0x43, 0x6f, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x02, 0x28, 0x03,
	0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1d, 0x2e,
	0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x47, 0x69, 0x66, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x22, 0x2d, 0x0a, 0x19, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x69, 0x67, 0x6e,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x12, 0x10, 0x0a, 0x03, 0x44, 0x61, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x44,
	0x61, 0x79, 0x22, 0x81, 0x01, 0x0a, 0x19, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x69, 0x67, 0x6e,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x44, 0x61, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x44,
	0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x4d, 0x73, 0x67, 0x12, 0x2c, 0x0a, 0x06, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x06,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x0a, 0x53, 0x69, 0x67, 0x6e, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0c, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x61, 0x6e,
	0x6b, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0a, 0x42,
	0x61, 0x6e, 0x6b, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x26, 0x0a, 0x06, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x06, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0x69, 0x0a, 0x13, 0x44, 0x61, 0x69, 0x6c, 0x79,
	0x53, 0x69, 0x67, 0x6e, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x4d, 0x73, 0x67, 0x12, 0x2c, 0x0a, 0x06, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x06, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x22, 0xb7, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x6c, 0x69, 0x65, 0x66, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x4c, 0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0d, 0x4c, 0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6e, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0f, 0x4d,
	0x61, 0x78, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x28,
	0x0a, 0x0f, 0x44, 0x61, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0f, 0x44, 0x61, 0x79, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x65, 0x73, 0x63,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x44, 0x65, 0x73, 0x63, 0x22, 0x9c, 0x01, 0x0a,
	0x10, 0x52, 0x65, 0x6c, 0x69, 0x65, 0x66, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x44, 0x61, 0x79, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x44, 0x61, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x47, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x47, 0x22, 0x41, 0x0a, 0x0b, 0x55,
	0x70, 0x64, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x8e,
	0x03, 0x0a, 0x18, 0x44, 0x5a, 0x50, 0x4b, 0x48, 0x41, 0x4c, 0x4c, 0x42, 0x69, 0x6e, 0x64, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x48,
	0x44, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x48, 0x44, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x44, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x06, 0x48, 0x44, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53,
	0x69, 0x74, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x53, 0x69, 0x74,
	0x65, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a,
	0x0a, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x44, 0x18, 0x05, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x0a, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x57, 0x78, 0x4f,
	0x70, 0x65, 0x6e, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x57, 0x78, 0x4f,
	0x70, 0x65, 0x6e, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x57, 0x78, 0x55, 0x6e, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x57, 0x78, 0x55, 0x6e, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x75, 0x6e, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x42, 0x75, 0x6e, 0x6c, 0x64, 0x49, 0x44, 0x12, 0x10, 0x0a,
	0x03, 0x56, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x56, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0xda, 0x02, 0x0a, 0x18, 0x44, 0x5a, 0x50, 0x4b, 0x48, 0x41, 0x4c, 0x4c, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x46, 0x65, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x46, 0x65, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x4d, 0x69, 0x6e, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x4d, 0x69, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4d, 0x61, 0x78,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4d, 0x61, 0x78, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x71, 0x0a, 0x19,
	0x44, 0x5a, 0x50, 0x4b, 0x48, 0x41, 0x4c, 0x4c, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x24, 0x0a, 0x0d, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0d, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x95, 0x01, 0x0a, 0x19, 0x44, 0x5a, 0x50, 0x4b, 0x48, 0x41, 0x4c, 0x4c, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x03, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x03, 0x52, 0x0e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0d, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x34, 0x0a, 0x16, 0x44, 0x5a, 0x50, 0x4b, 0x48,
	0x41, 0x4c, 0x4c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xb3, 0x01,
	0x0a, 0x19, 0x44, 0x5a, 0x50, 0x4b, 0x48, 0x41, 0x4c, 0x4c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x28, 0x0a,
	0x0f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4e,
	0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x65, 0x78, 0x74, 0x43,
	0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x4e, 0x65, 0x78, 0x74, 0x43,
	0x6f, 0x73, 0x74, 0x22, 0x97, 0x01, 0x0a, 0x19, 0x44, 0x5a, 0x50, 0x4b, 0x48, 0x41, 0x4c, 0x4c,
	0x4c, 0x75, 0x63, 0x6b, 0x79, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x53, 0x70, 0x69, 0x6e, 0x52, 0x65,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x22, 0xd0, 0x01,
	0x0a, 0x1d, 0x44, 0x5a, 0x50, 0x4b, 0x48, 0x41, 0x4c, 0x4c, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x57,
	0x68, 0x65, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x61, 0x6e, 0x53, 0x70, 0x69, 0x6e, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x43, 0x61, 0x6e, 0x53, 0x70, 0x69, 0x6e, 0x12, 0x1e, 0x0a,
	0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x09, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x5a, 0x50, 0x4b, 0x48,
	0x41, 0x4c, 0x4c, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x52, 0x0a, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x9b, 0x01, 0x0a, 0x19, 0x44, 0x5a, 0x50, 0x4b, 0x48, 0x41, 0x4c, 0x4c, 0x4c, 0x75, 0x63,
	0x6b, 0x79, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x0a, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x0c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6f, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1e,
	0x0a, 0x0a, 0x42, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x0a, 0x42, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x76,
	0x0a, 0x26, 0x44, 0x5a, 0x50, 0x4b, 0x48, 0x41, 0x4c, 0x4c, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x57,
	0x68, 0x65, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x74, 0x12, 0x4c, 0x0a, 0x0a, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6e,
	0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x5a, 0x50, 0x4b, 0x48, 0x41, 0x4c, 0x4c,
	0x4c, 0x75, 0x63, 0x6b, 0x79, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0a, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xa4, 0x01, 0x0a, 0x22, 0x44, 0x5a, 0x50, 0x4b, 0x48,
	0x41, 0x4c, 0x4c, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x0a, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x0c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x42, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x0a, 0x42, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x2e, 0x0a,
	0x12, 0x44, 0x5a, 0x50, 0x4b, 0x48, 0x41, 0x4c, 0x4c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x46,
	0x61, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x61, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x46, 0x61, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x22, 0xad, 0x01,
	0x0a, 0x15, 0x44, 0x5a, 0x50, 0x4b, 0x48, 0x41, 0x4c, 0x4c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x46, 0x61, 0x63, 0x65, 0x52, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0c, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x0e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x63, 0x65, 0x55, 0x72,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x08, 0x4e, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x22, 0x9a, 0x04,
	0x0a, 0x20, 0x44, 0x5a, 0x50, 0x4b, 0x48, 0x41, 0x4c, 0x4c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x52, 0x61, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x08, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x03, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28, 0x03, 0x52, 0x10, 0x44, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x45,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x65, 0x74, 0x46, 0x6c, 0x61,
	0x67, 0x18, 0x08, 0x20, 0x02, 0x28, 0x08, 0x52, 0x07, 0x42, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18,
	0x09, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0b, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x57, 0x69, 0x6e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x46, 0x6c,
	0x61, 0x67, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0c, 0x57, 0x69, 0x6e, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0b, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x55, 0x52, 0x4c, 0x18, 0x0c, 0x20, 0x02, 0x28, 0x09, 0x52, 0x03, 0x55, 0x52, 0x4c,
	0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0d, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x65, 0x6d, 0x6f,
	0x18, 0x0e, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x65,
	0x6d, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x61, 0x6e, 0x6b, 0x45, 0x6e, 0x64, 0x18, 0x0f, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x07, 0x52, 0x61, 0x6e, 0x6b, 0x45, 0x6e, 0x64, 0x12, 0x4c, 0x0a, 0x0c,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x10, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x5a,
	0x50, 0x4b, 0x48, 0x41, 0x4c, 0x4c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xea, 0x01, 0x0a, 0x1e, 0x44,
	0x5a, 0x50, 0x4b, 0x48, 0x41, 0x4c, 0x4c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1c, 0x0a,
	0x09, 0x52, 0x61, 0x6e, 0x6b, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x09, 0x52, 0x61, 0x6e, 0x6b, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x52,
	0x61, 0x6e, 0x6b, 0x45, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x52, 0x61,
	0x6e, 0x6b, 0x45, 0x6e, 0x64, 0x12, 0x26, 0x0a, 0x06, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x4d, 0x69, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x09, 0x4d, 0x69, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4d,
	0x69, 0x6e, 0x57, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x4d, 0x69, 0x6e,
	0x57, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x69, 0x6e, 0x42, 0x65, 0x74, 0x18, 0x06, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x06, 0x4d, 0x69, 0x6e, 0x42, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4d,
	0x69, 0x6e, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x18, 0x07, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x4d,
	0x69, 0x6e, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x22, 0x8d, 0x01, 0x0a, 0x1b, 0x44, 0x5a, 0x50, 0x4b,
	0x48, 0x41, 0x4c, 0x4c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x09, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x09, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x52, 0x61, 0x6e, 0x6b, 0x45, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07,
	0x52, 0x61, 0x6e, 0x6b, 0x45, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x49, 0x44, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x44, 0x22, 0xf8, 0x01, 0x0a, 0x1a, 0x44, 0x5a, 0x50, 0x4b,
	0x48, 0x41, 0x4c, 0x4c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x61, 0x63, 0x65, 0x52, 0x61,
	0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x52, 0x61,
	0x6e, 0x6b, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x5a, 0x50, 0x4b, 0x48, 0x41, 0x4c, 0x4c, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x52, 0x61, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x61, 0x6e, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x61, 0x6e, 0x6b, 0x45, 0x6e, 0x64, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x07, 0x52, 0x61, 0x6e, 0x6b, 0x45, 0x6e, 0x64, 0x12, 0x3c, 0x0a, 0x08,
	0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x5a, 0x50, 0x4b, 0x48, 0x41,
	0x4c, 0x4c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x61, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x6b,
	0x52, 0x08, 0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x4c, 0x61,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x02,
	0x28, 0x03, 0x52, 0x0e, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x90, 0x02, 0x0a, 0x16, 0x44, 0x5a, 0x50, 0x4b, 0x48, 0x41, 0x4c, 0x4c, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x61, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x16, 0x0a,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x04, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x42, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x57, 0x69, 0x6e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x57, 0x69, 0x6e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x61, 0x63, 0x65, 0x49, 0x44, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x46, 0x61, 0x63, 0x65, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x4d,
	0x61, 0x78, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x4d, 0x61,
	0x78, 0x52, 0x61, 0x6e, 0x6b, 0x22, 0x56, 0x0a, 0x18, 0x44, 0x5a, 0x50, 0x4b, 0x48, 0x41, 0x4c,
	0x4c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x61, 0x63, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x04, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x26, 0x0a, 0x06, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0xea, 0x01,
	0x0a, 0x1b, 0x44, 0x5a, 0x50, 0x4b, 0x48, 0x41, 0x4c, 0x4c, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a,
	0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x5a, 0x50, 0x4b, 0x48, 0x41, 0x4c,
	0x4c, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x47,
	0x0a, 0x07, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x5a, 0x50, 0x4b, 0x48,
	0x41, 0x4c, 0x4c, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x41, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x65, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x5a, 0x50, 0x4b, 0x48, 0x41, 0x4c, 0x4c, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x22, 0x57, 0x0a, 0x1d, 0x44, 0x5a,
	0x50, 0x4b, 0x48, 0x41, 0x4c, 0x4c, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x42,
	0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09,
	0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x9f, 0x01, 0x0a, 0x23, 0x44, 0x5a, 0x50, 0x4b, 0x48, 0x41, 0x4c, 0x4c,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x0c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x42, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x09, 0x42, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a,
	0x0e, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0e, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x63, 0x0a, 0x1b, 0x44, 0x5a, 0x50, 0x4b, 0x48, 0x41, 0x4c,
	0x4c, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x42, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0e, 0x52, 0x65, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x3d, 0x0a, 0x0d, 0x55, 0x73,
	0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x65, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x74, 0x52, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x22, 0xca, 0x02, 0x0a, 0x0c, 0x55, 0x73,
	0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x44,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x48, 0x44, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x44, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x06, 0x48, 0x44, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x69,
	0x74, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x53, 0x69, 0x74, 0x65,
	0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x44, 0x18, 0x05, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x0a, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x09, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x07, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x75, 0x6e, 0x6c, 0x64, 0x49,
	0x44, 0x18, 0x08, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x42, 0x75, 0x6e, 0x6c, 0x64, 0x49, 0x44,
	0x12, 0x10, 0x0a, 0x03, 0x56, 0x65, 0x72, 0x18, 0x09, 0x20, 0x02, 0x28, 0x09, 0x52, 0x03, 0x56,
	0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x05, 0x56, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x50, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x50, 0x22, 0x45, 0x0a, 0x11, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x55,
	0x73, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x43, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x22, 0x64, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x47, 0x61, 0x6d,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x36, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08,
	0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x48, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72,
	0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06,
	0x47, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x47, 0x61,
	0x6d, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x2f, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
}

var (
	file_HallMsg_proto_rawDescOnce sync.Once
	file_HallMsg_proto_rawDescData = file_HallMsg_proto_rawDesc
)

func file_HallMsg_proto_rawDescGZIP() []byte {
	file_HallMsg_proto_rawDescOnce.Do(func() {
		file_HallMsg_proto_rawDescData = protoimpl.X.CompressGZIP(file_HallMsg_proto_rawDescData)
	})
	return file_HallMsg_proto_rawDescData
}

var file_HallMsg_proto_msgTypes = make([]protoimpl.MessageInfo, 93)
var file_HallMsg_proto_goTypes = []interface{}{
	(*GuestLogin)(nil),                             // 0: netproto.GuestLogin
	(*UserLogin)(nil),                              // 1: netproto.UserLogin
	(*UserLoginRet)(nil),                           // 2: netproto.UserLoginRet
	(*UserHallLogonData)(nil),                      // 3: netproto.UserHallLogonData
	(*GameSortCateInfo)(nil),                       // 4: netproto.GameSortCateInfo
	(*GameCategoryInfo)(nil),                       // 5: netproto.GameCategoryInfo
	(*SkinVersionInfo)(nil),                        // 6: netproto.SkinVersionInfo
	(*UserLogout)(nil),                             // 7: netproto.UserLogout
	(*HallVerInfo)(nil),                            // 8: netproto.HallVerInfo
	(*AllGameServerInfo)(nil),                      // 9: netproto.AllGameServerInfo
	(*GameServerInfo)(nil),                         // 10: netproto.GameServerInfo
	(*RequestGameServerAddrInfo)(nil),              // 11: netproto.RequestGameServerAddrInfo
	(*GameServerAddr)(nil),                         // 12: netproto.GameServerAddr
	(*ZhifubaoInfo)(nil),                           // 13: netproto.ZhifubaoInfo
	(*ModifyPassword)(nil),                         // 14: netproto.ModifyPassword
	(*SendPhoneVCode)(nil),                         // 15: netproto.SendPhoneVCode
	(*SendPhoneVCodeRet)(nil),                      // 16: netproto.SendPhoneVCodeRet
	(*ModifyFace)(nil),                             // 17: netproto.ModifyFace
	(*MoneyDeposit)(nil),                           // 18: netproto.MoneyDeposit
	(*MoneyDepositRet)(nil),                        // 19: netproto.MoneyDepositRet
	(*BindGuestAccount)(nil),                       // 20: netproto.BindGuestAccount
	(*RequestUserHallInfo)(nil),                    // 21: netproto.RequestUserHallInfo
	(*FindSetPwdByPhone)(nil),                      // 22: netproto.FindSetPwdByPhone
	(*ModifyBankPassword)(nil),                     // 23: netproto.ModifyBankPassword
	(*FindSetBankPwdByPhone)(nil),                  // 24: netproto.FindSetBankPwdByPhone
	(*MailDetail)(nil),                             // 25: netproto.MailDetail
	(*MailList)(nil),                               // 26: netproto.MailList
	(*RequestMailDetail)(nil),                      // 27: netproto.RequestMailDetail
	(*ContactService)(nil),                         // 28: netproto.ContactService
	(*AgentDeatil)(nil),                            // 29: netproto.AgentDeatil
	(*AgentList)(nil),                              // 30: netproto.AgentList
	(*ReportAgent)(nil),                            // 31: netproto.ReportAgent
	(*RequestAgentList)(nil),                       // 32: netproto.RequestAgentList
	(*ApplyAgent)(nil),                             // 33: netproto.ApplyAgent
	(*ConvertMoney)(nil),                           // 34: netproto.ConvertMoney
	(*CreatePayOrder)(nil),                         // 35: netproto.CreatePayOrder
	(*CreatePayOrderRet)(nil),                      // 36: netproto.CreatePayOrderRet
	(*GetFAQ)(nil),                                 // 37: netproto.GetFAQ
	(*FAQDetail)(nil),                              // 38: netproto.FAQDetail
	(*BankCardInfo)(nil),                           // 39: netproto.BankCardInfo
	(*UnbindConvertType)(nil),                      // 40: netproto.UnbindConvertType
	(*ThirdAPIParam)(nil),                          // 41: netproto.ThirdAPIParam
	(*ThirdAPIReq)(nil),                            // 42: netproto.ThirdAPIReq
	(*ThirdAPIResp)(nil),                           // 43: netproto.ThirdAPIResp
	(*VideoGameAPIReq)(nil),                        // 44: netproto.VideoGameAPIReq
	(*VideoGameAPIRet)(nil),                        // 45: netproto.VideoGameAPIRet
	(*ActivityInfoRet)(nil),                        // 46: netproto.ActivityInfoRet
	(*UserActivityInfo)(nil),                       // 47: netproto.UserActivityInfo
	(*ActivityBaseInfo)(nil),                       // 48: netproto.ActivityBaseInfo
	(*ActivityConfig)(nil),                         // 49: netproto.ActivityConfig
	(*AdvanceInfoRet)(nil),                         // 50: netproto.AdvanceInfoRet
	(*AdvanceConfig)(nil),                          // 51: netproto.AdvanceConfig
	(*RechargeActivityRet)(nil),                    // 52: netproto.RechargeActivityRet
	(*RechargeConfig)(nil),                         // 53: netproto.RechargeConfig
	(*DailySingActionLoadRes)(nil),                 // 54: netproto.DailySingActionLoadRes
	(*PoolInfo)(nil),                               // 55: netproto.PoolInfo
	(*SignInfo)(nil),                               // 56: netproto.SignInfo
	(*DailySignReceiveRewardReq)(nil),              // 57: netproto.DailySignReceiveRewardReq
	(*DailySignReceiveRewardRes)(nil),              // 58: netproto.DailySignReceiveRewardRes
	(*SignReward)(nil),                             // 59: netproto.SignReward
	(*DailySignLotteryRes)(nil),                    // 60: netproto.DailySignLotteryRes
	(*ReliefConfigRet)(nil),                        // 61: netproto.ReliefConfigRet
	(*ReliefCollectRet)(nil),                       // 62: netproto.ReliefCollectRet
	(*UpdLanguage)(nil),                            // 63: netproto.UpdLanguage
	(*DZPKHALLBindAccountLogin)(nil),               // 64: netproto.DZPKHALLBindAccountLogin
	(*DZPKHALLWalletAddressGet)(nil),               // 65: netproto.DZPKHALLWalletAddressGet
	(*DZPKHALLWalletWithdrawReq)(nil),              // 66: netproto.DZPKHALLWalletWithdrawReq
	(*DZPKHALLWalletWithdrawRet)(nil),              // 67: netproto.DZPKHALLWalletWithdrawRet
	(*DZPKHALLChangeNickName)(nil),                 // 68: netproto.DZPKHALLChangeNickName
	(*DZPKHALLChangeNickNameRet)(nil),              // 69: netproto.DZPKHALLChangeNickNameRet
	(*DZPKHALLLuckyWheelSpinRet)(nil),              // 70: netproto.DZPKHALLLuckyWheelSpinRet
	(*DZPKHALLLuckyWheelUserDataRet)(nil),          // 71: netproto.DZPKHALLLuckyWheelUserDataRet
	(*DZPKHALLLuckyWheelRewards)(nil),              // 72: netproto.DZPKHALLLuckyWheelRewards
	(*DZPKHALLLuckyWheelUserRewardRecordsRet)(nil), // 73: netproto.DZPKHALLLuckyWheelUserRewardRecordsRet
	(*DZPKHALLLuckyWheelUserRewardRecord)(nil),     // 74: netproto.DZPKHALLLuckyWheelUserRewardRecord
	(*DZPKHALLChangeFace)(nil),                     // 75: netproto.DZPKHALLChangeFace
	(*DZPKHALLChangeFaceRet)(nil),                  // 76: netproto.DZPKHALLChangeFaceRet
	(*DZPKHALLPointsRaceActivityConfig)(nil),       // 77: netproto.DZPKHALLPointsRaceActivityConfig
	(*DZPKHALLPointsRaceRewardConfig)(nil),         // 78: netproto.DZPKHALLPointsRaceRewardConfig
	(*DZPKHALLPointRaceReqRanking)(nil),            // 79: netproto.DZPKHALLPointRaceReqRanking
	(*DZPKHALLPointsRaceRankList)(nil),             // 80: netproto.DZPKHALLPointsRaceRankList
	(*DZPKHALLPointsRaceRank)(nil),                 // 81: netproto.DZPKHALLPointsRaceRank
	(*DZPKHALLPointsRaceReward)(nil),               // 82: netproto.DZPKHALLPointsRaceReward
	(*DZPKHALLDepositActivityData)(nil),            // 83: netproto.DZPKHALLDepositActivityData
	(*DZPKHALLDepositActivityConfig)(nil),          // 84: netproto.DZPKHALLDepositActivityConfig
	(*DZPKHALLDepositActivityRewardConfig)(nil),    // 85: netproto.DZPKHALLDepositActivityRewardConfig
	(*DZPKHALLDepositActivityUser)(nil),            // 86: netproto.DZPKHALLDepositActivityUser
	(*UserLoginList)(nil),                          // 87: netproto.UserLoginList
	(*UserLoginSms)(nil),                           // 88: netproto.UserLoginSms
	(*CleanUserGameList)(nil),                      // 89: netproto.CleanUserGameList
	(*GetUserGameList)(nil),                        // 90: netproto.GetUserGameList
	(*GetUserGameListRet)(nil),                     // 91: netproto.GetUserGameListRet
	(*UserGameListInfo)(nil),                       // 92: netproto.UserGameListInfo
	(DailyLoginGiftState)(0),                       // 93: netproto.DailyLoginGiftState
	(*Item)(nil),                                   // 94: netproto.Item
}
var file_HallMsg_proto_depIdxs = []int32{
	3,  // 0: netproto.UserLoginRet.UserData:type_name -> netproto.UserHallLogonData
	4,  // 1: netproto.UserHallLogonData.GameList:type_name -> netproto.GameSortCateInfo
	5,  // 2: netproto.UserHallLogonData.GameCategoryList:type_name -> netproto.GameCategoryInfo
	6,  // 3: netproto.UserHallLogonData.VersionList:type_name -> netproto.SkinVersionInfo
	10, // 4: netproto.AllGameServerInfo.ServerList:type_name -> netproto.GameServerInfo
	25, // 5: netproto.MailList.MailList:type_name -> netproto.MailDetail
	29, // 6: netproto.AgentList.AgentList:type_name -> netproto.AgentDeatil
	41, // 7: netproto.ThirdAPIReq.Params:type_name -> netproto.ThirdAPIParam
	47, // 8: netproto.ActivityInfoRet.UserActivityInfo:type_name -> netproto.UserActivityInfo
	48, // 9: netproto.ActivityInfoRet.ActivityBaseInfo:type_name -> netproto.ActivityBaseInfo
	49, // 10: netproto.ActivityBaseInfo.ActivityConfig:type_name -> netproto.ActivityConfig
	51, // 11: netproto.AdvanceInfoRet.AdvanceConfig:type_name -> netproto.AdvanceConfig
	53, // 12: netproto.RechargeActivityRet.RechargeConfig:type_name -> netproto.RechargeConfig
	56, // 13: netproto.DailySingActionLoadRes.ReachSign:type_name -> netproto.SignInfo
	55, // 14: netproto.DailySingActionLoadRes.LotteryPool:type_name -> netproto.PoolInfo
	93, // 15: netproto.SignInfo.State:type_name -> netproto.DailyLoginGiftState
	59, // 16: netproto.DailySignReceiveRewardRes.Reward:type_name -> netproto.SignReward
	94, // 17: netproto.SignReward.Reward:type_name -> netproto.Item
	59, // 18: netproto.DailySignLotteryRes.Reward:type_name -> netproto.SignReward
	72, // 19: netproto.DZPKHALLLuckyWheelUserDataRet.RewardList:type_name -> netproto.DZPKHALLLuckyWheelRewards
	74, // 20: netproto.DZPKHALLLuckyWheelUserRewardRecordsRet.RewardList:type_name -> netproto.DZPKHALLLuckyWheelUserRewardRecord
	78, // 21: netproto.DZPKHALLPointsRaceActivityConfig.RewardConfig:type_name -> netproto.DZPKHALLPointsRaceRewardConfig
	94, // 22: netproto.DZPKHALLPointsRaceRewardConfig.Reward:type_name -> netproto.Item
	81, // 23: netproto.DZPKHALLPointsRaceRankList.UserRank:type_name -> netproto.DZPKHALLPointsRaceRank
	81, // 24: netproto.DZPKHALLPointsRaceRankList.RankList:type_name -> netproto.DZPKHALLPointsRaceRank
	94, // 25: netproto.DZPKHALLPointsRaceReward.Reward:type_name -> netproto.Item
	84, // 26: netproto.DZPKHALLDepositActivityData.Config:type_name -> netproto.DZPKHALLDepositActivityConfig
	85, // 27: netproto.DZPKHALLDepositActivityData.Rewards:type_name -> netproto.DZPKHALLDepositActivityRewardConfig
	86, // 28: netproto.DZPKHALLDepositActivityData.UserData:type_name -> netproto.DZPKHALLDepositActivityUser
	2,  // 29: netproto.UserLoginList.Users:type_name -> netproto.UserLoginRet
	92, // 30: netproto.GetUserGameListRet.GameList:type_name -> netproto.UserGameListInfo
	31, // [31:31] is the sub-list for method output_type
	31, // [31:31] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_HallMsg_proto_init() }
func file_HallMsg_proto_init() {
	if File_HallMsg_proto != nil {
		return
	}
	file_Hall_proto_init()
	file_CommonMsg_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_HallMsg_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuestLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLoginRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserHallLogonData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameSortCateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameCategoryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkinVersionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLogout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HallVerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllGameServerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameServerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestGameServerAddrInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameServerAddr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZhifubaoInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyPassword); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendPhoneVCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendPhoneVCodeRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyFace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneyDeposit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneyDepositRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindGuestAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestUserHallInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindSetPwdByPhone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyBankPassword); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindSetBankPwdByPhone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MailDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MailList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestMailDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentDeatil); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportAgent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestAgentList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyAgent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvertMoney); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePayOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePayOrderRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFAQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FAQDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BankCardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnbindConvertType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThirdAPIParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThirdAPIReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThirdAPIResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoGameAPIReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoGameAPIRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityInfoRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserActivityInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityBaseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdvanceInfoRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdvanceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RechargeActivityRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RechargeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DailySingActionLoadRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoolInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DailySignReceiveRewardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DailySignReceiveRewardRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DailySignLotteryRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReliefConfigRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReliefCollectRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdLanguage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DZPKHALLBindAccountLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DZPKHALLWalletAddressGet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DZPKHALLWalletWithdrawReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DZPKHALLWalletWithdrawRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DZPKHALLChangeNickName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DZPKHALLChangeNickNameRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DZPKHALLLuckyWheelSpinRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DZPKHALLLuckyWheelUserDataRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DZPKHALLLuckyWheelRewards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DZPKHALLLuckyWheelUserRewardRecordsRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DZPKHALLLuckyWheelUserRewardRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DZPKHALLChangeFace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DZPKHALLChangeFaceRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DZPKHALLPointsRaceActivityConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DZPKHALLPointsRaceRewardConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DZPKHALLPointRaceReqRanking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DZPKHALLPointsRaceRankList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DZPKHALLPointsRaceRank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DZPKHALLPointsRaceReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DZPKHALLDepositActivityData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DZPKHALLDepositActivityConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DZPKHALLDepositActivityRewardConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DZPKHALLDepositActivityUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLoginList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLoginSms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CleanUserGameList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserGameList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserGameListRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HallMsg_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserGameListInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_HallMsg_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   93,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_HallMsg_proto_goTypes,
		DependencyIndexes: file_HallMsg_proto_depIdxs,
		MessageInfos:      file_HallMsg_proto_msgTypes,
	}.Build()
	File_HallMsg_proto = out.File
	file_HallMsg_proto_rawDesc = nil
	file_HallMsg_proto_goTypes = nil
	file_HallMsg_proto_depIdxs = nil
}
